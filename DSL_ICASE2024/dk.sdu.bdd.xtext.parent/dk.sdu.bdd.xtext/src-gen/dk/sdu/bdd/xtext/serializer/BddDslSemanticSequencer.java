/*
 * generated by Xtext 2.32.0
 */
package dk.sdu.bdd.xtext.serializer;

import com.google.inject.Inject;
import dk.sdu.bdd.xtext.bddDsl.ActionDef;
import dk.sdu.bdd.xtext.bddDsl.BddDslPackage;
import dk.sdu.bdd.xtext.bddDsl.DeclarativeActionRef;
import dk.sdu.bdd.xtext.bddDsl.DeclarativeEntityAction;
import dk.sdu.bdd.xtext.bddDsl.DeclarativeEntityDef;
import dk.sdu.bdd.xtext.bddDsl.DeclarativeEntityPropertyStatePhrase;
import dk.sdu.bdd.xtext.bddDsl.DeclarativeEntityRef;
import dk.sdu.bdd.xtext.bddDsl.DeclarativeEntityStatePhrase;
import dk.sdu.bdd.xtext.bddDsl.DeclarativeScenarioAction;
import dk.sdu.bdd.xtext.bddDsl.DeclarativeScenarioState;
import dk.sdu.bdd.xtext.bddDsl.DeclarativeStatePhrase;
import dk.sdu.bdd.xtext.bddDsl.DoubleValue;
import dk.sdu.bdd.xtext.bddDsl.ImperativeActionDef;
import dk.sdu.bdd.xtext.bddDsl.ImperativeEntityAction;
import dk.sdu.bdd.xtext.bddDsl.ImperativeEntityDef;
import dk.sdu.bdd.xtext.bddDsl.ImperativeEntityPropertyStatePhrase;
import dk.sdu.bdd.xtext.bddDsl.ImperativeEntityRef;
import dk.sdu.bdd.xtext.bddDsl.ImperativeEntityStatePhrase;
import dk.sdu.bdd.xtext.bddDsl.ImperativePropertyDef;
import dk.sdu.bdd.xtext.bddDsl.ImperativePropertyRef;
import dk.sdu.bdd.xtext.bddDsl.ImperativeScenario;
import dk.sdu.bdd.xtext.bddDsl.ImperativeScenarioAction;
import dk.sdu.bdd.xtext.bddDsl.ImperativeScenarioState;
import dk.sdu.bdd.xtext.bddDsl.ImperativeStateDef;
import dk.sdu.bdd.xtext.bddDsl.ImperativeStateName;
import dk.sdu.bdd.xtext.bddDsl.ImperativeStatePhrase;
import dk.sdu.bdd.xtext.bddDsl.IntValue;
import dk.sdu.bdd.xtext.bddDsl.Model;
import dk.sdu.bdd.xtext.bddDsl.ModelRef;
import dk.sdu.bdd.xtext.bddDsl.PropertyDef;
import dk.sdu.bdd.xtext.bddDsl.PropertyRef;
import dk.sdu.bdd.xtext.bddDsl.Scenario;
import dk.sdu.bdd.xtext.bddDsl.StateDef;
import dk.sdu.bdd.xtext.bddDsl.StateName;
import dk.sdu.bdd.xtext.bddDsl.StringValue;
import dk.sdu.bdd.xtext.bddDsl.VerbAction;
import dk.sdu.bdd.xtext.services.BddDslGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class BddDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private BddDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == BddDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case BddDslPackage.ACTION_DEF:
				sequence_ActionDef(context, (ActionDef) semanticObject); 
				return; 
			case BddDslPackage.DECLARATIVE_ACTION_REF:
				sequence_DeclarativeActionRef(context, (DeclarativeActionRef) semanticObject); 
				return; 
			case BddDslPackage.DECLARATIVE_ENTITY_ACTION:
				sequence_DeclarativeEntityAction(context, (DeclarativeEntityAction) semanticObject); 
				return; 
			case BddDslPackage.DECLARATIVE_ENTITY_DEF:
				sequence_DeclarativeEntityDef(context, (DeclarativeEntityDef) semanticObject); 
				return; 
			case BddDslPackage.DECLARATIVE_ENTITY_PROPERTY_STATE_PHRASE:
				sequence_DeclarativeEntityPropertyStatePhrase(context, (DeclarativeEntityPropertyStatePhrase) semanticObject); 
				return; 
			case BddDslPackage.DECLARATIVE_ENTITY_REF:
				sequence_DeclarativeEntityRef(context, (DeclarativeEntityRef) semanticObject); 
				return; 
			case BddDslPackage.DECLARATIVE_ENTITY_STATE_PHRASE:
				sequence_DeclarativeEntityStatePhrase(context, (DeclarativeEntityStatePhrase) semanticObject); 
				return; 
			case BddDslPackage.DECLARATIVE_SCENARIO_ACTION:
				sequence_DeclarativeScenarioAction(context, (DeclarativeScenarioAction) semanticObject); 
				return; 
			case BddDslPackage.DECLARATIVE_SCENARIO_STATE:
				sequence_DeclarativeScenarioState(context, (DeclarativeScenarioState) semanticObject); 
				return; 
			case BddDslPackage.DECLARATIVE_STATE_PHRASE:
				sequence_DeclarativeStatePhrase(context, (DeclarativeStatePhrase) semanticObject); 
				return; 
			case BddDslPackage.DOUBLE_VALUE:
				sequence_DoubleValue(context, (DoubleValue) semanticObject); 
				return; 
			case BddDslPackage.IMPERATIVE_ACTION_DEF:
				sequence_ImperativeActionDef(context, (ImperativeActionDef) semanticObject); 
				return; 
			case BddDslPackage.IMPERATIVE_ENTITY_ACTION:
				sequence_ImperativeEntityAction(context, (ImperativeEntityAction) semanticObject); 
				return; 
			case BddDslPackage.IMPERATIVE_ENTITY_DEF:
				sequence_ImperativeEntityDef(context, (ImperativeEntityDef) semanticObject); 
				return; 
			case BddDslPackage.IMPERATIVE_ENTITY_PROPERTY_STATE_PHRASE:
				sequence_ImperativeEntityPropertyStatePhrase(context, (ImperativeEntityPropertyStatePhrase) semanticObject); 
				return; 
			case BddDslPackage.IMPERATIVE_ENTITY_REF:
				sequence_ImperativeEntityRef(context, (ImperativeEntityRef) semanticObject); 
				return; 
			case BddDslPackage.IMPERATIVE_ENTITY_STATE_PHRASE:
				sequence_ImperativeEntityStatePhrase(context, (ImperativeEntityStatePhrase) semanticObject); 
				return; 
			case BddDslPackage.IMPERATIVE_PROPERTY_DEF:
				sequence_ImperativePropertyDef(context, (ImperativePropertyDef) semanticObject); 
				return; 
			case BddDslPackage.IMPERATIVE_PROPERTY_REF:
				sequence_ImperativePropertyRef(context, (ImperativePropertyRef) semanticObject); 
				return; 
			case BddDslPackage.IMPERATIVE_SCENARIO:
				sequence_ImperativeScenario(context, (ImperativeScenario) semanticObject); 
				return; 
			case BddDslPackage.IMPERATIVE_SCENARIO_ACTION:
				sequence_ImperativeScenarioAction(context, (ImperativeScenarioAction) semanticObject); 
				return; 
			case BddDslPackage.IMPERATIVE_SCENARIO_STATE:
				sequence_ImperativeScenarioState(context, (ImperativeScenarioState) semanticObject); 
				return; 
			case BddDslPackage.IMPERATIVE_STATE_DEF:
				sequence_ImperativeStateDef(context, (ImperativeStateDef) semanticObject); 
				return; 
			case BddDslPackage.IMPERATIVE_STATE_NAME:
				sequence_ImperativeStateName(context, (ImperativeStateName) semanticObject); 
				return; 
			case BddDslPackage.IMPERATIVE_STATE_PHRASE:
				sequence_ImperativeStatePhrase(context, (ImperativeStatePhrase) semanticObject); 
				return; 
			case BddDslPackage.INT_VALUE:
				sequence_IntValue(context, (IntValue) semanticObject); 
				return; 
			case BddDslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case BddDslPackage.MODEL_REF:
				sequence_ModelRef(context, (ModelRef) semanticObject); 
				return; 
			case BddDslPackage.PROPERTY_DEF:
				sequence_PropertyDef(context, (PropertyDef) semanticObject); 
				return; 
			case BddDslPackage.PROPERTY_REF:
				sequence_PropertyRef(context, (PropertyRef) semanticObject); 
				return; 
			case BddDslPackage.SCENARIO:
				sequence_Scenario(context, (Scenario) semanticObject); 
				return; 
			case BddDslPackage.STATE_DEF:
				sequence_StateDef(context, (StateDef) semanticObject); 
				return; 
			case BddDslPackage.STATE_NAME:
				sequence_StateName(context, (StateName) semanticObject); 
				return; 
			case BddDslPackage.STRING_VALUE:
				sequence_StringValue(context, (StringValue) semanticObject); 
				return; 
			case BddDslPackage.VERB_ACTION:
				sequence_VerbAction(context, (VerbAction) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     ActionDef returns ActionDef
	 *
	 * Constraint:
	 *     name=WORD
	 * </pre>
	 */
	protected void sequence_ActionDef(ISerializationContext context, ActionDef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BddDslPackage.Literals.ACTION_DEF__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BddDslPackage.Literals.ACTION_DEF__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getActionDefAccess().getNameWORDParserRuleCall_0_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DeclarativeActionRef returns DeclarativeActionRef
	 *
	 * Constraint:
	 *     (verb=[ActionDef|WORD] argument=SimpleValue? preposition=PREP? entity=DeclarativeEntityDef?)
	 * </pre>
	 */
	protected void sequence_DeclarativeActionRef(ISerializationContext context, DeclarativeActionRef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DeclarativeActionPhrase returns DeclarativeEntityAction
	 *     DeclarativeEntityAction returns DeclarativeEntityAction
	 *
	 * Constraint:
	 *     (entityAction=DeclarativeEntityRef actionDef=[ActionDef|ID] entityRef=DeclarativeEntityRef? propertyRef=PropertyRef?)
	 * </pre>
	 */
	protected void sequence_DeclarativeEntityAction(ISerializationContext context, DeclarativeEntityAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DeclarativeEntityDef returns DeclarativeEntityDef
	 *
	 * Constraint:
	 *     (
	 *         (name=ID | name=STRING) 
	 *         (superEntities+=[DeclarativeEntityDef|ID] superEntities+=[DeclarativeEntityDef|ID]*)? 
	 *         (actions+=ActionDef actions+=ActionDef*)? 
	 *         (states+=StateDef states+=StateDef*)? 
	 *         (properties+=PropertyDef properties+=PropertyDef*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_DeclarativeEntityDef(ISerializationContext context, DeclarativeEntityDef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DeclarativeStatePhrase returns DeclarativeEntityPropertyStatePhrase
	 *     DeclarativeEntityPropertyStatePhrase returns DeclarativeEntityPropertyStatePhrase
	 *
	 * Constraint:
	 *     (property=[PropertyDef|WORD]? entity=DeclarativeEntityRef (value=SimpleValue | values+=SimpleValue | values+=SimpleValue+)?)
	 * </pre>
	 */
	protected void sequence_DeclarativeEntityPropertyStatePhrase(ISerializationContext context, DeclarativeEntityPropertyStatePhrase semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DeclarativeEntityRef returns DeclarativeEntityRef
	 *
	 * Constraint:
	 *     ((entity=[DeclarativeEntityDef|WORD] name=ENTITY_IDENTITY) | name=ENTITY_IDENTITY)
	 * </pre>
	 */
	protected void sequence_DeclarativeEntityRef(ISerializationContext context, DeclarativeEntityRef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DeclarativeEntityStatePhrase returns DeclarativeEntityStatePhrase
	 *
	 * Constraint:
	 *     (property=[PropertyDef|WORD]? entity=DeclarativeEntityRef state=[StateName|ID])
	 * </pre>
	 */
	protected void sequence_DeclarativeEntityStatePhrase(ISerializationContext context, DeclarativeEntityStatePhrase semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DeclarativeScenarioAction returns DeclarativeScenarioAction
	 *
	 * Constraint:
	 *     (actions+=DeclarativeActionPhrase actions+=DeclarativeActionPhrase*)
	 * </pre>
	 */
	protected void sequence_DeclarativeScenarioAction(ISerializationContext context, DeclarativeScenarioAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DeclarativeScenarioState returns DeclarativeScenarioState
	 *
	 * Constraint:
	 *     (states+=DeclarativeStatePhrase states+=DeclarativeStatePhrase*)
	 * </pre>
	 */
	protected void sequence_DeclarativeScenarioState(ISerializationContext context, DeclarativeScenarioState semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DeclarativeStatePhrase returns DeclarativeStatePhrase
	 *
	 * Constraint:
	 *     esp=DeclarativeEntityStatePhrase
	 * </pre>
	 */
	protected void sequence_DeclarativeStatePhrase(ISerializationContext context, DeclarativeStatePhrase semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BddDslPackage.Literals.DECLARATIVE_STATE_PHRASE__ESP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BddDslPackage.Literals.DECLARATIVE_STATE_PHRASE__ESP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDeclarativeStatePhraseAccess().getEspDeclarativeEntityStatePhraseParserRuleCall_1_0(), semanticObject.getEsp());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SimpleValue returns DoubleValue
	 *     DoubleValue returns DoubleValue
	 *
	 * Constraint:
	 *     value=DOUBLE
	 * </pre>
	 */
	protected void sequence_DoubleValue(ISerializationContext context, DoubleValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BddDslPackage.Literals.DOUBLE_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BddDslPackage.Literals.DOUBLE_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDoubleValueAccess().getValueDOUBLEParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ImperativeActionDef returns ImperativeActionDef
	 *
	 * Constraint:
	 *     name=WORD
	 * </pre>
	 */
	protected void sequence_ImperativeActionDef(ISerializationContext context, ImperativeActionDef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BddDslPackage.Literals.IMPERATIVE_ACTION_DEF__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BddDslPackage.Literals.IMPERATIVE_ACTION_DEF__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getImperativeActionDefAccess().getNameWORDParserRuleCall_0_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ImperativeActionPhrase returns ImperativeEntityAction
	 *     ImperativeEntityAction returns ImperativeEntityAction
	 *
	 * Constraint:
	 *     (entityAction=ImperativeEntityRef adverb=ADVERB? actionDef=[ImperativeActionDef|ID] propertyRef=ImperativePropertyRef?)
	 * </pre>
	 */
	protected void sequence_ImperativeEntityAction(ISerializationContext context, ImperativeEntityAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ImperativeEntityDef returns ImperativeEntityDef
	 *
	 * Constraint:
	 *     (
	 *         (name=ID | name=STRING) 
	 *         (superEntities+=[ImperativeEntityDef|ID] superEntities+=[ImperativeEntityDef|ID]*)? 
	 *         (actions+=ImperativeActionDef actions+=ImperativeActionDef*)? 
	 *         (states+=ImperativeStateDef states+=ImperativeStateDef*)? 
	 *         (properties+=ImperativePropertyDef properties+=ImperativePropertyDef*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_ImperativeEntityDef(ISerializationContext context, ImperativeEntityDef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ImperativeEntityPropertyStatePhrase returns ImperativeEntityPropertyStatePhrase
	 *
	 * Constraint:
	 *     (property=[ImperativePropertyDef|ID] entity=ImperativeEntityRef propertyValue=StringValue)
	 * </pre>
	 */
	protected void sequence_ImperativeEntityPropertyStatePhrase(ISerializationContext context, ImperativeEntityPropertyStatePhrase semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BddDslPackage.Literals.IMPERATIVE_ENTITY_PROPERTY_STATE_PHRASE__PROPERTY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BddDslPackage.Literals.IMPERATIVE_ENTITY_PROPERTY_STATE_PHRASE__PROPERTY));
			if (transientValues.isValueTransient(semanticObject, BddDslPackage.Literals.IMPERATIVE_ENTITY_PROPERTY_STATE_PHRASE__ENTITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BddDslPackage.Literals.IMPERATIVE_ENTITY_PROPERTY_STATE_PHRASE__ENTITY));
			if (transientValues.isValueTransient(semanticObject, BddDslPackage.Literals.IMPERATIVE_ENTITY_PROPERTY_STATE_PHRASE__PROPERTY_VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BddDslPackage.Literals.IMPERATIVE_ENTITY_PROPERTY_STATE_PHRASE__PROPERTY_VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getImperativeEntityPropertyStatePhraseAccess().getPropertyImperativePropertyDefIDTerminalRuleCall_1_0_1(), semanticObject.eGet(BddDslPackage.Literals.IMPERATIVE_ENTITY_PROPERTY_STATE_PHRASE__PROPERTY, false));
		feeder.accept(grammarAccess.getImperativeEntityPropertyStatePhraseAccess().getEntityImperativeEntityRefParserRuleCall_3_0(), semanticObject.getEntity());
		feeder.accept(grammarAccess.getImperativeEntityPropertyStatePhraseAccess().getPropertyValueStringValueParserRuleCall_5_0(), semanticObject.getPropertyValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ImperativeEntityRef returns ImperativeEntityRef
	 *
	 * Constraint:
	 *     (entity=[ImperativeEntityDef|ID] name=STRING)
	 * </pre>
	 */
	protected void sequence_ImperativeEntityRef(ISerializationContext context, ImperativeEntityRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BddDslPackage.Literals.IMPERATIVE_ENTITY_REF__ENTITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BddDslPackage.Literals.IMPERATIVE_ENTITY_REF__ENTITY));
			if (transientValues.isValueTransient(semanticObject, BddDslPackage.Literals.IMPERATIVE_ENTITY_REF__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BddDslPackage.Literals.IMPERATIVE_ENTITY_REF__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getImperativeEntityRefAccess().getEntityImperativeEntityDefIDTerminalRuleCall_1_0_1(), semanticObject.eGet(BddDslPackage.Literals.IMPERATIVE_ENTITY_REF__ENTITY, false));
		feeder.accept(grammarAccess.getImperativeEntityRefAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ImperativeEntityStatePhrase returns ImperativeEntityStatePhrase
	 *
	 * Constraint:
	 *     (entity=ImperativeEntityRef state=[ImperativeStateName|ID])
	 * </pre>
	 */
	protected void sequence_ImperativeEntityStatePhrase(ISerializationContext context, ImperativeEntityStatePhrase semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BddDslPackage.Literals.IMPERATIVE_ENTITY_STATE_PHRASE__ENTITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BddDslPackage.Literals.IMPERATIVE_ENTITY_STATE_PHRASE__ENTITY));
			if (transientValues.isValueTransient(semanticObject, BddDslPackage.Literals.IMPERATIVE_ENTITY_STATE_PHRASE__STATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BddDslPackage.Literals.IMPERATIVE_ENTITY_STATE_PHRASE__STATE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getImperativeEntityStatePhraseAccess().getEntityImperativeEntityRefParserRuleCall_0_0(), semanticObject.getEntity());
		feeder.accept(grammarAccess.getImperativeEntityStatePhraseAccess().getStateImperativeStateNameIDTerminalRuleCall_2_0_1(), semanticObject.eGet(BddDslPackage.Literals.IMPERATIVE_ENTITY_STATE_PHRASE__STATE, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ImperativePropertyDef returns ImperativePropertyDef
	 *
	 * Constraint:
	 *     (name=WORD plural?='*'?)
	 * </pre>
	 */
	protected void sequence_ImperativePropertyDef(ISerializationContext context, ImperativePropertyDef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ImperativePropertyRef returns ImperativePropertyRef
	 *
	 * Constraint:
	 *     (propertyref='to' property=[ImperativePropertyDef|ID] propertyValue=StringValue (properyValue2=StringValue propery2=[ImperativePropertyDef|ID])?)
	 * </pre>
	 */
	protected void sequence_ImperativePropertyRef(ISerializationContext context, ImperativePropertyRef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ImperativeScenarioAction returns ImperativeScenarioAction
	 *
	 * Constraint:
	 *     (actions+=ImperativeActionPhrase actions+=ImperativeActionPhrase*)
	 * </pre>
	 */
	protected void sequence_ImperativeScenarioAction(ISerializationContext context, ImperativeScenarioAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ImperativeScenarioState returns ImperativeScenarioState
	 *
	 * Constraint:
	 *     (states+=ImperativeStatePhrase states+=ImperativeStatePhrase*)
	 * </pre>
	 */
	protected void sequence_ImperativeScenarioState(ISerializationContext context, ImperativeScenarioState semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ImperativeScenario returns ImperativeScenario
	 *
	 * Constraint:
	 *     (preState=ImperativeScenarioState action=ImperativeScenarioAction postState=ImperativeScenarioState)
	 * </pre>
	 */
	protected void sequence_ImperativeScenario(ISerializationContext context, ImperativeScenario semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BddDslPackage.Literals.IMPERATIVE_SCENARIO__PRE_STATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BddDslPackage.Literals.IMPERATIVE_SCENARIO__PRE_STATE));
			if (transientValues.isValueTransient(semanticObject, BddDslPackage.Literals.IMPERATIVE_SCENARIO__ACTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BddDslPackage.Literals.IMPERATIVE_SCENARIO__ACTION));
			if (transientValues.isValueTransient(semanticObject, BddDslPackage.Literals.IMPERATIVE_SCENARIO__POST_STATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BddDslPackage.Literals.IMPERATIVE_SCENARIO__POST_STATE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getImperativeScenarioAccess().getPreStateImperativeScenarioStateParserRuleCall_3_0(), semanticObject.getPreState());
		feeder.accept(grammarAccess.getImperativeScenarioAccess().getActionImperativeScenarioActionParserRuleCall_5_0(), semanticObject.getAction());
		feeder.accept(grammarAccess.getImperativeScenarioAccess().getPostStateImperativeScenarioStateParserRuleCall_7_0(), semanticObject.getPostState());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ImperativeStateDef returns ImperativeStateDef
	 *
	 * Constraint:
	 *     (postive=ImperativeStateName negative=ImperativeStateName?)
	 * </pre>
	 */
	protected void sequence_ImperativeStateDef(ISerializationContext context, ImperativeStateDef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ImperativeStateName returns ImperativeStateName
	 *
	 * Constraint:
	 *     impStatName=StateName
	 * </pre>
	 */
	protected void sequence_ImperativeStateName(ISerializationContext context, ImperativeStateName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BddDslPackage.Literals.IMPERATIVE_STATE_NAME__IMP_STAT_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BddDslPackage.Literals.IMPERATIVE_STATE_NAME__IMP_STAT_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getImperativeStateNameAccess().getImpStatNameStateNameParserRuleCall_0(), semanticObject.getImpStatName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ImperativeStatePhrase returns ImperativeStatePhrase
	 *
	 * Constraint:
	 *     (epsp=ImperativeEntityPropertyStatePhrase | esp=ImperativeEntityStatePhrase)
	 * </pre>
	 */
	protected void sequence_ImperativeStatePhrase(ISerializationContext context, ImperativeStatePhrase semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SimpleValue returns IntValue
	 *     IntValue returns IntValue
	 *
	 * Constraint:
	 *     value=INT
	 * </pre>
	 */
	protected void sequence_IntValue(ISerializationContext context, IntValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BddDslPackage.Literals.INT_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BddDslPackage.Literals.INT_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntValueAccess().getValueINTTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ModelRef returns ModelRef
	 *
	 * Constraint:
	 *     modelRef=[Model|ID]
	 * </pre>
	 */
	protected void sequence_ModelRef(ISerializationContext context, ModelRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BddDslPackage.Literals.MODEL_REF__MODEL_REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BddDslPackage.Literals.MODEL_REF__MODEL_REF));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getModelRefAccess().getModelRefModelIDTerminalRuleCall_1_0_1(), semanticObject.eGet(BddDslPackage.Literals.MODEL_REF__MODEL_REF, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (name=ID (modelRefs+=ModelRef | declarativeEntityDef+=DeclarativeEntityDef | imperativeEntityDef+=ImperativeEntityDef | scenarios+=Scenario)*)
	 * </pre>
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PropertyDef returns PropertyDef
	 *
	 * Constraint:
	 *     (name=WORD plural?='*'?)
	 * </pre>
	 */
	protected void sequence_PropertyDef(ISerializationContext context, PropertyDef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PropertyRef returns PropertyRef
	 *
	 * Constraint:
	 *     (propertyref='to' property=[PropertyDef|ID] propertyValue=StringValue (properyValue2=StringValue propery2=[PropertyDef|ID])?)
	 * </pre>
	 */
	protected void sequence_PropertyRef(ISerializationContext context, PropertyRef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Scenario returns Scenario
	 *
	 * Constraint:
	 *     (
	 *         name=ID_OR_STRING 
	 *         preStateE=DeclarativeScenarioState? 
	 *         imperative1=ImperativeScenario? 
	 *         actionE=DeclarativeScenarioAction? 
	 *         imperative2=ImperativeScenario? 
	 *         preStateE1=DeclarativeScenarioState? 
	 *         imperative3=ImperativeScenario?
	 *     )
	 * </pre>
	 */
	protected void sequence_Scenario(ISerializationContext context, Scenario semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     StateDef returns StateDef
	 *
	 * Constraint:
	 *     (postive=StateName negative=StateName?)
	 * </pre>
	 */
	protected void sequence_StateDef(ISerializationContext context, StateDef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     StateName returns StateName
	 *
	 * Constraint:
	 *     (name=WORD (name2=WORD | name3=WORD)?)
	 * </pre>
	 */
	protected void sequence_StateName(ISerializationContext context, StateName semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SimpleValue returns StringValue
	 *     StringValue returns StringValue
	 *
	 * Constraint:
	 *     value=STRING
	 * </pre>
	 */
	protected void sequence_StringValue(ISerializationContext context, StringValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BddDslPackage.Literals.STRING_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BddDslPackage.Literals.STRING_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DeclarativeActionPhrase returns VerbAction
	 *     VerbAction returns VerbAction
	 *
	 * Constraint:
	 *     (action=DeclarativeActionRef entity=DeclarativeEntityDef? entity2=DeclarativeEntityRef entity3=DeclarativeEntityRef?)
	 * </pre>
	 */
	protected void sequence_VerbAction(ISerializationContext context, VerbAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
