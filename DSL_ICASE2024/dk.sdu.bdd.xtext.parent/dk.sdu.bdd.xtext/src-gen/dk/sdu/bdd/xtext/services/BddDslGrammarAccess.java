/*
 * generated by Xtext 2.32.0
 */
package dk.sdu.bdd.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class BddDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cModelKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cModelRefsAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cModelRefsModelRefParserRuleCall_1_0_0 = (RuleCall)cModelRefsAssignment_1_0.eContents().get(0);
		private final Assignment cDeclarativeEntityDefAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cDeclarativeEntityDefDeclarativeEntityDefParserRuleCall_1_1_0 = (RuleCall)cDeclarativeEntityDefAssignment_1_1.eContents().get(0);
		private final Assignment cImperativeEntityDefAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cImperativeEntityDefImperativeEntityDefParserRuleCall_1_2_0 = (RuleCall)cImperativeEntityDefAssignment_1_2.eContents().get(0);
		private final Assignment cScenariosAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cScenariosScenarioParserRuleCall_1_3_0 = (RuleCall)cScenariosAssignment_1_3.eContents().get(0);
		
		//Model:
		//    ('model' name = ID)
		//    (
		//        (modelRefs += ModelRef) |
		//        (declarativeEntityDef += DeclarativeEntityDef) |
		//        (imperativeEntityDef += ImperativeEntityDef) |
		//        (scenarios += Scenario)
		//    )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('model' name = ID)
		//(
		//    (modelRefs += ModelRef) |
		//    (declarativeEntityDef += DeclarativeEntityDef) |
		//    (imperativeEntityDef += ImperativeEntityDef) |
		//    (scenarios += Scenario)
		//)*
		public Group getGroup() { return cGroup; }
		
		//('model' name = ID)
		public Group getGroup_0() { return cGroup_0; }
		
		//'model'
		public Keyword getModelKeyword_0_0() { return cModelKeyword_0_0; }
		
		//name = ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }
		
		//(
		//    (modelRefs += ModelRef) |
		//    (declarativeEntityDef += DeclarativeEntityDef) |
		//    (imperativeEntityDef += ImperativeEntityDef) |
		//    (scenarios += Scenario)
		//)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//(modelRefs += ModelRef)
		public Assignment getModelRefsAssignment_1_0() { return cModelRefsAssignment_1_0; }
		
		//ModelRef
		public RuleCall getModelRefsModelRefParserRuleCall_1_0_0() { return cModelRefsModelRefParserRuleCall_1_0_0; }
		
		//(declarativeEntityDef += DeclarativeEntityDef)
		public Assignment getDeclarativeEntityDefAssignment_1_1() { return cDeclarativeEntityDefAssignment_1_1; }
		
		//DeclarativeEntityDef
		public RuleCall getDeclarativeEntityDefDeclarativeEntityDefParserRuleCall_1_1_0() { return cDeclarativeEntityDefDeclarativeEntityDefParserRuleCall_1_1_0; }
		
		//(imperativeEntityDef += ImperativeEntityDef)
		public Assignment getImperativeEntityDefAssignment_1_2() { return cImperativeEntityDefAssignment_1_2; }
		
		//ImperativeEntityDef
		public RuleCall getImperativeEntityDefImperativeEntityDefParserRuleCall_1_2_0() { return cImperativeEntityDefImperativeEntityDefParserRuleCall_1_2_0; }
		
		//(scenarios += Scenario)
		public Assignment getScenariosAssignment_1_3() { return cScenariosAssignment_1_3; }
		
		//Scenario
		public RuleCall getScenariosScenarioParserRuleCall_1_3_0() { return cScenariosScenarioParserRuleCall_1_3_0; }
	}
	public class ModelRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.ModelRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUsingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cModelRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cModelRefModelCrossReference_1_0 = (CrossReference)cModelRefAssignment_1.eContents().get(0);
		private final RuleCall cModelRefModelIDTerminalRuleCall_1_0_1 = (RuleCall)cModelRefModelCrossReference_1_0.eContents().get(1);
		
		//ModelRef:
		//    'using' modelRef = [Model]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'using' modelRef = [Model]
		public Group getGroup() { return cGroup; }
		
		//'using'
		public Keyword getUsingKeyword_0() { return cUsingKeyword_0; }
		
		//modelRef = [Model]
		public Assignment getModelRefAssignment_1() { return cModelRefAssignment_1; }
		
		//[Model]
		public CrossReference getModelRefModelCrossReference_1_0() { return cModelRefModelCrossReference_1_0; }
		
		//ID
		public RuleCall getModelRefModelIDTerminalRuleCall_1_0_1() { return cModelRefModelIDTerminalRuleCall_1_0_1; }
	}
	public class DeclarativeEntityDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.DeclarativeEntityDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeclarativeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEntityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cNameAlternatives_2_0 = (Alternatives)cNameAssignment_2.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_2_0_0 = (RuleCall)cNameAlternatives_2_0.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0_1 = (RuleCall)cNameAlternatives_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cHyphenMinusKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cWORDParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cIsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSuperEntitiesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cSuperEntitiesDeclarativeEntityDefCrossReference_4_1_0 = (CrossReference)cSuperEntitiesAssignment_4_1.eContents().get(0);
		private final RuleCall cSuperEntitiesDeclarativeEntityDefIDTerminalRuleCall_4_1_0_1 = (RuleCall)cSuperEntitiesDeclarativeEntityDefCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cSuperEntitiesAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final CrossReference cSuperEntitiesDeclarativeEntityDefCrossReference_4_2_1_0 = (CrossReference)cSuperEntitiesAssignment_4_2_1.eContents().get(0);
		private final RuleCall cSuperEntitiesDeclarativeEntityDefIDTerminalRuleCall_4_2_1_0_1 = (RuleCall)cSuperEntitiesDeclarativeEntityDefCrossReference_4_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cActionsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cActionsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cActionsActionDefParserRuleCall_6_1_0 = (RuleCall)cActionsAssignment_6_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Keyword cCommaKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cActionsAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final RuleCall cActionsActionDefParserRuleCall_6_2_1_0 = (RuleCall)cActionsAssignment_6_2_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cStatesKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cStatesAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cStatesStateDefParserRuleCall_7_1_0 = (RuleCall)cStatesAssignment_7_1.eContents().get(0);
		private final RuleCall cWORDParserRuleCall_7_2 = (RuleCall)cGroup_7.eContents().get(2);
		private final Group cGroup_7_3 = (Group)cGroup_7.eContents().get(3);
		private final RuleCall cWORDParserRuleCall_7_3_0 = (RuleCall)cGroup_7_3.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_7_3_1 = (Keyword)cGroup_7_3.eContents().get(1);
		private final RuleCall cWORDParserRuleCall_7_3_2 = (RuleCall)cGroup_7_3.eContents().get(2);
		private final Group cGroup_7_4 = (Group)cGroup_7.eContents().get(4);
		private final Alternatives cAlternatives_7_4_0 = (Alternatives)cGroup_7_4.eContents().get(0);
		private final Keyword cCommaKeyword_7_4_0_0 = (Keyword)cAlternatives_7_4_0.eContents().get(0);
		private final Keyword cAndKeyword_7_4_0_1 = (Keyword)cAlternatives_7_4_0.eContents().get(1);
		private final Keyword cTheKeyword_7_4_0_2 = (Keyword)cAlternatives_7_4_0.eContents().get(2);
		private final Assignment cStatesAssignment_7_4_1 = (Assignment)cGroup_7_4.eContents().get(1);
		private final RuleCall cStatesStateDefParserRuleCall_7_4_1_0 = (RuleCall)cStatesAssignment_7_4_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cPropertiesKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cPropertiesAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cPropertiesPropertyDefParserRuleCall_8_1_0 = (RuleCall)cPropertiesAssignment_8_1.eContents().get(0);
		private final RuleCall cWORDParserRuleCall_8_2 = (RuleCall)cGroup_8.eContents().get(2);
		private final Group cGroup_8_3 = (Group)cGroup_8.eContents().get(3);
		private final RuleCall cWORDParserRuleCall_8_3_0 = (RuleCall)cGroup_8_3.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_8_3_1 = (Keyword)cGroup_8_3.eContents().get(1);
		private final RuleCall cWORDParserRuleCall_8_3_2 = (RuleCall)cGroup_8_3.eContents().get(2);
		private final Group cGroup_8_4 = (Group)cGroup_8.eContents().get(4);
		private final Alternatives cAlternatives_8_4_0 = (Alternatives)cGroup_8_4.eContents().get(0);
		private final Keyword cCommaKeyword_8_4_0_0 = (Keyword)cAlternatives_8_4_0.eContents().get(0);
		private final Keyword cAndKeyword_8_4_0_1 = (Keyword)cAlternatives_8_4_0.eContents().get(1);
		private final Keyword cTheKeyword_8_4_0_2 = (Keyword)cAlternatives_8_4_0.eContents().get(2);
		private final Assignment cPropertiesAssignment_8_4_1 = (Assignment)cGroup_8_4.eContents().get(1);
		private final RuleCall cPropertiesPropertyDefParserRuleCall_8_4_1_0 = (RuleCall)cPropertiesAssignment_8_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//DeclarativeEntityDef:
		//    'declarative' 'entity' name = (ID | STRING) ('-'WORD)? ('is' superEntities += [DeclarativeEntityDef] (',' superEntities += [DeclarativeEntityDef])*)? '{'
		//        ('actions:' (actions += ActionDef) (',' actions += ActionDef)*)?
		//        ('states:' (states += StateDef) WORD? (WORD'-'WORD)? ((','|'and'|'the') states += StateDef)*)?
		//        ('properties:' (properties += PropertyDef) WORD? (WORD'-'WORD)? ((','|'and'|'the') properties += PropertyDef)*)?
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'declarative' 'entity' name = (ID | STRING) ('-'WORD)? ('is' superEntities += [DeclarativeEntityDef] (',' superEntities += [DeclarativeEntityDef])*)? '{'
		//    ('actions:' (actions += ActionDef) (',' actions += ActionDef)*)?
		//    ('states:' (states += StateDef) WORD? (WORD'-'WORD)? ((','|'and'|'the') states += StateDef)*)?
		//    ('properties:' (properties += PropertyDef) WORD? (WORD'-'WORD)? ((','|'and'|'the') properties += PropertyDef)*)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'declarative'
		public Keyword getDeclarativeKeyword_0() { return cDeclarativeKeyword_0; }
		
		//'entity'
		public Keyword getEntityKeyword_1() { return cEntityKeyword_1; }
		
		//name = (ID | STRING)
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//(ID | STRING)
		public Alternatives getNameAlternatives_2_0() { return cNameAlternatives_2_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0_0() { return cNameIDTerminalRuleCall_2_0_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0_1() { return cNameSTRINGTerminalRuleCall_2_0_1; }
		
		//('-'WORD)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_3_0() { return cHyphenMinusKeyword_3_0; }
		
		//WORD
		public RuleCall getWORDParserRuleCall_3_1() { return cWORDParserRuleCall_3_1; }
		
		//('is' superEntities += [DeclarativeEntityDef] (',' superEntities += [DeclarativeEntityDef])*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'is'
		public Keyword getIsKeyword_4_0() { return cIsKeyword_4_0; }
		
		//superEntities += [DeclarativeEntityDef]
		public Assignment getSuperEntitiesAssignment_4_1() { return cSuperEntitiesAssignment_4_1; }
		
		//[DeclarativeEntityDef]
		public CrossReference getSuperEntitiesDeclarativeEntityDefCrossReference_4_1_0() { return cSuperEntitiesDeclarativeEntityDefCrossReference_4_1_0; }
		
		//ID
		public RuleCall getSuperEntitiesDeclarativeEntityDefIDTerminalRuleCall_4_1_0_1() { return cSuperEntitiesDeclarativeEntityDefIDTerminalRuleCall_4_1_0_1; }
		
		//(',' superEntities += [DeclarativeEntityDef])*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//superEntities += [DeclarativeEntityDef]
		public Assignment getSuperEntitiesAssignment_4_2_1() { return cSuperEntitiesAssignment_4_2_1; }
		
		//[DeclarativeEntityDef]
		public CrossReference getSuperEntitiesDeclarativeEntityDefCrossReference_4_2_1_0() { return cSuperEntitiesDeclarativeEntityDefCrossReference_4_2_1_0; }
		
		//ID
		public RuleCall getSuperEntitiesDeclarativeEntityDefIDTerminalRuleCall_4_2_1_0_1() { return cSuperEntitiesDeclarativeEntityDefIDTerminalRuleCall_4_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//('actions:' (actions += ActionDef) (',' actions += ActionDef)*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'actions:'
		public Keyword getActionsKeyword_6_0() { return cActionsKeyword_6_0; }
		
		//(actions += ActionDef)
		public Assignment getActionsAssignment_6_1() { return cActionsAssignment_6_1; }
		
		//ActionDef
		public RuleCall getActionsActionDefParserRuleCall_6_1_0() { return cActionsActionDefParserRuleCall_6_1_0; }
		
		//(',' actions += ActionDef)*
		public Group getGroup_6_2() { return cGroup_6_2; }
		
		//','
		public Keyword getCommaKeyword_6_2_0() { return cCommaKeyword_6_2_0; }
		
		//actions += ActionDef
		public Assignment getActionsAssignment_6_2_1() { return cActionsAssignment_6_2_1; }
		
		//ActionDef
		public RuleCall getActionsActionDefParserRuleCall_6_2_1_0() { return cActionsActionDefParserRuleCall_6_2_1_0; }
		
		//('states:' (states += StateDef) WORD? (WORD'-'WORD)? ((','|'and'|'the') states += StateDef)*)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'states:'
		public Keyword getStatesKeyword_7_0() { return cStatesKeyword_7_0; }
		
		//(states += StateDef)
		public Assignment getStatesAssignment_7_1() { return cStatesAssignment_7_1; }
		
		//StateDef
		public RuleCall getStatesStateDefParserRuleCall_7_1_0() { return cStatesStateDefParserRuleCall_7_1_0; }
		
		//WORD?
		public RuleCall getWORDParserRuleCall_7_2() { return cWORDParserRuleCall_7_2; }
		
		//(WORD'-'WORD)?
		public Group getGroup_7_3() { return cGroup_7_3; }
		
		//WORD
		public RuleCall getWORDParserRuleCall_7_3_0() { return cWORDParserRuleCall_7_3_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_7_3_1() { return cHyphenMinusKeyword_7_3_1; }
		
		//WORD
		public RuleCall getWORDParserRuleCall_7_3_2() { return cWORDParserRuleCall_7_3_2; }
		
		//((','|'and'|'the') states += StateDef)*
		public Group getGroup_7_4() { return cGroup_7_4; }
		
		//(','|'and'|'the')
		public Alternatives getAlternatives_7_4_0() { return cAlternatives_7_4_0; }
		
		//','
		public Keyword getCommaKeyword_7_4_0_0() { return cCommaKeyword_7_4_0_0; }
		
		//'and'
		public Keyword getAndKeyword_7_4_0_1() { return cAndKeyword_7_4_0_1; }
		
		//'the'
		public Keyword getTheKeyword_7_4_0_2() { return cTheKeyword_7_4_0_2; }
		
		//states += StateDef
		public Assignment getStatesAssignment_7_4_1() { return cStatesAssignment_7_4_1; }
		
		//StateDef
		public RuleCall getStatesStateDefParserRuleCall_7_4_1_0() { return cStatesStateDefParserRuleCall_7_4_1_0; }
		
		//('properties:' (properties += PropertyDef) WORD? (WORD'-'WORD)? ((','|'and'|'the') properties += PropertyDef)*)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'properties:'
		public Keyword getPropertiesKeyword_8_0() { return cPropertiesKeyword_8_0; }
		
		//(properties += PropertyDef)
		public Assignment getPropertiesAssignment_8_1() { return cPropertiesAssignment_8_1; }
		
		//PropertyDef
		public RuleCall getPropertiesPropertyDefParserRuleCall_8_1_0() { return cPropertiesPropertyDefParserRuleCall_8_1_0; }
		
		//WORD?
		public RuleCall getWORDParserRuleCall_8_2() { return cWORDParserRuleCall_8_2; }
		
		//(WORD'-'WORD)?
		public Group getGroup_8_3() { return cGroup_8_3; }
		
		//WORD
		public RuleCall getWORDParserRuleCall_8_3_0() { return cWORDParserRuleCall_8_3_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_8_3_1() { return cHyphenMinusKeyword_8_3_1; }
		
		//WORD
		public RuleCall getWORDParserRuleCall_8_3_2() { return cWORDParserRuleCall_8_3_2; }
		
		//((','|'and'|'the') properties += PropertyDef)*
		public Group getGroup_8_4() { return cGroup_8_4; }
		
		//(','|'and'|'the')
		public Alternatives getAlternatives_8_4_0() { return cAlternatives_8_4_0; }
		
		//','
		public Keyword getCommaKeyword_8_4_0_0() { return cCommaKeyword_8_4_0_0; }
		
		//'and'
		public Keyword getAndKeyword_8_4_0_1() { return cAndKeyword_8_4_0_1; }
		
		//'the'
		public Keyword getTheKeyword_8_4_0_2() { return cTheKeyword_8_4_0_2; }
		
		//properties += PropertyDef
		public Assignment getPropertiesAssignment_8_4_1() { return cPropertiesAssignment_8_4_1; }
		
		//PropertyDef
		public RuleCall getPropertiesPropertyDefParserRuleCall_8_4_1_0() { return cPropertiesPropertyDefParserRuleCall_8_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class ImperativeEntityDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.ImperativeEntityDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImperativeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEntityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cNameAlternatives_2_0 = (Alternatives)cNameAssignment_2.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_2_0_0 = (RuleCall)cNameAlternatives_2_0.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0_1 = (RuleCall)cNameAlternatives_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cHyphenMinusKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cWORDParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cIsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSuperEntitiesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cSuperEntitiesImperativeEntityDefCrossReference_4_1_0 = (CrossReference)cSuperEntitiesAssignment_4_1.eContents().get(0);
		private final RuleCall cSuperEntitiesImperativeEntityDefIDTerminalRuleCall_4_1_0_1 = (RuleCall)cSuperEntitiesImperativeEntityDefCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cSuperEntitiesAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final CrossReference cSuperEntitiesImperativeEntityDefCrossReference_4_2_1_0 = (CrossReference)cSuperEntitiesAssignment_4_2_1.eContents().get(0);
		private final RuleCall cSuperEntitiesImperativeEntityDefIDTerminalRuleCall_4_2_1_0_1 = (RuleCall)cSuperEntitiesImperativeEntityDefCrossReference_4_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cActionsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cActionsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cActionsImperativeActionDefParserRuleCall_6_1_0 = (RuleCall)cActionsAssignment_6_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Keyword cCommaKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cActionsAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final RuleCall cActionsImperativeActionDefParserRuleCall_6_2_1_0 = (RuleCall)cActionsAssignment_6_2_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cStatesKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cStatesAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cStatesImperativeStateDefParserRuleCall_7_1_0 = (RuleCall)cStatesAssignment_7_1.eContents().get(0);
		private final RuleCall cWORDParserRuleCall_7_2 = (RuleCall)cGroup_7.eContents().get(2);
		private final Group cGroup_7_3 = (Group)cGroup_7.eContents().get(3);
		private final RuleCall cWORDParserRuleCall_7_3_0 = (RuleCall)cGroup_7_3.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_7_3_1 = (Keyword)cGroup_7_3.eContents().get(1);
		private final RuleCall cWORDParserRuleCall_7_3_2 = (RuleCall)cGroup_7_3.eContents().get(2);
		private final Group cGroup_7_4 = (Group)cGroup_7.eContents().get(4);
		private final Alternatives cAlternatives_7_4_0 = (Alternatives)cGroup_7_4.eContents().get(0);
		private final Keyword cCommaKeyword_7_4_0_0 = (Keyword)cAlternatives_7_4_0.eContents().get(0);
		private final Keyword cAndKeyword_7_4_0_1 = (Keyword)cAlternatives_7_4_0.eContents().get(1);
		private final Keyword cTheKeyword_7_4_0_2 = (Keyword)cAlternatives_7_4_0.eContents().get(2);
		private final Assignment cStatesAssignment_7_4_1 = (Assignment)cGroup_7_4.eContents().get(1);
		private final RuleCall cStatesImperativeStateDefParserRuleCall_7_4_1_0 = (RuleCall)cStatesAssignment_7_4_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cPropertiesKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cPropertiesAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cPropertiesImperativePropertyDefParserRuleCall_8_1_0 = (RuleCall)cPropertiesAssignment_8_1.eContents().get(0);
		private final RuleCall cWORDParserRuleCall_8_2 = (RuleCall)cGroup_8.eContents().get(2);
		private final Group cGroup_8_3 = (Group)cGroup_8.eContents().get(3);
		private final RuleCall cWORDParserRuleCall_8_3_0 = (RuleCall)cGroup_8_3.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_8_3_1 = (Keyword)cGroup_8_3.eContents().get(1);
		private final RuleCall cWORDParserRuleCall_8_3_2 = (RuleCall)cGroup_8_3.eContents().get(2);
		private final Group cGroup_8_4 = (Group)cGroup_8.eContents().get(4);
		private final Alternatives cAlternatives_8_4_0 = (Alternatives)cGroup_8_4.eContents().get(0);
		private final Keyword cCommaKeyword_8_4_0_0 = (Keyword)cAlternatives_8_4_0.eContents().get(0);
		private final Keyword cAndKeyword_8_4_0_1 = (Keyword)cAlternatives_8_4_0.eContents().get(1);
		private final Keyword cTheKeyword_8_4_0_2 = (Keyword)cAlternatives_8_4_0.eContents().get(2);
		private final Assignment cPropertiesAssignment_8_4_1 = (Assignment)cGroup_8_4.eContents().get(1);
		private final RuleCall cPropertiesImperativePropertyDefParserRuleCall_8_4_1_0 = (RuleCall)cPropertiesAssignment_8_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//ImperativeEntityDef:
		//    'imperative' 'entity' name = (ID | STRING) ('-'WORD)? ('is' superEntities += [ImperativeEntityDef] (',' superEntities += [ImperativeEntityDef])*)? '{'
		//        ('actions:' (actions += ImperativeActionDef) (',' actions += ImperativeActionDef)*)?
		//        ('states:' (states += ImperativeStateDef) WORD? (WORD'-'WORD)? ((','|'and'|'the') states += ImperativeStateDef)*)?
		//        ('properties:' (properties += ImperativePropertyDef) WORD? (WORD'-'WORD)? ((','|'and'|'the') properties += ImperativePropertyDef)*)?
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'imperative' 'entity' name = (ID | STRING) ('-'WORD)? ('is' superEntities += [ImperativeEntityDef] (',' superEntities += [ImperativeEntityDef])*)? '{'
		//    ('actions:' (actions += ImperativeActionDef) (',' actions += ImperativeActionDef)*)?
		//    ('states:' (states += ImperativeStateDef) WORD? (WORD'-'WORD)? ((','|'and'|'the') states += ImperativeStateDef)*)?
		//    ('properties:' (properties += ImperativePropertyDef) WORD? (WORD'-'WORD)? ((','|'and'|'the') properties += ImperativePropertyDef)*)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'imperative'
		public Keyword getImperativeKeyword_0() { return cImperativeKeyword_0; }
		
		//'entity'
		public Keyword getEntityKeyword_1() { return cEntityKeyword_1; }
		
		//name = (ID | STRING)
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//(ID | STRING)
		public Alternatives getNameAlternatives_2_0() { return cNameAlternatives_2_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0_0() { return cNameIDTerminalRuleCall_2_0_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0_1() { return cNameSTRINGTerminalRuleCall_2_0_1; }
		
		//('-'WORD)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_3_0() { return cHyphenMinusKeyword_3_0; }
		
		//WORD
		public RuleCall getWORDParserRuleCall_3_1() { return cWORDParserRuleCall_3_1; }
		
		//('is' superEntities += [ImperativeEntityDef] (',' superEntities += [ImperativeEntityDef])*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'is'
		public Keyword getIsKeyword_4_0() { return cIsKeyword_4_0; }
		
		//superEntities += [ImperativeEntityDef]
		public Assignment getSuperEntitiesAssignment_4_1() { return cSuperEntitiesAssignment_4_1; }
		
		//[ImperativeEntityDef]
		public CrossReference getSuperEntitiesImperativeEntityDefCrossReference_4_1_0() { return cSuperEntitiesImperativeEntityDefCrossReference_4_1_0; }
		
		//ID
		public RuleCall getSuperEntitiesImperativeEntityDefIDTerminalRuleCall_4_1_0_1() { return cSuperEntitiesImperativeEntityDefIDTerminalRuleCall_4_1_0_1; }
		
		//(',' superEntities += [ImperativeEntityDef])*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//superEntities += [ImperativeEntityDef]
		public Assignment getSuperEntitiesAssignment_4_2_1() { return cSuperEntitiesAssignment_4_2_1; }
		
		//[ImperativeEntityDef]
		public CrossReference getSuperEntitiesImperativeEntityDefCrossReference_4_2_1_0() { return cSuperEntitiesImperativeEntityDefCrossReference_4_2_1_0; }
		
		//ID
		public RuleCall getSuperEntitiesImperativeEntityDefIDTerminalRuleCall_4_2_1_0_1() { return cSuperEntitiesImperativeEntityDefIDTerminalRuleCall_4_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//('actions:' (actions += ImperativeActionDef) (',' actions += ImperativeActionDef)*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'actions:'
		public Keyword getActionsKeyword_6_0() { return cActionsKeyword_6_0; }
		
		//(actions += ImperativeActionDef)
		public Assignment getActionsAssignment_6_1() { return cActionsAssignment_6_1; }
		
		//ImperativeActionDef
		public RuleCall getActionsImperativeActionDefParserRuleCall_6_1_0() { return cActionsImperativeActionDefParserRuleCall_6_1_0; }
		
		//(',' actions += ImperativeActionDef)*
		public Group getGroup_6_2() { return cGroup_6_2; }
		
		//','
		public Keyword getCommaKeyword_6_2_0() { return cCommaKeyword_6_2_0; }
		
		//actions += ImperativeActionDef
		public Assignment getActionsAssignment_6_2_1() { return cActionsAssignment_6_2_1; }
		
		//ImperativeActionDef
		public RuleCall getActionsImperativeActionDefParserRuleCall_6_2_1_0() { return cActionsImperativeActionDefParserRuleCall_6_2_1_0; }
		
		//('states:' (states += ImperativeStateDef) WORD? (WORD'-'WORD)? ((','|'and'|'the') states += ImperativeStateDef)*)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'states:'
		public Keyword getStatesKeyword_7_0() { return cStatesKeyword_7_0; }
		
		//(states += ImperativeStateDef)
		public Assignment getStatesAssignment_7_1() { return cStatesAssignment_7_1; }
		
		//ImperativeStateDef
		public RuleCall getStatesImperativeStateDefParserRuleCall_7_1_0() { return cStatesImperativeStateDefParserRuleCall_7_1_0; }
		
		//WORD?
		public RuleCall getWORDParserRuleCall_7_2() { return cWORDParserRuleCall_7_2; }
		
		//(WORD'-'WORD)?
		public Group getGroup_7_3() { return cGroup_7_3; }
		
		//WORD
		public RuleCall getWORDParserRuleCall_7_3_0() { return cWORDParserRuleCall_7_3_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_7_3_1() { return cHyphenMinusKeyword_7_3_1; }
		
		//WORD
		public RuleCall getWORDParserRuleCall_7_3_2() { return cWORDParserRuleCall_7_3_2; }
		
		//((','|'and'|'the') states += ImperativeStateDef)*
		public Group getGroup_7_4() { return cGroup_7_4; }
		
		//(','|'and'|'the')
		public Alternatives getAlternatives_7_4_0() { return cAlternatives_7_4_0; }
		
		//','
		public Keyword getCommaKeyword_7_4_0_0() { return cCommaKeyword_7_4_0_0; }
		
		//'and'
		public Keyword getAndKeyword_7_4_0_1() { return cAndKeyword_7_4_0_1; }
		
		//'the'
		public Keyword getTheKeyword_7_4_0_2() { return cTheKeyword_7_4_0_2; }
		
		//states += ImperativeStateDef
		public Assignment getStatesAssignment_7_4_1() { return cStatesAssignment_7_4_1; }
		
		//ImperativeStateDef
		public RuleCall getStatesImperativeStateDefParserRuleCall_7_4_1_0() { return cStatesImperativeStateDefParserRuleCall_7_4_1_0; }
		
		//('properties:' (properties += ImperativePropertyDef) WORD? (WORD'-'WORD)? ((','|'and'|'the') properties += ImperativePropertyDef)*)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'properties:'
		public Keyword getPropertiesKeyword_8_0() { return cPropertiesKeyword_8_0; }
		
		//(properties += ImperativePropertyDef)
		public Assignment getPropertiesAssignment_8_1() { return cPropertiesAssignment_8_1; }
		
		//ImperativePropertyDef
		public RuleCall getPropertiesImperativePropertyDefParserRuleCall_8_1_0() { return cPropertiesImperativePropertyDefParserRuleCall_8_1_0; }
		
		//WORD?
		public RuleCall getWORDParserRuleCall_8_2() { return cWORDParserRuleCall_8_2; }
		
		//(WORD'-'WORD)?
		public Group getGroup_8_3() { return cGroup_8_3; }
		
		//WORD
		public RuleCall getWORDParserRuleCall_8_3_0() { return cWORDParserRuleCall_8_3_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_8_3_1() { return cHyphenMinusKeyword_8_3_1; }
		
		//WORD
		public RuleCall getWORDParserRuleCall_8_3_2() { return cWORDParserRuleCall_8_3_2; }
		
		//((','|'and'|'the') properties += ImperativePropertyDef)*
		public Group getGroup_8_4() { return cGroup_8_4; }
		
		//(','|'and'|'the')
		public Alternatives getAlternatives_8_4_0() { return cAlternatives_8_4_0; }
		
		//','
		public Keyword getCommaKeyword_8_4_0_0() { return cCommaKeyword_8_4_0_0; }
		
		//'and'
		public Keyword getAndKeyword_8_4_0_1() { return cAndKeyword_8_4_0_1; }
		
		//'the'
		public Keyword getTheKeyword_8_4_0_2() { return cTheKeyword_8_4_0_2; }
		
		//properties += ImperativePropertyDef
		public Assignment getPropertiesAssignment_8_4_1() { return cPropertiesAssignment_8_4_1; }
		
		//ImperativePropertyDef
		public RuleCall getPropertiesImperativePropertyDefParserRuleCall_8_4_1_0() { return cPropertiesImperativePropertyDefParserRuleCall_8_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class ImperativeActionDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.ImperativeActionDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameWORDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cWORDParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ImperativeActionDef:
		//    name = WORD WORD?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name = WORD WORD?
		public Group getGroup() { return cGroup; }
		
		//name = WORD
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//WORD
		public RuleCall getNameWORDParserRuleCall_0_0() { return cNameWORDParserRuleCall_0_0; }
		
		//WORD?
		public RuleCall getWORDParserRuleCall_1() { return cWORDParserRuleCall_1; }
	}
	public class ActionDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.ActionDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameWORDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cWORDParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ActionDef:
		//    name = WORD WORD?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name = WORD WORD?
		public Group getGroup() { return cGroup; }
		
		//name = WORD
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//WORD
		public RuleCall getNameWORDParserRuleCall_0_0() { return cNameWORDParserRuleCall_0_0; }
		
		//WORD?
		public RuleCall getWORDParserRuleCall_1() { return cWORDParserRuleCall_1; }
	}
	public class PREPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.PREP");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cOnKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cInKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cFromKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cToKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cIntoKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cForKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cWithKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//PREP: ('on' | 'in' | 'from' | 'to' | 'into' | 'for' | 'with');
		@Override public ParserRule getRule() { return rule; }
		
		//('on' | 'in' | 'from' | 'to' | 'into' | 'for' | 'with')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'on'
		public Keyword getOnKeyword_0() { return cOnKeyword_0; }
		
		//'in'
		public Keyword getInKeyword_1() { return cInKeyword_1; }
		
		//'from'
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }
		
		//'to'
		public Keyword getToKeyword_3() { return cToKeyword_3; }
		
		//'into'
		public Keyword getIntoKeyword_4() { return cIntoKeyword_4; }
		
		//'for'
		public Keyword getForKeyword_5() { return cForKeyword_5; }
		
		//'with'
		public Keyword getWithKeyword_6() { return cWithKeyword_6; }
	}
	public class ADVERBElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.ADVERB");
		private final Keyword cLinearlyKeyword = (Keyword)rule.eContents().get(1);
		
		//ADVERB: ('linearly');
		@Override public ParserRule getRule() { return rule; }
		
		//('linearly')
		public Keyword getLinearlyKeyword() { return cLinearlyKeyword; }
	}
	public class WORDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.WORD");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//WORD: ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	public class StateDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.StateDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPostiveAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPostiveStateNameParserRuleCall_0_0 = (RuleCall)cPostiveAssignment_0.eContents().get(0);
		private final RuleCall cPREPParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSolidusKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNegativeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNegativeStateNameParserRuleCall_2_1_0 = (RuleCall)cNegativeAssignment_2_1.eContents().get(0);
		
		//StateDef: postive = StateName PREP? ('/' negative = StateName)?;
		@Override public ParserRule getRule() { return rule; }
		
		//postive = StateName PREP? ('/' negative = StateName)?
		public Group getGroup() { return cGroup; }
		
		//postive = StateName
		public Assignment getPostiveAssignment_0() { return cPostiveAssignment_0; }
		
		//StateName
		public RuleCall getPostiveStateNameParserRuleCall_0_0() { return cPostiveStateNameParserRuleCall_0_0; }
		
		//PREP?
		public RuleCall getPREPParserRuleCall_1() { return cPREPParserRuleCall_1; }
		
		//('/' negative = StateName)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'/'
		public Keyword getSolidusKeyword_2_0() { return cSolidusKeyword_2_0; }
		
		//negative = StateName
		public Assignment getNegativeAssignment_2_1() { return cNegativeAssignment_2_1; }
		
		//StateName
		public RuleCall getNegativeStateNameParserRuleCall_2_1_0() { return cNegativeStateNameParserRuleCall_2_1_0; }
	}
	public class StateNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.StateName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameWORDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cAndKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cName2Assignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cName2WORDParserRuleCall_1_0_1_0 = (RuleCall)cName2Assignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cOffKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cName3Assignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cName3WORDParserRuleCall_1_1_1_0 = (RuleCall)cName3Assignment_1_1_1.eContents().get(0);
		
		//StateName: name = WORD ( ('and' name2 = WORD) | ('off' name3 = WORD))?;
		@Override public ParserRule getRule() { return rule; }
		
		//name = WORD ( ('and' name2 = WORD) | ('off' name3 = WORD))?
		public Group getGroup() { return cGroup; }
		
		//name = WORD
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//WORD
		public RuleCall getNameWORDParserRuleCall_0_0() { return cNameWORDParserRuleCall_0_0; }
		
		//( ('and' name2 = WORD) | ('off' name3 = WORD))?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//('and' name2 = WORD)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'and'
		public Keyword getAndKeyword_1_0_0() { return cAndKeyword_1_0_0; }
		
		//name2 = WORD
		public Assignment getName2Assignment_1_0_1() { return cName2Assignment_1_0_1; }
		
		//WORD
		public RuleCall getName2WORDParserRuleCall_1_0_1_0() { return cName2WORDParserRuleCall_1_0_1_0; }
		
		//('off' name3 = WORD)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'off'
		public Keyword getOffKeyword_1_1_0() { return cOffKeyword_1_1_0; }
		
		//name3 = WORD
		public Assignment getName3Assignment_1_1_1() { return cName3Assignment_1_1_1; }
		
		//WORD
		public RuleCall getName3WORDParserRuleCall_1_1_1_0() { return cName3WORDParserRuleCall_1_1_1_0; }
	}
	public class PropertyDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.PropertyDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameWORDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cPluralAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cPluralAsteriskKeyword_1_0 = (Keyword)cPluralAssignment_1.eContents().get(0);
		
		////StateName: name = (WORD) ('and'|'off')? (WORD)?;
		//PropertyDef: name = WORD (plural ?= '*')?;
		@Override public ParserRule getRule() { return rule; }
		
		//name = WORD (plural ?= '*')?
		public Group getGroup() { return cGroup; }
		
		//name = WORD
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//WORD
		public RuleCall getNameWORDParserRuleCall_0_0() { return cNameWORDParserRuleCall_0_0; }
		
		//(plural ?= '*')?
		public Assignment getPluralAssignment_1() { return cPluralAssignment_1; }
		
		//'*'
		public Keyword getPluralAsteriskKeyword_1_0() { return cPluralAsteriskKeyword_1_0; }
	}
	public class ImperativeStateDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.ImperativeStateDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPostiveAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPostiveImperativeStateNameParserRuleCall_0_0 = (RuleCall)cPostiveAssignment_0.eContents().get(0);
		private final RuleCall cPREPParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSolidusKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNegativeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNegativeImperativeStateNameParserRuleCall_2_1_0 = (RuleCall)cNegativeAssignment_2_1.eContents().get(0);
		
		//ImperativeStateDef: postive = ImperativeStateName PREP? ('/' negative = ImperativeStateName)?;
		@Override public ParserRule getRule() { return rule; }
		
		//postive = ImperativeStateName PREP? ('/' negative = ImperativeStateName)?
		public Group getGroup() { return cGroup; }
		
		//postive = ImperativeStateName
		public Assignment getPostiveAssignment_0() { return cPostiveAssignment_0; }
		
		//ImperativeStateName
		public RuleCall getPostiveImperativeStateNameParserRuleCall_0_0() { return cPostiveImperativeStateNameParserRuleCall_0_0; }
		
		//PREP?
		public RuleCall getPREPParserRuleCall_1() { return cPREPParserRuleCall_1; }
		
		//('/' negative = ImperativeStateName)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'/'
		public Keyword getSolidusKeyword_2_0() { return cSolidusKeyword_2_0; }
		
		//negative = ImperativeStateName
		public Assignment getNegativeAssignment_2_1() { return cNegativeAssignment_2_1; }
		
		//ImperativeStateName
		public RuleCall getNegativeImperativeStateNameParserRuleCall_2_1_0() { return cNegativeImperativeStateNameParserRuleCall_2_1_0; }
	}
	public class ImperativeStateNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.ImperativeStateName");
		private final Assignment cImpStatNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cImpStatNameStateNameParserRuleCall_0 = (RuleCall)cImpStatNameAssignment.eContents().get(0);
		
		//ImperativeStateName: impStatName = StateName;
		@Override public ParserRule getRule() { return rule; }
		
		//impStatName = StateName
		public Assignment getImpStatNameAssignment() { return cImpStatNameAssignment; }
		
		//StateName
		public RuleCall getImpStatNameStateNameParserRuleCall_0() { return cImpStatNameStateNameParserRuleCall_0; }
	}
	public class ImperativePropertyDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.ImperativePropertyDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameWORDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cPluralAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cPluralAsteriskKeyword_1_0 = (Keyword)cPluralAssignment_1.eContents().get(0);
		
		//ImperativePropertyDef: name = WORD (plural ?= '*')?;
		@Override public ParserRule getRule() { return rule; }
		
		//name = WORD (plural ?= '*')?
		public Group getGroup() { return cGroup; }
		
		//name = WORD
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//WORD
		public RuleCall getNameWORDParserRuleCall_0_0() { return cNameWORDParserRuleCall_0_0; }
		
		//(plural ?= '*')?
		public Assignment getPluralAssignment_1() { return cPluralAssignment_1; }
		
		//'*'
		public Keyword getPluralAsteriskKeyword_1_0() { return cPluralAsteriskKeyword_1_0; }
	}
	public class ID_OR_STRINGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.ID_OR_STRING");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ID_OR_STRING: (ID | STRING);
		@Override public ParserRule getRule() { return rule; }
		
		//(ID | STRING)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
	}
	public class ImperativeScenarioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.ImperativeScenario");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhichKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cMeansKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cGivenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPreStateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPreStateImperativeScenarioStateParserRuleCall_3_0 = (RuleCall)cPreStateAssignment_3.eContents().get(0);
		private final Keyword cWhenKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cActionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cActionImperativeScenarioActionParserRuleCall_5_0 = (RuleCall)cActionAssignment_5.eContents().get(0);
		private final Keyword cThenKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cPostStateAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cPostStateImperativeScenarioStateParserRuleCall_7_0 = (RuleCall)cPostStateAssignment_7.eContents().get(0);
		
		//ImperativeScenario:
		//   'which' 'means'
		//   'Given' preState = ImperativeScenarioState
		//   'When'  action = ImperativeScenarioAction
		//   'Then'  postState = ImperativeScenarioState
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'which' 'means'
		//'Given' preState = ImperativeScenarioState
		//'When'  action = ImperativeScenarioAction
		//'Then'  postState = ImperativeScenarioState
		public Group getGroup() { return cGroup; }
		
		//'which'
		public Keyword getWhichKeyword_0() { return cWhichKeyword_0; }
		
		//'means'
		public Keyword getMeansKeyword_1() { return cMeansKeyword_1; }
		
		//'Given'
		public Keyword getGivenKeyword_2() { return cGivenKeyword_2; }
		
		//preState = ImperativeScenarioState
		public Assignment getPreStateAssignment_3() { return cPreStateAssignment_3; }
		
		//ImperativeScenarioState
		public RuleCall getPreStateImperativeScenarioStateParserRuleCall_3_0() { return cPreStateImperativeScenarioStateParserRuleCall_3_0; }
		
		//'When'
		public Keyword getWhenKeyword_4() { return cWhenKeyword_4; }
		
		//action = ImperativeScenarioAction
		public Assignment getActionAssignment_5() { return cActionAssignment_5; }
		
		//ImperativeScenarioAction
		public RuleCall getActionImperativeScenarioActionParserRuleCall_5_0() { return cActionImperativeScenarioActionParserRuleCall_5_0; }
		
		//'Then'
		public Keyword getThenKeyword_6() { return cThenKeyword_6; }
		
		//postState = ImperativeScenarioState
		public Assignment getPostStateAssignment_7() { return cPostStateAssignment_7; }
		
		//ImperativeScenarioState
		public RuleCall getPostStateImperativeScenarioStateParserRuleCall_7_0() { return cPostStateImperativeScenarioStateParserRuleCall_7_0; }
	}
	public class ScenarioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.Scenario");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScenarioKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameID_OR_STRINGParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cOutKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cOffKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Keyword cOnKeyword_2_2 = (Keyword)cAlternatives_2.eContents().get(2);
		private final Keyword cInKeyword_2_3 = (Keyword)cAlternatives_2.eContents().get(3);
		private final Keyword cHyphenMinusKeyword_2_4 = (Keyword)cAlternatives_2.eContents().get(4);
		private final Keyword cTheKeyword_2_5 = (Keyword)cAlternatives_2.eContents().get(5);
		private final Group cGroup_2_6 = (Group)cAlternatives_2.eContents().get(6);
		private final Keyword cToKeyword_2_6_0 = (Keyword)cGroup_2_6.eContents().get(0);
		private final Keyword cTheKeyword_2_6_1 = (Keyword)cGroup_2_6.eContents().get(1);
		private final Keyword cToKeyword_2_7 = (Keyword)cAlternatives_2.eContents().get(7);
		private final RuleCall cWORDParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Keyword cOffKeyword_4_0 = (Keyword)cAlternatives_4.eContents().get(0);
		private final Keyword cOnKeyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		private final Keyword cInKeyword_4_2 = (Keyword)cAlternatives_4.eContents().get(2);
		private final Keyword cHyphenMinusKeyword_4_3 = (Keyword)cAlternatives_4.eContents().get(3);
		private final Keyword cTheKeyword_4_4 = (Keyword)cAlternatives_4.eContents().get(4);
		private final RuleCall cWORDParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Keyword cOnKeyword_6_0 = (Keyword)cAlternatives_6.eContents().get(0);
		private final Keyword cInKeyword_6_1 = (Keyword)cAlternatives_6.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_6_2 = (Keyword)cAlternatives_6.eContents().get(2);
		private final Keyword cTheKeyword_6_3 = (Keyword)cAlternatives_6.eContents().get(3);
		private final RuleCall cWORDParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Alternatives cAlternatives_8 = (Alternatives)cGroup.eContents().get(8);
		private final Keyword cInKeyword_8_0 = (Keyword)cAlternatives_8.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_8_1 = (Keyword)cAlternatives_8.eContents().get(1);
		private final Keyword cTheKeyword_8_2 = (Keyword)cAlternatives_8.eContents().get(2);
		private final RuleCall cWORDParserRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		private final Alternatives cAlternatives_10 = (Alternatives)cGroup.eContents().get(10);
		private final Group cGroup_10_0 = (Group)cAlternatives_10.eContents().get(0);
		private final Alternatives cAlternatives_10_0_0 = (Alternatives)cGroup_10_0.eContents().get(0);
		private final Group cGroup_10_0_0_0 = (Group)cAlternatives_10_0_0.eContents().get(0);
		private final Keyword cGivenKeyword_10_0_0_0_0 = (Keyword)cGroup_10_0_0_0.eContents().get(0);
		private final Keyword cTheKeyword_10_0_0_0_1 = (Keyword)cGroup_10_0_0_0.eContents().get(1);
		private final Group cGroup_10_0_0_1 = (Group)cAlternatives_10_0_0.eContents().get(1);
		private final Keyword cGivenKeyword_10_0_0_1_0 = (Keyword)cGroup_10_0_0_1.eContents().get(0);
		private final Keyword cIKeyword_10_0_0_1_1 = (Keyword)cGroup_10_0_0_1.eContents().get(1);
		private final Keyword cGivenKeyword_10_0_0_2 = (Keyword)cAlternatives_10_0_0.eContents().get(2);
		private final Group cGroup_10_0_1 = (Group)cGroup_10_0.eContents().get(1);
		private final Keyword cDoKeyword_10_0_1_0 = (Keyword)cGroup_10_0_1.eContents().get(0);
		private final Keyword cNotKeyword_10_0_1_1 = (Keyword)cGroup_10_0_1.eContents().get(1);
		private final RuleCall cOPTIONParserRuleCall_10_0_2 = (RuleCall)cGroup_10_0.eContents().get(2);
		private final Group cGroup_10_1 = (Group)cAlternatives_10.eContents().get(1);
		private final Keyword cGivenKeyword_10_1_0 = (Keyword)cGroup_10_1.eContents().get(0);
		private final Alternatives cAlternatives_10_1_1 = (Alternatives)cGroup_10_1.eContents().get(1);
		private final Keyword cTheKeyword_10_1_1_0 = (Keyword)cAlternatives_10_1_1.eContents().get(0);
		private final Group cGroup_10_1_1_1 = (Group)cAlternatives_10_1_1.eContents().get(1);
		private final Keyword cAllKeyword_10_1_1_1_0 = (Keyword)cGroup_10_1_1_1.eContents().get(0);
		private final Keyword cTheKeyword_10_1_1_1_1 = (Keyword)cGroup_10_1_1_1.eContents().get(1);
		private final Keyword cIKeyword_10_1_1_2 = (Keyword)cAlternatives_10_1_1.eContents().get(2);
		private final Group cGroup_10_1_2 = (Group)cGroup_10_1.eContents().get(2);
		private final Keyword cDoKeyword_10_1_2_0 = (Keyword)cGroup_10_1_2.eContents().get(0);
		private final Keyword cNotKeyword_10_1_2_1 = (Keyword)cGroup_10_1_2.eContents().get(1);
		private final Assignment cPreStateEAssignment_10_1_3 = (Assignment)cGroup_10_1.eContents().get(3);
		private final RuleCall cPreStateEDeclarativeScenarioStateParserRuleCall_10_1_3_0 = (RuleCall)cPreStateEAssignment_10_1_3.eContents().get(0);
		private final Assignment cImperative1Assignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cImperative1ImperativeScenarioParserRuleCall_11_0 = (RuleCall)cImperative1Assignment_11.eContents().get(0);
		private final Alternatives cAlternatives_12 = (Alternatives)cGroup.eContents().get(12);
		private final Group cGroup_12_0 = (Group)cAlternatives_12.eContents().get(0);
		private final Alternatives cAlternatives_12_0_0 = (Alternatives)cGroup_12_0.eContents().get(0);
		private final Group cGroup_12_0_0_0 = (Group)cAlternatives_12_0_0.eContents().get(0);
		private final Keyword cWhenKeyword_12_0_0_0_0 = (Keyword)cGroup_12_0_0_0.eContents().get(0);
		private final Keyword cIKeyword_12_0_0_0_1 = (Keyword)cGroup_12_0_0_0.eContents().get(1);
		private final Group cGroup_12_0_0_1 = (Group)cAlternatives_12_0_0.eContents().get(1);
		private final Keyword cWhenKeyword_12_0_0_1_0 = (Keyword)cGroup_12_0_0_1.eContents().get(0);
		private final Keyword cTheKeyword_12_0_0_1_1 = (Keyword)cGroup_12_0_0_1.eContents().get(1);
		private final Keyword cWhenKeyword_12_0_0_2 = (Keyword)cAlternatives_12_0_0.eContents().get(2);
		private final Group cGroup_12_0_0_3 = (Group)cAlternatives_12_0_0.eContents().get(3);
		private final Keyword cAndKeyword_12_0_0_3_0 = (Keyword)cGroup_12_0_0_3.eContents().get(0);
		private final Keyword cIKeyword_12_0_0_3_1 = (Keyword)cGroup_12_0_0_3.eContents().get(1);
		private final Group cGroup_12_0_1 = (Group)cGroup_12_0.eContents().get(1);
		private final Keyword cDoKeyword_12_0_1_0 = (Keyword)cGroup_12_0_1.eContents().get(0);
		private final Keyword cNotKeyword_12_0_1_1 = (Keyword)cGroup_12_0_1.eContents().get(1);
		private final RuleCall cOPTIONParserRuleCall_12_0_2 = (RuleCall)cGroup_12_0.eContents().get(2);
		private final Group cGroup_12_1 = (Group)cAlternatives_12.eContents().get(1);
		private final Alternatives cAlternatives_12_1_0 = (Alternatives)cGroup_12_1.eContents().get(0);
		private final Group cGroup_12_1_0_0 = (Group)cAlternatives_12_1_0.eContents().get(0);
		private final Keyword cWhenKeyword_12_1_0_0_0 = (Keyword)cGroup_12_1_0_0.eContents().get(0);
		private final Keyword cIKeyword_12_1_0_0_1 = (Keyword)cGroup_12_1_0_0.eContents().get(1);
		private final Group cGroup_12_1_0_1 = (Group)cAlternatives_12_1_0.eContents().get(1);
		private final Keyword cWhenKeyword_12_1_0_1_0 = (Keyword)cGroup_12_1_0_1.eContents().get(0);
		private final Keyword cIKeyword_12_1_0_1_1 = (Keyword)cGroup_12_1_0_1.eContents().get(1);
		private final Keyword cDoKeyword_12_1_0_1_2 = (Keyword)cGroup_12_1_0_1.eContents().get(2);
		private final Keyword cNotKeyword_12_1_0_1_3 = (Keyword)cGroup_12_1_0_1.eContents().get(3);
		private final Group cGroup_12_1_0_2 = (Group)cAlternatives_12_1_0.eContents().get(2);
		private final Keyword cWhenKeyword_12_1_0_2_0 = (Keyword)cGroup_12_1_0_2.eContents().get(0);
		private final Keyword cTheKeyword_12_1_0_2_1 = (Keyword)cGroup_12_1_0_2.eContents().get(1);
		private final Group cGroup_12_1_0_3 = (Group)cAlternatives_12_1_0.eContents().get(3);
		private final Keyword cGivenKeyword_12_1_0_3_0 = (Keyword)cGroup_12_1_0_3.eContents().get(0);
		private final Keyword cIKeyword_12_1_0_3_1 = (Keyword)cGroup_12_1_0_3.eContents().get(1);
		private final Keyword cWhenKeyword_12_1_0_4 = (Keyword)cAlternatives_12_1_0.eContents().get(4);
		private final Assignment cActionEAssignment_12_1_1 = (Assignment)cGroup_12_1.eContents().get(1);
		private final RuleCall cActionEDeclarativeScenarioActionParserRuleCall_12_1_1_0 = (RuleCall)cActionEAssignment_12_1_1.eContents().get(0);
		private final Assignment cImperative2Assignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cImperative2ImperativeScenarioParserRuleCall_13_0 = (RuleCall)cImperative2Assignment_13.eContents().get(0);
		private final Alternatives cAlternatives_14 = (Alternatives)cGroup.eContents().get(14);
		private final Group cGroup_14_0 = (Group)cAlternatives_14.eContents().get(0);
		private final Alternatives cAlternatives_14_0_0 = (Alternatives)cGroup_14_0.eContents().get(0);
		private final Group cGroup_14_0_0_0 = (Group)cAlternatives_14_0_0.eContents().get(0);
		private final Keyword cThenKeyword_14_0_0_0_0 = (Keyword)cGroup_14_0_0_0.eContents().get(0);
		private final Keyword cTheKeyword_14_0_0_0_1 = (Keyword)cGroup_14_0_0_0.eContents().get(1);
		private final Group cGroup_14_0_0_1 = (Group)cAlternatives_14_0_0.eContents().get(1);
		private final Keyword cThenKeyword_14_0_0_1_0 = (Keyword)cGroup_14_0_0_1.eContents().get(0);
		private final Keyword cIKeyword_14_0_0_1_1 = (Keyword)cGroup_14_0_0_1.eContents().get(1);
		private final Keyword cThenKeyword_14_0_0_2 = (Keyword)cAlternatives_14_0_0.eContents().get(2);
		private final Group cGroup_14_0_1 = (Group)cGroup_14_0.eContents().get(1);
		private final Keyword cDoKeyword_14_0_1_0 = (Keyword)cGroup_14_0_1.eContents().get(0);
		private final Keyword cNotKeyword_14_0_1_1 = (Keyword)cGroup_14_0_1.eContents().get(1);
		private final RuleCall cOPTIONParserRuleCall_14_0_2 = (RuleCall)cGroup_14_0.eContents().get(2);
		private final Group cGroup_14_1 = (Group)cAlternatives_14.eContents().get(1);
		private final Keyword cThenKeyword_14_1_0 = (Keyword)cGroup_14_1.eContents().get(0);
		private final Alternatives cAlternatives_14_1_1 = (Alternatives)cGroup_14_1.eContents().get(1);
		private final Keyword cTheKeyword_14_1_1_0 = (Keyword)cAlternatives_14_1_1.eContents().get(0);
		private final Group cGroup_14_1_1_1 = (Group)cAlternatives_14_1_1.eContents().get(1);
		private final Keyword cAllKeyword_14_1_1_1_0 = (Keyword)cGroup_14_1_1_1.eContents().get(0);
		private final Keyword cTheKeyword_14_1_1_1_1 = (Keyword)cGroup_14_1_1_1.eContents().get(1);
		private final Keyword cIKeyword_14_1_1_2 = (Keyword)cAlternatives_14_1_1.eContents().get(2);
		private final Group cGroup_14_1_2 = (Group)cGroup_14_1.eContents().get(2);
		private final Keyword cDoKeyword_14_1_2_0 = (Keyword)cGroup_14_1_2.eContents().get(0);
		private final Keyword cNotKeyword_14_1_2_1 = (Keyword)cGroup_14_1_2.eContents().get(1);
		private final Assignment cPreStateE1Assignment_14_1_3 = (Assignment)cGroup_14_1.eContents().get(3);
		private final RuleCall cPreStateE1DeclarativeScenarioStateParserRuleCall_14_1_3_0 = (RuleCall)cPreStateE1Assignment_14_1_3.eContents().get(0);
		private final Assignment cImperative3Assignment_15 = (Assignment)cGroup.eContents().get(15);
		private final RuleCall cImperative3ImperativeScenarioParserRuleCall_15_0 = (RuleCall)cImperative3Assignment_15.eContents().get(0);
		
		//Scenario:
		//       'Scenario:' name = ID_OR_STRING ('out'|'off'|'on'|'in'|'-'|'the'|'to' 'the'|'to')? WORD? ('off'|'on'|'in'|'-'|'the')? WORD? ('on'|'in'|'-'|'the')? WORD? ('in'|'-'|'the')? WORD?
		//       (('Given''the'|'Given''I'|'Given') ('do' 'not')? ((OPTION)) | ('Given' ('the'|'all' 'the'|'I')? ('do' 'not')? preStateE = DeclarativeScenarioState))
		//       imperative1 = ImperativeScenario?
		//       //'Given' preState = ImperativeScenarioState
		//       //'When' action = ImperativeScenarioAction
		//       //'Then' postState = ImperativeScenarioState
		//       ((('When' 'I'|'When' 'the'|'When'|'And''I') ('do' 'not')? ((OPTION))) | ((('When' 'I') |('When' 'I' 'do' 'not')| ('When' 'the') | ('Given' 'I') | ('When')) actionE = DeclarativeScenarioAction ))
		//       imperative2 = ImperativeScenario?
		//       //'Given' preState1 = ImperativeScenarioState
		//       //'When' action1 = ImperativeScenarioAction
		//       //'Then' postState1 = ImperativeScenarioState
		//       (('Then''the'|'Then''I'|'Then') ('do' 'not')? ((OPTION)) | ('Then' ('the'|'all' 'the'|'I')? ('do' 'not')? preStateE1 = DeclarativeScenarioState))
		//       imperative3 = ImperativeScenario?
		//       //'Given' preState2 = ImperativeScenarioState
		//       //'When' action2 = ImperativeScenarioAction
		//       //'Then' postState2 = ImperativeScenarioState
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Scenario:' name = ID_OR_STRING ('out'|'off'|'on'|'in'|'-'|'the'|'to' 'the'|'to')? WORD? ('off'|'on'|'in'|'-'|'the')? WORD? ('on'|'in'|'-'|'the')? WORD? ('in'|'-'|'the')? WORD?
		//(('Given''the'|'Given''I'|'Given') ('do' 'not')? ((OPTION)) | ('Given' ('the'|'all' 'the'|'I')? ('do' 'not')? preStateE = DeclarativeScenarioState))
		//imperative1 = ImperativeScenario?
		////'Given' preState = ImperativeScenarioState
		////'When' action = ImperativeScenarioAction
		////'Then' postState = ImperativeScenarioState
		//((('When' 'I'|'When' 'the'|'When'|'And''I') ('do' 'not')? ((OPTION))) | ((('When' 'I') |('When' 'I' 'do' 'not')| ('When' 'the') | ('Given' 'I') | ('When')) actionE = DeclarativeScenarioAction ))
		//imperative2 = ImperativeScenario?
		////'Given' preState1 = ImperativeScenarioState
		////'When' action1 = ImperativeScenarioAction
		////'Then' postState1 = ImperativeScenarioState
		//(('Then''the'|'Then''I'|'Then') ('do' 'not')? ((OPTION)) | ('Then' ('the'|'all' 'the'|'I')? ('do' 'not')? preStateE1 = DeclarativeScenarioState))
		//imperative3 = ImperativeScenario?
		public Group getGroup() { return cGroup; }
		
		//'Scenario:'
		public Keyword getScenarioKeyword_0() { return cScenarioKeyword_0; }
		
		//name = ID_OR_STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID_OR_STRING
		public RuleCall getNameID_OR_STRINGParserRuleCall_1_0() { return cNameID_OR_STRINGParserRuleCall_1_0; }
		
		//('out'|'off'|'on'|'in'|'-'|'the'|'to' 'the'|'to')?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'out'
		public Keyword getOutKeyword_2_0() { return cOutKeyword_2_0; }
		
		//'off'
		public Keyword getOffKeyword_2_1() { return cOffKeyword_2_1; }
		
		//'on'
		public Keyword getOnKeyword_2_2() { return cOnKeyword_2_2; }
		
		//'in'
		public Keyword getInKeyword_2_3() { return cInKeyword_2_3; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_2_4() { return cHyphenMinusKeyword_2_4; }
		
		//'the'
		public Keyword getTheKeyword_2_5() { return cTheKeyword_2_5; }
		
		//'to' 'the'
		public Group getGroup_2_6() { return cGroup_2_6; }
		
		//'to'
		public Keyword getToKeyword_2_6_0() { return cToKeyword_2_6_0; }
		
		//'the'
		public Keyword getTheKeyword_2_6_1() { return cTheKeyword_2_6_1; }
		
		//'to'
		public Keyword getToKeyword_2_7() { return cToKeyword_2_7; }
		
		//WORD?
		public RuleCall getWORDParserRuleCall_3() { return cWORDParserRuleCall_3; }
		
		//('off'|'on'|'in'|'-'|'the')?
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//'off'
		public Keyword getOffKeyword_4_0() { return cOffKeyword_4_0; }
		
		//'on'
		public Keyword getOnKeyword_4_1() { return cOnKeyword_4_1; }
		
		//'in'
		public Keyword getInKeyword_4_2() { return cInKeyword_4_2; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_4_3() { return cHyphenMinusKeyword_4_3; }
		
		//'the'
		public Keyword getTheKeyword_4_4() { return cTheKeyword_4_4; }
		
		//WORD?
		public RuleCall getWORDParserRuleCall_5() { return cWORDParserRuleCall_5; }
		
		//('on'|'in'|'-'|'the')?
		public Alternatives getAlternatives_6() { return cAlternatives_6; }
		
		//'on'
		public Keyword getOnKeyword_6_0() { return cOnKeyword_6_0; }
		
		//'in'
		public Keyword getInKeyword_6_1() { return cInKeyword_6_1; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_6_2() { return cHyphenMinusKeyword_6_2; }
		
		//'the'
		public Keyword getTheKeyword_6_3() { return cTheKeyword_6_3; }
		
		//WORD?
		public RuleCall getWORDParserRuleCall_7() { return cWORDParserRuleCall_7; }
		
		//('in'|'-'|'the')?
		public Alternatives getAlternatives_8() { return cAlternatives_8; }
		
		//'in'
		public Keyword getInKeyword_8_0() { return cInKeyword_8_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_8_1() { return cHyphenMinusKeyword_8_1; }
		
		//'the'
		public Keyword getTheKeyword_8_2() { return cTheKeyword_8_2; }
		
		//WORD?
		public RuleCall getWORDParserRuleCall_9() { return cWORDParserRuleCall_9; }
		
		//(('Given''the'|'Given''I'|'Given') ('do' 'not')? ((OPTION)) | ('Given' ('the'|'all' 'the'|'I')? ('do' 'not')? preStateE = DeclarativeScenarioState))
		public Alternatives getAlternatives_10() { return cAlternatives_10; }
		
		//('Given''the'|'Given''I'|'Given') ('do' 'not')? ((OPTION))
		public Group getGroup_10_0() { return cGroup_10_0; }
		
		//('Given''the'|'Given''I'|'Given')
		public Alternatives getAlternatives_10_0_0() { return cAlternatives_10_0_0; }
		
		//'Given''the'
		public Group getGroup_10_0_0_0() { return cGroup_10_0_0_0; }
		
		//'Given'
		public Keyword getGivenKeyword_10_0_0_0_0() { return cGivenKeyword_10_0_0_0_0; }
		
		//'the'
		public Keyword getTheKeyword_10_0_0_0_1() { return cTheKeyword_10_0_0_0_1; }
		
		//'Given''I'
		public Group getGroup_10_0_0_1() { return cGroup_10_0_0_1; }
		
		//'Given'
		public Keyword getGivenKeyword_10_0_0_1_0() { return cGivenKeyword_10_0_0_1_0; }
		
		//'I'
		public Keyword getIKeyword_10_0_0_1_1() { return cIKeyword_10_0_0_1_1; }
		
		//'Given'
		public Keyword getGivenKeyword_10_0_0_2() { return cGivenKeyword_10_0_0_2; }
		
		//('do' 'not')?
		public Group getGroup_10_0_1() { return cGroup_10_0_1; }
		
		//'do'
		public Keyword getDoKeyword_10_0_1_0() { return cDoKeyword_10_0_1_0; }
		
		//'not'
		public Keyword getNotKeyword_10_0_1_1() { return cNotKeyword_10_0_1_1; }
		
		//((OPTION))
		public RuleCall getOPTIONParserRuleCall_10_0_2() { return cOPTIONParserRuleCall_10_0_2; }
		
		//('Given' ('the'|'all' 'the'|'I')? ('do' 'not')? preStateE = DeclarativeScenarioState)
		public Group getGroup_10_1() { return cGroup_10_1; }
		
		//'Given'
		public Keyword getGivenKeyword_10_1_0() { return cGivenKeyword_10_1_0; }
		
		//('the'|'all' 'the'|'I')?
		public Alternatives getAlternatives_10_1_1() { return cAlternatives_10_1_1; }
		
		//'the'
		public Keyword getTheKeyword_10_1_1_0() { return cTheKeyword_10_1_1_0; }
		
		//'all' 'the'
		public Group getGroup_10_1_1_1() { return cGroup_10_1_1_1; }
		
		//'all'
		public Keyword getAllKeyword_10_1_1_1_0() { return cAllKeyword_10_1_1_1_0; }
		
		//'the'
		public Keyword getTheKeyword_10_1_1_1_1() { return cTheKeyword_10_1_1_1_1; }
		
		//'I'
		public Keyword getIKeyword_10_1_1_2() { return cIKeyword_10_1_1_2; }
		
		//('do' 'not')?
		public Group getGroup_10_1_2() { return cGroup_10_1_2; }
		
		//'do'
		public Keyword getDoKeyword_10_1_2_0() { return cDoKeyword_10_1_2_0; }
		
		//'not'
		public Keyword getNotKeyword_10_1_2_1() { return cNotKeyword_10_1_2_1; }
		
		//preStateE = DeclarativeScenarioState
		public Assignment getPreStateEAssignment_10_1_3() { return cPreStateEAssignment_10_1_3; }
		
		//DeclarativeScenarioState
		public RuleCall getPreStateEDeclarativeScenarioStateParserRuleCall_10_1_3_0() { return cPreStateEDeclarativeScenarioStateParserRuleCall_10_1_3_0; }
		
		//imperative1 = ImperativeScenario?
		public Assignment getImperative1Assignment_11() { return cImperative1Assignment_11; }
		
		//ImperativeScenario
		public RuleCall getImperative1ImperativeScenarioParserRuleCall_11_0() { return cImperative1ImperativeScenarioParserRuleCall_11_0; }
		
		////'Given' preState = ImperativeScenarioState
		////'When' action = ImperativeScenarioAction
		////'Then' postState = ImperativeScenarioState
		//((('When' 'I'|'When' 'the'|'When'|'And''I') ('do' 'not')? ((OPTION))) | ((('When' 'I') |('When' 'I' 'do' 'not')| ('When' 'the') | ('Given' 'I') | ('When')) actionE = DeclarativeScenarioAction ))
		public Alternatives getAlternatives_12() { return cAlternatives_12; }
		
		//(('When' 'I'|'When' 'the'|'When'|'And''I') ('do' 'not')? ((OPTION)))
		public Group getGroup_12_0() { return cGroup_12_0; }
		
		//('When' 'I'|'When' 'the'|'When'|'And''I')
		public Alternatives getAlternatives_12_0_0() { return cAlternatives_12_0_0; }
		
		//'When' 'I'
		public Group getGroup_12_0_0_0() { return cGroup_12_0_0_0; }
		
		//'When'
		public Keyword getWhenKeyword_12_0_0_0_0() { return cWhenKeyword_12_0_0_0_0; }
		
		//'I'
		public Keyword getIKeyword_12_0_0_0_1() { return cIKeyword_12_0_0_0_1; }
		
		//'When' 'the'
		public Group getGroup_12_0_0_1() { return cGroup_12_0_0_1; }
		
		//'When'
		public Keyword getWhenKeyword_12_0_0_1_0() { return cWhenKeyword_12_0_0_1_0; }
		
		//'the'
		public Keyword getTheKeyword_12_0_0_1_1() { return cTheKeyword_12_0_0_1_1; }
		
		//'When'
		public Keyword getWhenKeyword_12_0_0_2() { return cWhenKeyword_12_0_0_2; }
		
		//'And''I'
		public Group getGroup_12_0_0_3() { return cGroup_12_0_0_3; }
		
		//'And'
		public Keyword getAndKeyword_12_0_0_3_0() { return cAndKeyword_12_0_0_3_0; }
		
		//'I'
		public Keyword getIKeyword_12_0_0_3_1() { return cIKeyword_12_0_0_3_1; }
		
		//('do' 'not')?
		public Group getGroup_12_0_1() { return cGroup_12_0_1; }
		
		//'do'
		public Keyword getDoKeyword_12_0_1_0() { return cDoKeyword_12_0_1_0; }
		
		//'not'
		public Keyword getNotKeyword_12_0_1_1() { return cNotKeyword_12_0_1_1; }
		
		//((OPTION))
		public RuleCall getOPTIONParserRuleCall_12_0_2() { return cOPTIONParserRuleCall_12_0_2; }
		
		//((('When' 'I') |('When' 'I' 'do' 'not')| ('When' 'the') | ('Given' 'I') | ('When')) actionE = DeclarativeScenarioAction )
		public Group getGroup_12_1() { return cGroup_12_1; }
		
		//(('When' 'I') |('When' 'I' 'do' 'not')| ('When' 'the') | ('Given' 'I') | ('When'))
		public Alternatives getAlternatives_12_1_0() { return cAlternatives_12_1_0; }
		
		//('When' 'I')
		public Group getGroup_12_1_0_0() { return cGroup_12_1_0_0; }
		
		//'When'
		public Keyword getWhenKeyword_12_1_0_0_0() { return cWhenKeyword_12_1_0_0_0; }
		
		//'I'
		public Keyword getIKeyword_12_1_0_0_1() { return cIKeyword_12_1_0_0_1; }
		
		//('When' 'I' 'do' 'not')
		public Group getGroup_12_1_0_1() { return cGroup_12_1_0_1; }
		
		//'When'
		public Keyword getWhenKeyword_12_1_0_1_0() { return cWhenKeyword_12_1_0_1_0; }
		
		//'I'
		public Keyword getIKeyword_12_1_0_1_1() { return cIKeyword_12_1_0_1_1; }
		
		//'do'
		public Keyword getDoKeyword_12_1_0_1_2() { return cDoKeyword_12_1_0_1_2; }
		
		//'not'
		public Keyword getNotKeyword_12_1_0_1_3() { return cNotKeyword_12_1_0_1_3; }
		
		//('When' 'the')
		public Group getGroup_12_1_0_2() { return cGroup_12_1_0_2; }
		
		//'When'
		public Keyword getWhenKeyword_12_1_0_2_0() { return cWhenKeyword_12_1_0_2_0; }
		
		//'the'
		public Keyword getTheKeyword_12_1_0_2_1() { return cTheKeyword_12_1_0_2_1; }
		
		//('Given' 'I')
		public Group getGroup_12_1_0_3() { return cGroup_12_1_0_3; }
		
		//'Given'
		public Keyword getGivenKeyword_12_1_0_3_0() { return cGivenKeyword_12_1_0_3_0; }
		
		//'I'
		public Keyword getIKeyword_12_1_0_3_1() { return cIKeyword_12_1_0_3_1; }
		
		//('When')
		public Keyword getWhenKeyword_12_1_0_4() { return cWhenKeyword_12_1_0_4; }
		
		//actionE = DeclarativeScenarioAction
		public Assignment getActionEAssignment_12_1_1() { return cActionEAssignment_12_1_1; }
		
		//DeclarativeScenarioAction
		public RuleCall getActionEDeclarativeScenarioActionParserRuleCall_12_1_1_0() { return cActionEDeclarativeScenarioActionParserRuleCall_12_1_1_0; }
		
		//imperative2 = ImperativeScenario?
		public Assignment getImperative2Assignment_13() { return cImperative2Assignment_13; }
		
		//ImperativeScenario
		public RuleCall getImperative2ImperativeScenarioParserRuleCall_13_0() { return cImperative2ImperativeScenarioParserRuleCall_13_0; }
		
		////'Given' preState1 = ImperativeScenarioState
		////'When' action1 = ImperativeScenarioAction
		////'Then' postState1 = ImperativeScenarioState
		//(('Then''the'|'Then''I'|'Then') ('do' 'not')? ((OPTION)) | ('Then' ('the'|'all' 'the'|'I')? ('do' 'not')? preStateE1 = DeclarativeScenarioState))
		public Alternatives getAlternatives_14() { return cAlternatives_14; }
		
		//('Then''the'|'Then''I'|'Then') ('do' 'not')? ((OPTION))
		public Group getGroup_14_0() { return cGroup_14_0; }
		
		//('Then''the'|'Then''I'|'Then')
		public Alternatives getAlternatives_14_0_0() { return cAlternatives_14_0_0; }
		
		//'Then''the'
		public Group getGroup_14_0_0_0() { return cGroup_14_0_0_0; }
		
		//'Then'
		public Keyword getThenKeyword_14_0_0_0_0() { return cThenKeyword_14_0_0_0_0; }
		
		//'the'
		public Keyword getTheKeyword_14_0_0_0_1() { return cTheKeyword_14_0_0_0_1; }
		
		//'Then''I'
		public Group getGroup_14_0_0_1() { return cGroup_14_0_0_1; }
		
		//'Then'
		public Keyword getThenKeyword_14_0_0_1_0() { return cThenKeyword_14_0_0_1_0; }
		
		//'I'
		public Keyword getIKeyword_14_0_0_1_1() { return cIKeyword_14_0_0_1_1; }
		
		//'Then'
		public Keyword getThenKeyword_14_0_0_2() { return cThenKeyword_14_0_0_2; }
		
		//('do' 'not')?
		public Group getGroup_14_0_1() { return cGroup_14_0_1; }
		
		//'do'
		public Keyword getDoKeyword_14_0_1_0() { return cDoKeyword_14_0_1_0; }
		
		//'not'
		public Keyword getNotKeyword_14_0_1_1() { return cNotKeyword_14_0_1_1; }
		
		//((OPTION))
		public RuleCall getOPTIONParserRuleCall_14_0_2() { return cOPTIONParserRuleCall_14_0_2; }
		
		//('Then' ('the'|'all' 'the'|'I')? ('do' 'not')? preStateE1 = DeclarativeScenarioState)
		public Group getGroup_14_1() { return cGroup_14_1; }
		
		//'Then'
		public Keyword getThenKeyword_14_1_0() { return cThenKeyword_14_1_0; }
		
		//('the'|'all' 'the'|'I')?
		public Alternatives getAlternatives_14_1_1() { return cAlternatives_14_1_1; }
		
		//'the'
		public Keyword getTheKeyword_14_1_1_0() { return cTheKeyword_14_1_1_0; }
		
		//'all' 'the'
		public Group getGroup_14_1_1_1() { return cGroup_14_1_1_1; }
		
		//'all'
		public Keyword getAllKeyword_14_1_1_1_0() { return cAllKeyword_14_1_1_1_0; }
		
		//'the'
		public Keyword getTheKeyword_14_1_1_1_1() { return cTheKeyword_14_1_1_1_1; }
		
		//'I'
		public Keyword getIKeyword_14_1_1_2() { return cIKeyword_14_1_1_2; }
		
		//('do' 'not')?
		public Group getGroup_14_1_2() { return cGroup_14_1_2; }
		
		//'do'
		public Keyword getDoKeyword_14_1_2_0() { return cDoKeyword_14_1_2_0; }
		
		//'not'
		public Keyword getNotKeyword_14_1_2_1() { return cNotKeyword_14_1_2_1; }
		
		//preStateE1 = DeclarativeScenarioState
		public Assignment getPreStateE1Assignment_14_1_3() { return cPreStateE1Assignment_14_1_3; }
		
		//DeclarativeScenarioState
		public RuleCall getPreStateE1DeclarativeScenarioStateParserRuleCall_14_1_3_0() { return cPreStateE1DeclarativeScenarioStateParserRuleCall_14_1_3_0; }
		
		//imperative3 = ImperativeScenario?
		public Assignment getImperative3Assignment_15() { return cImperative3Assignment_15; }
		
		//ImperativeScenario
		public RuleCall getImperative3ImperativeScenarioParserRuleCall_15_0() { return cImperative3ImperativeScenarioParserRuleCall_15_0; }
	}
	public class DeclarativeScenarioStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.DeclarativeScenarioState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStatesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStatesDeclarativeStatePhraseParserRuleCall_0_0 = (RuleCall)cStatesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAndKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cStatesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStatesDeclarativeStatePhraseParserRuleCall_1_1_0 = (RuleCall)cStatesAssignment_1_1.eContents().get(0);
		
		//DeclarativeScenarioState:
		//    //I commented the following and uncommented the following sentence
		//    //states = DeclarativeStatePhrase
		//    states +=DeclarativeStatePhrase('And' states += DeclarativeStatePhrase)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////I commented the following and uncommented the following sentence
		////states = DeclarativeStatePhrase
		//states +=DeclarativeStatePhrase('And' states += DeclarativeStatePhrase)*
		public Group getGroup() { return cGroup; }
		
		////I commented the following and uncommented the following sentence
		////states = DeclarativeStatePhrase
		//states +=DeclarativeStatePhrase
		public Assignment getStatesAssignment_0() { return cStatesAssignment_0; }
		
		//DeclarativeStatePhrase
		public RuleCall getStatesDeclarativeStatePhraseParserRuleCall_0_0() { return cStatesDeclarativeStatePhraseParserRuleCall_0_0; }
		
		//('And' states += DeclarativeStatePhrase)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'And'
		public Keyword getAndKeyword_1_0() { return cAndKeyword_1_0; }
		
		//states += DeclarativeStatePhrase
		public Assignment getStatesAssignment_1_1() { return cStatesAssignment_1_1; }
		
		//DeclarativeStatePhrase
		public RuleCall getStatesDeclarativeStatePhraseParserRuleCall_1_1_0() { return cStatesDeclarativeStatePhraseParserRuleCall_1_1_0; }
	}
	public class ImperativeScenarioStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.ImperativeScenarioState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStatesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStatesImperativeStatePhraseParserRuleCall_0_0 = (RuleCall)cStatesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAndKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cStatesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStatesImperativeStatePhraseParserRuleCall_1_1_0 = (RuleCall)cStatesAssignment_1_1.eContents().get(0);
		
		//ImperativeScenarioState:
		//    states += ImperativeStatePhrase ('And' states += ImperativeStatePhrase)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//states += ImperativeStatePhrase ('And' states += ImperativeStatePhrase)*
		public Group getGroup() { return cGroup; }
		
		//states += ImperativeStatePhrase
		public Assignment getStatesAssignment_0() { return cStatesAssignment_0; }
		
		//ImperativeStatePhrase
		public RuleCall getStatesImperativeStatePhraseParserRuleCall_0_0() { return cStatesImperativeStatePhraseParserRuleCall_0_0; }
		
		//('And' states += ImperativeStatePhrase)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'And'
		public Keyword getAndKeyword_1_0() { return cAndKeyword_1_0; }
		
		//states += ImperativeStatePhrase
		public Assignment getStatesAssignment_1_1() { return cStatesAssignment_1_1; }
		
		//ImperativeStatePhrase
		public RuleCall getStatesImperativeStatePhraseParserRuleCall_1_1_0() { return cStatesImperativeStatePhraseParserRuleCall_1_1_0; }
	}
	public class DeclarativeScenarioActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.DeclarativeScenarioAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cActionsDeclarativeActionPhraseParserRuleCall_0_0 = (RuleCall)cActionsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAndKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cActionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cActionsDeclarativeActionPhraseParserRuleCall_1_1_0 = (RuleCall)cActionsAssignment_1_1.eContents().get(0);
		
		//DeclarativeScenarioAction:
		//    //actions = DeclarativeActionPhrase
		//    actions += DeclarativeActionPhrase ('And' actions += DeclarativeActionPhrase)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////actions = DeclarativeActionPhrase
		//actions += DeclarativeActionPhrase ('And' actions += DeclarativeActionPhrase)*
		public Group getGroup() { return cGroup; }
		
		////actions = DeclarativeActionPhrase
		//actions += DeclarativeActionPhrase
		public Assignment getActionsAssignment_0() { return cActionsAssignment_0; }
		
		//DeclarativeActionPhrase
		public RuleCall getActionsDeclarativeActionPhraseParserRuleCall_0_0() { return cActionsDeclarativeActionPhraseParserRuleCall_0_0; }
		
		//('And' actions += DeclarativeActionPhrase)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'And'
		public Keyword getAndKeyword_1_0() { return cAndKeyword_1_0; }
		
		//actions += DeclarativeActionPhrase
		public Assignment getActionsAssignment_1_1() { return cActionsAssignment_1_1; }
		
		//DeclarativeActionPhrase
		public RuleCall getActionsDeclarativeActionPhraseParserRuleCall_1_1_0() { return cActionsDeclarativeActionPhraseParserRuleCall_1_1_0; }
	}
	public class ImperativeScenarioActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.ImperativeScenarioAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cActionsImperativeActionPhraseParserRuleCall_0_0 = (RuleCall)cActionsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAndKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cActionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cActionsImperativeActionPhraseParserRuleCall_1_1_0 = (RuleCall)cActionsAssignment_1_1.eContents().get(0);
		
		//ImperativeScenarioAction:
		//    actions += ImperativeActionPhrase ('And' actions += ImperativeActionPhrase)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//actions += ImperativeActionPhrase ('And' actions += ImperativeActionPhrase)*
		public Group getGroup() { return cGroup; }
		
		//actions += ImperativeActionPhrase
		public Assignment getActionsAssignment_0() { return cActionsAssignment_0; }
		
		//ImperativeActionPhrase
		public RuleCall getActionsImperativeActionPhraseParserRuleCall_0_0() { return cActionsImperativeActionPhraseParserRuleCall_0_0; }
		
		//('And' actions += ImperativeActionPhrase)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'And'
		public Keyword getAndKeyword_1_0() { return cAndKeyword_1_0; }
		
		//actions += ImperativeActionPhrase
		public Assignment getActionsAssignment_1_1() { return cActionsAssignment_1_1; }
		
		//ImperativeActionPhrase
		public RuleCall getActionsImperativeActionPhraseParserRuleCall_1_1_0() { return cActionsImperativeActionPhraseParserRuleCall_1_1_0; }
	}
	public class DeclarativeStatePhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.DeclarativeStatePhrase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDeclarativeEntityPropertyStatePhraseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Assignment cEspAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cEspDeclarativeEntityStatePhraseParserRuleCall_1_0 = (RuleCall)cEspAssignment_1.eContents().get(0);
		
		//DeclarativeStatePhrase:
		//    DeclarativeEntityPropertyStatePhrase | esp = DeclarativeEntityStatePhrase
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//DeclarativeEntityPropertyStatePhrase | esp = DeclarativeEntityStatePhrase
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DeclarativeEntityPropertyStatePhrase
		public RuleCall getDeclarativeEntityPropertyStatePhraseParserRuleCall_0() { return cDeclarativeEntityPropertyStatePhraseParserRuleCall_0; }
		
		//esp = DeclarativeEntityStatePhrase
		public Assignment getEspAssignment_1() { return cEspAssignment_1; }
		
		//DeclarativeEntityStatePhrase
		public RuleCall getEspDeclarativeEntityStatePhraseParserRuleCall_1_0() { return cEspDeclarativeEntityStatePhraseParserRuleCall_1_0; }
	}
	public class ImperativeStatePhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.ImperativeStatePhrase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cEpspAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cEpspImperativeEntityPropertyStatePhraseParserRuleCall_0_0 = (RuleCall)cEpspAssignment_0.eContents().get(0);
		private final Assignment cEspAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cEspImperativeEntityStatePhraseParserRuleCall_1_0 = (RuleCall)cEspAssignment_1.eContents().get(0);
		
		//ImperativeStatePhrase:
		//    epsp = ImperativeEntityPropertyStatePhrase | esp = ImperativeEntityStatePhrase
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//epsp = ImperativeEntityPropertyStatePhrase | esp = ImperativeEntityStatePhrase
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//epsp = ImperativeEntityPropertyStatePhrase
		public Assignment getEpspAssignment_0() { return cEpspAssignment_0; }
		
		//ImperativeEntityPropertyStatePhrase
		public RuleCall getEpspImperativeEntityPropertyStatePhraseParserRuleCall_0_0() { return cEpspImperativeEntityPropertyStatePhraseParserRuleCall_0_0; }
		
		//esp = ImperativeEntityStatePhrase
		public Assignment getEspAssignment_1() { return cEspAssignment_1; }
		
		//ImperativeEntityStatePhrase
		public RuleCall getEspImperativeEntityStatePhraseParserRuleCall_1_0() { return cEspImperativeEntityStatePhraseParserRuleCall_1_0; }
	}
	public class ENTITY_IDENTITYElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.ENTITY_IDENTITY");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cNumberSignKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ENTITY_IDENTITY: ('#'INT) | STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//('#'INT) | STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//('#'INT)
		public Group getGroup_0() { return cGroup_0; }
		
		//'#'
		public Keyword getNumberSignKeyword_0_0() { return cNumberSignKeyword_0_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0_1() { return cINTTerminalRuleCall_0_1; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
	}
	public class OPTIONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.OPTION");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//OPTION:'#'? (INT | STRING) ;
		@Override public ParserRule getRule() { return rule; }
		
		//'#'? (INT | STRING)
		public Group getGroup() { return cGroup; }
		
		//'#'?
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }
		
		//(INT | STRING)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_0() { return cINTTerminalRuleCall_1_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1_1() { return cSTRINGTerminalRuleCall_1_1; }
	}
	public class DeclarativeEntityRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.DeclarativeEntityRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final RuleCall cWORDParserRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final RuleCall cOPTIONParserRuleCall_0_0_1 = (RuleCall)cGroup_0_0.eContents().get(1);
		private final Keyword cForKeyword_0_0_2 = (Keyword)cGroup_0_0.eContents().get(2);
		private final Keyword cTheKeyword_0_0_3 = (Keyword)cGroup_0_0.eContents().get(3);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Keyword cForKeyword_0_1_0 = (Keyword)cAlternatives_0_1.eContents().get(0);
		private final Keyword cOfKeyword_0_1_1 = (Keyword)cAlternatives_0_1.eContents().get(1);
		private final Keyword cToKeyword_0_1_2 = (Keyword)cAlternatives_0_1.eContents().get(2);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Alternatives cAlternatives_0_2_0 = (Alternatives)cGroup_0_2.eContents().get(0);
		private final Keyword cTheKeyword_0_2_0_0 = (Keyword)cAlternatives_0_2_0.eContents().get(0);
		private final Group cGroup_0_2_0_1 = (Group)cAlternatives_0_2_0.eContents().get(1);
		private final Keyword cAllKeyword_0_2_0_1_0 = (Keyword)cGroup_0_2_0_1.eContents().get(0);
		private final Keyword cTheKeyword_0_2_0_1_1 = (Keyword)cGroup_0_2_0_1.eContents().get(1);
		private final Assignment cEntityAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final CrossReference cEntityDeclarativeEntityDefCrossReference_0_2_1_0 = (CrossReference)cEntityAssignment_0_2_1.eContents().get(0);
		private final RuleCall cEntityDeclarativeEntityDefWORDParserRuleCall_0_2_1_0_1 = (RuleCall)cEntityDeclarativeEntityDefCrossReference_0_2_1_0.eContents().get(1);
		private final Assignment cNameAssignment_0_2_2 = (Assignment)cGroup_0_2.eContents().get(2);
		private final RuleCall cNameENTITY_IDENTITYParserRuleCall_0_2_2_0 = (RuleCall)cNameAssignment_0_2_2.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNameENTITY_IDENTITYParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//DeclarativeEntityRef:
		//    (WORD OPTION 'for' 'the')? ('for'|'of'|'to')? (('the'|'all' 'the') entity = [DeclarativeEntityDef | WORD] name = ENTITY_IDENTITY) | (name = ENTITY_IDENTITY)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(WORD OPTION 'for' 'the')? ('for'|'of'|'to')? (('the'|'all' 'the') entity = [DeclarativeEntityDef | WORD] name = ENTITY_IDENTITY) | (name = ENTITY_IDENTITY)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(WORD OPTION 'for' 'the')? ('for'|'of'|'to')? (('the'|'all' 'the') entity = [DeclarativeEntityDef | WORD] name = ENTITY_IDENTITY)
		public Group getGroup_0() { return cGroup_0; }
		
		//(WORD OPTION 'for' 'the')?
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//WORD
		public RuleCall getWORDParserRuleCall_0_0_0() { return cWORDParserRuleCall_0_0_0; }
		
		//OPTION
		public RuleCall getOPTIONParserRuleCall_0_0_1() { return cOPTIONParserRuleCall_0_0_1; }
		
		//'for'
		public Keyword getForKeyword_0_0_2() { return cForKeyword_0_0_2; }
		
		//'the'
		public Keyword getTheKeyword_0_0_3() { return cTheKeyword_0_0_3; }
		
		//('for'|'of'|'to')?
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//'for'
		public Keyword getForKeyword_0_1_0() { return cForKeyword_0_1_0; }
		
		//'of'
		public Keyword getOfKeyword_0_1_1() { return cOfKeyword_0_1_1; }
		
		//'to'
		public Keyword getToKeyword_0_1_2() { return cToKeyword_0_1_2; }
		
		//(('the'|'all' 'the') entity = [DeclarativeEntityDef | WORD] name = ENTITY_IDENTITY)
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//('the'|'all' 'the')
		public Alternatives getAlternatives_0_2_0() { return cAlternatives_0_2_0; }
		
		//'the'
		public Keyword getTheKeyword_0_2_0_0() { return cTheKeyword_0_2_0_0; }
		
		//'all' 'the'
		public Group getGroup_0_2_0_1() { return cGroup_0_2_0_1; }
		
		//'all'
		public Keyword getAllKeyword_0_2_0_1_0() { return cAllKeyword_0_2_0_1_0; }
		
		//'the'
		public Keyword getTheKeyword_0_2_0_1_1() { return cTheKeyword_0_2_0_1_1; }
		
		//entity = [DeclarativeEntityDef | WORD]
		public Assignment getEntityAssignment_0_2_1() { return cEntityAssignment_0_2_1; }
		
		//[DeclarativeEntityDef | WORD]
		public CrossReference getEntityDeclarativeEntityDefCrossReference_0_2_1_0() { return cEntityDeclarativeEntityDefCrossReference_0_2_1_0; }
		
		//WORD
		public RuleCall getEntityDeclarativeEntityDefWORDParserRuleCall_0_2_1_0_1() { return cEntityDeclarativeEntityDefWORDParserRuleCall_0_2_1_0_1; }
		
		//name = ENTITY_IDENTITY
		public Assignment getNameAssignment_0_2_2() { return cNameAssignment_0_2_2; }
		
		//ENTITY_IDENTITY
		public RuleCall getNameENTITY_IDENTITYParserRuleCall_0_2_2_0() { return cNameENTITY_IDENTITYParserRuleCall_0_2_2_0; }
		
		//(name = ENTITY_IDENTITY)
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ENTITY_IDENTITY
		public RuleCall getNameENTITY_IDENTITYParserRuleCall_1_0() { return cNameENTITY_IDENTITYParserRuleCall_1_0; }
	}
	public class ImperativeEntityRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.ImperativeEntityRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTheKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEntityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cEntityImperativeEntityDefCrossReference_1_0 = (CrossReference)cEntityAssignment_1.eContents().get(0);
		private final RuleCall cEntityImperativeEntityDefIDTerminalRuleCall_1_0_1 = (RuleCall)cEntityImperativeEntityDefCrossReference_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//ImperativeEntityRef:
		//     'the' entity = [ImperativeEntityDef] name = STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'the' entity = [ImperativeEntityDef] name = STRING
		public Group getGroup() { return cGroup; }
		
		//'the'
		public Keyword getTheKeyword_0() { return cTheKeyword_0; }
		
		//entity = [ImperativeEntityDef]
		public Assignment getEntityAssignment_1() { return cEntityAssignment_1; }
		
		//[ImperativeEntityDef]
		public CrossReference getEntityImperativeEntityDefCrossReference_1_0() { return cEntityImperativeEntityDefCrossReference_1_0; }
		
		//ID
		public RuleCall getEntityImperativeEntityDefIDTerminalRuleCall_1_0_1() { return cEntityImperativeEntityDefIDTerminalRuleCall_1_0_1; }
		
		//name = STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }
	}
	public class DeclarativeEntityStatePhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.DeclarativeEntityStatePhrase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cPropertyAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cPropertyPropertyDefCrossReference_0_0_0 = (CrossReference)cPropertyAssignment_0_0.eContents().get(0);
		private final RuleCall cPropertyPropertyDefWORDParserRuleCall_0_0_0_1 = (RuleCall)cPropertyPropertyDefCrossReference_0_0_0.eContents().get(1);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Keyword cOfKeyword_0_1_0 = (Keyword)cAlternatives_0_1.eContents().get(0);
		private final Group cGroup_0_1_1 = (Group)cAlternatives_0_1.eContents().get(1);
		private final Keyword cOfKeyword_0_1_1_0 = (Keyword)cGroup_0_1_1.eContents().get(0);
		private final Keyword cTheKeyword_0_1_1_1 = (Keyword)cGroup_0_1_1.eContents().get(1);
		private final RuleCall cOPTIONParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Alternatives cAlternatives_0_3 = (Alternatives)cGroup_0.eContents().get(3);
		private final Keyword cForKeyword_0_3_0 = (Keyword)cAlternatives_0_3.eContents().get(0);
		private final Group cGroup_0_3_1 = (Group)cAlternatives_0_3.eContents().get(1);
		private final Keyword cForKeyword_0_3_1_0 = (Keyword)cGroup_0_3_1.eContents().get(0);
		private final Keyword cTheKeyword_0_3_1_1 = (Keyword)cGroup_0_3_1.eContents().get(1);
		private final Alternatives cAlternatives_0_4 = (Alternatives)cGroup_0.eContents().get(4);
		private final Keyword cOfKeyword_0_4_0 = (Keyword)cAlternatives_0_4.eContents().get(0);
		private final Group cGroup_0_4_1 = (Group)cAlternatives_0_4.eContents().get(1);
		private final Keyword cOfKeyword_0_4_1_0 = (Keyword)cGroup_0_4_1.eContents().get(0);
		private final Keyword cTheKeyword_0_4_1_1 = (Keyword)cGroup_0_4_1.eContents().get(1);
		private final Group cGroup_0_4_2 = (Group)cAlternatives_0_4.eContents().get(2);
		private final Keyword cForKeyword_0_4_2_0 = (Keyword)cGroup_0_4_2.eContents().get(0);
		private final Keyword cTheKeyword_0_4_2_1 = (Keyword)cGroup_0_4_2.eContents().get(1);
		private final Keyword cForKeyword_0_4_3 = (Keyword)cAlternatives_0_4.eContents().get(3);
		private final Assignment cEntityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEntityDeclarativeEntityRefParserRuleCall_1_0 = (RuleCall)cEntityAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cIsKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cAreKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Keyword cNotKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cStateStateNameCrossReference_4_0 = (CrossReference)cStateAssignment_4.eContents().get(0);
		private final RuleCall cStateStateNameIDTerminalRuleCall_4_0_1 = (RuleCall)cStateStateNameCrossReference_4_0.eContents().get(1);
		private final RuleCall cWORDParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//DeclarativeEntityStatePhrase:
		//    (property = [PropertyDef | WORD]? ('of'|'of' 'the')? OPTION? ('for'|'for' 'the')? ('of'|'of' 'the'|'for' 'the'|'for'))?
		//    entity = DeclarativeEntityRef ('is'|'are') 'not'? state = [StateName] WORD?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(property = [PropertyDef | WORD]? ('of'|'of' 'the')? OPTION? ('for'|'for' 'the')? ('of'|'of' 'the'|'for' 'the'|'for'))?
		//entity = DeclarativeEntityRef ('is'|'are') 'not'? state = [StateName] WORD?
		public Group getGroup() { return cGroup; }
		
		//(property = [PropertyDef | WORD]? ('of'|'of' 'the')? OPTION? ('for'|'for' 'the')? ('of'|'of' 'the'|'for' 'the'|'for'))?
		public Group getGroup_0() { return cGroup_0; }
		
		//property = [PropertyDef | WORD]?
		public Assignment getPropertyAssignment_0_0() { return cPropertyAssignment_0_0; }
		
		//[PropertyDef | WORD]
		public CrossReference getPropertyPropertyDefCrossReference_0_0_0() { return cPropertyPropertyDefCrossReference_0_0_0; }
		
		//WORD
		public RuleCall getPropertyPropertyDefWORDParserRuleCall_0_0_0_1() { return cPropertyPropertyDefWORDParserRuleCall_0_0_0_1; }
		
		//('of'|'of' 'the')?
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//'of'
		public Keyword getOfKeyword_0_1_0() { return cOfKeyword_0_1_0; }
		
		//'of' 'the'
		public Group getGroup_0_1_1() { return cGroup_0_1_1; }
		
		//'of'
		public Keyword getOfKeyword_0_1_1_0() { return cOfKeyword_0_1_1_0; }
		
		//'the'
		public Keyword getTheKeyword_0_1_1_1() { return cTheKeyword_0_1_1_1; }
		
		//OPTION?
		public RuleCall getOPTIONParserRuleCall_0_2() { return cOPTIONParserRuleCall_0_2; }
		
		//('for'|'for' 'the')?
		public Alternatives getAlternatives_0_3() { return cAlternatives_0_3; }
		
		//'for'
		public Keyword getForKeyword_0_3_0() { return cForKeyword_0_3_0; }
		
		//'for' 'the'
		public Group getGroup_0_3_1() { return cGroup_0_3_1; }
		
		//'for'
		public Keyword getForKeyword_0_3_1_0() { return cForKeyword_0_3_1_0; }
		
		//'the'
		public Keyword getTheKeyword_0_3_1_1() { return cTheKeyword_0_3_1_1; }
		
		//('of'|'of' 'the'|'for' 'the'|'for')
		public Alternatives getAlternatives_0_4() { return cAlternatives_0_4; }
		
		//'of'
		public Keyword getOfKeyword_0_4_0() { return cOfKeyword_0_4_0; }
		
		//'of' 'the'
		public Group getGroup_0_4_1() { return cGroup_0_4_1; }
		
		//'of'
		public Keyword getOfKeyword_0_4_1_0() { return cOfKeyword_0_4_1_0; }
		
		//'the'
		public Keyword getTheKeyword_0_4_1_1() { return cTheKeyword_0_4_1_1; }
		
		//'for' 'the'
		public Group getGroup_0_4_2() { return cGroup_0_4_2; }
		
		//'for'
		public Keyword getForKeyword_0_4_2_0() { return cForKeyword_0_4_2_0; }
		
		//'the'
		public Keyword getTheKeyword_0_4_2_1() { return cTheKeyword_0_4_2_1; }
		
		//'for'
		public Keyword getForKeyword_0_4_3() { return cForKeyword_0_4_3; }
		
		//entity = DeclarativeEntityRef
		public Assignment getEntityAssignment_1() { return cEntityAssignment_1; }
		
		//DeclarativeEntityRef
		public RuleCall getEntityDeclarativeEntityRefParserRuleCall_1_0() { return cEntityDeclarativeEntityRefParserRuleCall_1_0; }
		
		//('is'|'are')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'is'
		public Keyword getIsKeyword_2_0() { return cIsKeyword_2_0; }
		
		//'are'
		public Keyword getAreKeyword_2_1() { return cAreKeyword_2_1; }
		
		//'not'?
		public Keyword getNotKeyword_3() { return cNotKeyword_3; }
		
		//state = [StateName]
		public Assignment getStateAssignment_4() { return cStateAssignment_4; }
		
		//[StateName]
		public CrossReference getStateStateNameCrossReference_4_0() { return cStateStateNameCrossReference_4_0; }
		
		//ID
		public RuleCall getStateStateNameIDTerminalRuleCall_4_0_1() { return cStateStateNameIDTerminalRuleCall_4_0_1; }
		
		//WORD?
		public RuleCall getWORDParserRuleCall_5() { return cWORDParserRuleCall_5; }
	}
	public class ImperativeEntityStatePhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.ImperativeEntityStatePhrase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEntityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEntityImperativeEntityRefParserRuleCall_0_0 = (RuleCall)cEntityAssignment_0.eContents().get(0);
		private final Keyword cIsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cStateImperativeStateNameCrossReference_2_0 = (CrossReference)cStateAssignment_2.eContents().get(0);
		private final RuleCall cStateImperativeStateNameIDTerminalRuleCall_2_0_1 = (RuleCall)cStateImperativeStateNameCrossReference_2_0.eContents().get(1);
		
		//ImperativeEntityStatePhrase:
		//    entity = ImperativeEntityRef 'is' state = [ImperativeStateName]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//entity = ImperativeEntityRef 'is' state = [ImperativeStateName]
		public Group getGroup() { return cGroup; }
		
		//entity = ImperativeEntityRef
		public Assignment getEntityAssignment_0() { return cEntityAssignment_0; }
		
		//ImperativeEntityRef
		public RuleCall getEntityImperativeEntityRefParserRuleCall_0_0() { return cEntityImperativeEntityRefParserRuleCall_0_0; }
		
		//'is'
		public Keyword getIsKeyword_1() { return cIsKeyword_1; }
		
		//state = [ImperativeStateName]
		public Assignment getStateAssignment_2() { return cStateAssignment_2; }
		
		//[ImperativeStateName]
		public CrossReference getStateImperativeStateNameCrossReference_2_0() { return cStateImperativeStateNameCrossReference_2_0; }
		
		//ID
		public RuleCall getStateImperativeStateNameIDTerminalRuleCall_2_0_1() { return cStateImperativeStateNameIDTerminalRuleCall_2_0_1; }
	}
	public class DeclarativeEntityPropertyStatePhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.DeclarativeEntityPropertyStatePhrase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cPropertyPropertyDefCrossReference_0_0 = (CrossReference)cPropertyAssignment_0.eContents().get(0);
		private final RuleCall cPropertyPropertyDefWORDParserRuleCall_0_0_1 = (RuleCall)cPropertyPropertyDefCrossReference_0_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cOfKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cOfKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cTheKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final RuleCall cOPTIONParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cOfKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Keyword cForKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Keyword cFromKeyword_3_2 = (Keyword)cAlternatives_3.eContents().get(2);
		private final Group cGroup_3_3 = (Group)cAlternatives_3.eContents().get(3);
		private final Keyword cForKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Keyword cTheKeyword_3_3_1 = (Keyword)cGroup_3_3.eContents().get(1);
		private final Group cGroup_3_4 = (Group)cAlternatives_3.eContents().get(4);
		private final Keyword cOfKeyword_3_4_0 = (Keyword)cGroup_3_4.eContents().get(0);
		private final Keyword cTheKeyword_3_4_1 = (Keyword)cGroup_3_4.eContents().get(1);
		private final Assignment cEntityAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEntityDeclarativeEntityRefParserRuleCall_4_0 = (RuleCall)cEntityAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Group cGroup_5_0_0 = (Group)cGroup_5_0.eContents().get(0);
		private final Alternatives cAlternatives_5_0_0_0 = (Alternatives)cGroup_5_0_0.eContents().get(0);
		private final Keyword cIsKeyword_5_0_0_0_0 = (Keyword)cAlternatives_5_0_0_0.eContents().get(0);
		private final Group cGroup_5_0_0_0_1 = (Group)cAlternatives_5_0_0_0.eContents().get(1);
		private final Keyword cIsKeyword_5_0_0_0_1_0 = (Keyword)cGroup_5_0_0_0_1.eContents().get(0);
		private final Keyword cNotKeyword_5_0_0_0_1_1 = (Keyword)cGroup_5_0_0_0_1.eContents().get(1);
		private final Assignment cValueAssignment_5_0_0_1 = (Assignment)cGroup_5_0_0.eContents().get(1);
		private final RuleCall cValueSimpleValueParserRuleCall_5_0_0_1_0 = (RuleCall)cValueAssignment_5_0_0_1.eContents().get(0);
		private final RuleCall cWORDParserRuleCall_5_0_0_2 = (RuleCall)cGroup_5_0_0.eContents().get(2);
		private final RuleCall cWORDParserRuleCall_5_0_1 = (RuleCall)cGroup_5_0.eContents().get(1);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Alternatives cAlternatives_5_1_0 = (Alternatives)cGroup_5_1.eContents().get(0);
		private final Group cGroup_5_1_0_0 = (Group)cAlternatives_5_1_0.eContents().get(0);
		private final Alternatives cAlternatives_5_1_0_0_0 = (Alternatives)cGroup_5_1_0_0.eContents().get(0);
		private final Keyword cAreKeyword_5_1_0_0_0_0 = (Keyword)cAlternatives_5_1_0_0_0.eContents().get(0);
		private final Group cGroup_5_1_0_0_0_1 = (Group)cAlternatives_5_1_0_0_0.eContents().get(1);
		private final Keyword cAreKeyword_5_1_0_0_0_1_0 = (Keyword)cGroup_5_1_0_0_0_1.eContents().get(0);
		private final Keyword cNotKeyword_5_1_0_0_0_1_1 = (Keyword)cGroup_5_1_0_0_0_1.eContents().get(1);
		private final Assignment cValuesAssignment_5_1_0_0_1 = (Assignment)cGroup_5_1_0_0.eContents().get(1);
		private final RuleCall cValuesSimpleValueParserRuleCall_5_1_0_0_1_0 = (RuleCall)cValuesAssignment_5_1_0_0_1.eContents().get(0);
		private final RuleCall cWORDParserRuleCall_5_1_0_0_2 = (RuleCall)cGroup_5_1_0_0.eContents().get(2);
		private final Group cGroup_5_1_0_1 = (Group)cAlternatives_5_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0_1_0 = (Keyword)cGroup_5_1_0_1.eContents().get(0);
		private final Assignment cValuesAssignment_5_1_0_1_1 = (Assignment)cGroup_5_1_0_1.eContents().get(1);
		private final RuleCall cValuesSimpleValueParserRuleCall_5_1_0_1_1_0 = (RuleCall)cValuesAssignment_5_1_0_1_1.eContents().get(0);
		private final RuleCall cWORDParserRuleCall_5_1_1 = (RuleCall)cGroup_5_1.eContents().get(1);
		
		//DeclarativeEntityPropertyStatePhrase:
		//    property = [PropertyDef | WORD]? ('of'|'of' 'the')? OPTION? ('of'|'for' |'from'|'for' 'the'|'of' 'the')  entity = DeclarativeEntityRef
		//    ((('is'|'is' 'not') value = SimpleValue WORD?) WORD? | (('are'|'are' 'not') (values += SimpleValue) WORD? | (',' values += SimpleValue)*) WORD?)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//property = [PropertyDef | WORD]? ('of'|'of' 'the')? OPTION? ('of'|'for' |'from'|'for' 'the'|'of' 'the')  entity = DeclarativeEntityRef
		//((('is'|'is' 'not') value = SimpleValue WORD?) WORD? | (('are'|'are' 'not') (values += SimpleValue) WORD? | (',' values += SimpleValue)*) WORD?)
		public Group getGroup() { return cGroup; }
		
		//property = [PropertyDef | WORD]?
		public Assignment getPropertyAssignment_0() { return cPropertyAssignment_0; }
		
		//[PropertyDef | WORD]
		public CrossReference getPropertyPropertyDefCrossReference_0_0() { return cPropertyPropertyDefCrossReference_0_0; }
		
		//WORD
		public RuleCall getPropertyPropertyDefWORDParserRuleCall_0_0_1() { return cPropertyPropertyDefWORDParserRuleCall_0_0_1; }
		
		//('of'|'of' 'the')?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'of'
		public Keyword getOfKeyword_1_0() { return cOfKeyword_1_0; }
		
		//'of' 'the'
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'of'
		public Keyword getOfKeyword_1_1_0() { return cOfKeyword_1_1_0; }
		
		//'the'
		public Keyword getTheKeyword_1_1_1() { return cTheKeyword_1_1_1; }
		
		//OPTION?
		public RuleCall getOPTIONParserRuleCall_2() { return cOPTIONParserRuleCall_2; }
		
		//('of'|'for' |'from'|'for' 'the'|'of' 'the')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'of'
		public Keyword getOfKeyword_3_0() { return cOfKeyword_3_0; }
		
		//'for'
		public Keyword getForKeyword_3_1() { return cForKeyword_3_1; }
		
		//'from'
		public Keyword getFromKeyword_3_2() { return cFromKeyword_3_2; }
		
		//'for' 'the'
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//'for'
		public Keyword getForKeyword_3_3_0() { return cForKeyword_3_3_0; }
		
		//'the'
		public Keyword getTheKeyword_3_3_1() { return cTheKeyword_3_3_1; }
		
		//'of' 'the'
		public Group getGroup_3_4() { return cGroup_3_4; }
		
		//'of'
		public Keyword getOfKeyword_3_4_0() { return cOfKeyword_3_4_0; }
		
		//'the'
		public Keyword getTheKeyword_3_4_1() { return cTheKeyword_3_4_1; }
		
		//entity = DeclarativeEntityRef
		public Assignment getEntityAssignment_4() { return cEntityAssignment_4; }
		
		//DeclarativeEntityRef
		public RuleCall getEntityDeclarativeEntityRefParserRuleCall_4_0() { return cEntityDeclarativeEntityRefParserRuleCall_4_0; }
		
		//((('is'|'is' 'not') value = SimpleValue WORD?) WORD? | (('are'|'are' 'not') (values += SimpleValue) WORD? | (',' values += SimpleValue)*) WORD?)
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//(('is'|'is' 'not') value = SimpleValue WORD?) WORD?
		public Group getGroup_5_0() { return cGroup_5_0; }
		
		//(('is'|'is' 'not') value = SimpleValue WORD?)
		public Group getGroup_5_0_0() { return cGroup_5_0_0; }
		
		//('is'|'is' 'not')
		public Alternatives getAlternatives_5_0_0_0() { return cAlternatives_5_0_0_0; }
		
		//'is'
		public Keyword getIsKeyword_5_0_0_0_0() { return cIsKeyword_5_0_0_0_0; }
		
		//'is' 'not'
		public Group getGroup_5_0_0_0_1() { return cGroup_5_0_0_0_1; }
		
		//'is'
		public Keyword getIsKeyword_5_0_0_0_1_0() { return cIsKeyword_5_0_0_0_1_0; }
		
		//'not'
		public Keyword getNotKeyword_5_0_0_0_1_1() { return cNotKeyword_5_0_0_0_1_1; }
		
		//value = SimpleValue
		public Assignment getValueAssignment_5_0_0_1() { return cValueAssignment_5_0_0_1; }
		
		//SimpleValue
		public RuleCall getValueSimpleValueParserRuleCall_5_0_0_1_0() { return cValueSimpleValueParserRuleCall_5_0_0_1_0; }
		
		//WORD?
		public RuleCall getWORDParserRuleCall_5_0_0_2() { return cWORDParserRuleCall_5_0_0_2; }
		
		//WORD?
		public RuleCall getWORDParserRuleCall_5_0_1() { return cWORDParserRuleCall_5_0_1; }
		
		//(('are'|'are' 'not') (values += SimpleValue) WORD? | (',' values += SimpleValue)*) WORD?
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//(('are'|'are' 'not') (values += SimpleValue) WORD? | (',' values += SimpleValue)*)
		public Alternatives getAlternatives_5_1_0() { return cAlternatives_5_1_0; }
		
		//('are'|'are' 'not') (values += SimpleValue) WORD?
		public Group getGroup_5_1_0_0() { return cGroup_5_1_0_0; }
		
		//('are'|'are' 'not')
		public Alternatives getAlternatives_5_1_0_0_0() { return cAlternatives_5_1_0_0_0; }
		
		//'are'
		public Keyword getAreKeyword_5_1_0_0_0_0() { return cAreKeyword_5_1_0_0_0_0; }
		
		//'are' 'not'
		public Group getGroup_5_1_0_0_0_1() { return cGroup_5_1_0_0_0_1; }
		
		//'are'
		public Keyword getAreKeyword_5_1_0_0_0_1_0() { return cAreKeyword_5_1_0_0_0_1_0; }
		
		//'not'
		public Keyword getNotKeyword_5_1_0_0_0_1_1() { return cNotKeyword_5_1_0_0_0_1_1; }
		
		//(values += SimpleValue)
		public Assignment getValuesAssignment_5_1_0_0_1() { return cValuesAssignment_5_1_0_0_1; }
		
		//SimpleValue
		public RuleCall getValuesSimpleValueParserRuleCall_5_1_0_0_1_0() { return cValuesSimpleValueParserRuleCall_5_1_0_0_1_0; }
		
		//WORD?
		public RuleCall getWORDParserRuleCall_5_1_0_0_2() { return cWORDParserRuleCall_5_1_0_0_2; }
		
		//(',' values += SimpleValue)*
		public Group getGroup_5_1_0_1() { return cGroup_5_1_0_1; }
		
		//','
		public Keyword getCommaKeyword_5_1_0_1_0() { return cCommaKeyword_5_1_0_1_0; }
		
		//values += SimpleValue
		public Assignment getValuesAssignment_5_1_0_1_1() { return cValuesAssignment_5_1_0_1_1; }
		
		//SimpleValue
		public RuleCall getValuesSimpleValueParserRuleCall_5_1_0_1_1_0() { return cValuesSimpleValueParserRuleCall_5_1_0_1_1_0; }
		
		//WORD?
		public RuleCall getWORDParserRuleCall_5_1_1() { return cWORDParserRuleCall_5_1_1; }
	}
	public class ImperativeEntityPropertyStatePhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.ImperativeEntityPropertyStatePhrase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTheKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPropertyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPropertyImperativePropertyDefCrossReference_1_0 = (CrossReference)cPropertyAssignment_1.eContents().get(0);
		private final RuleCall cPropertyImperativePropertyDefIDTerminalRuleCall_1_0_1 = (RuleCall)cPropertyImperativePropertyDefCrossReference_1_0.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cOfKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cForKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Assignment cEntityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEntityImperativeEntityRefParserRuleCall_3_0 = (RuleCall)cEntityAssignment_3.eContents().get(0);
		private final Keyword cIsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPropertyValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPropertyValueStringValueParserRuleCall_5_0 = (RuleCall)cPropertyValueAssignment_5.eContents().get(0);
		
		//ImperativeEntityPropertyStatePhrase:
		//     'the' property = [ImperativePropertyDef] ('of'|'for') entity = ImperativeEntityRef 'is' propertyValue = StringValue
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'the' property = [ImperativePropertyDef] ('of'|'for') entity = ImperativeEntityRef 'is' propertyValue = StringValue
		public Group getGroup() { return cGroup; }
		
		//'the'
		public Keyword getTheKeyword_0() { return cTheKeyword_0; }
		
		//property = [ImperativePropertyDef]
		public Assignment getPropertyAssignment_1() { return cPropertyAssignment_1; }
		
		//[ImperativePropertyDef]
		public CrossReference getPropertyImperativePropertyDefCrossReference_1_0() { return cPropertyImperativePropertyDefCrossReference_1_0; }
		
		//ID
		public RuleCall getPropertyImperativePropertyDefIDTerminalRuleCall_1_0_1() { return cPropertyImperativePropertyDefIDTerminalRuleCall_1_0_1; }
		
		//('of'|'for')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'of'
		public Keyword getOfKeyword_2_0() { return cOfKeyword_2_0; }
		
		//'for'
		public Keyword getForKeyword_2_1() { return cForKeyword_2_1; }
		
		//entity = ImperativeEntityRef
		public Assignment getEntityAssignment_3() { return cEntityAssignment_3; }
		
		//ImperativeEntityRef
		public RuleCall getEntityImperativeEntityRefParserRuleCall_3_0() { return cEntityImperativeEntityRefParserRuleCall_3_0; }
		
		//'is'
		public Keyword getIsKeyword_4() { return cIsKeyword_4; }
		
		//propertyValue = StringValue
		public Assignment getPropertyValueAssignment_5() { return cPropertyValueAssignment_5; }
		
		//StringValue
		public RuleCall getPropertyValueStringValueParserRuleCall_5_0() { return cPropertyValueStringValueParserRuleCall_5_0; }
	}
	public class SimpleValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.SimpleValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDoubleValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		////terminal UNCLOSED_STRING : '"' (!'"')* EOF;
		//SimpleValue: IntValue | StringValue | DoubleValue;
		@Override public ParserRule getRule() { return rule; }
		
		//IntValue | StringValue | DoubleValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntValue
		public RuleCall getIntValueParserRuleCall_0() { return cIntValueParserRuleCall_0; }
		
		//StringValue
		public RuleCall getStringValueParserRuleCall_1() { return cStringValueParserRuleCall_1; }
		
		//DoubleValue
		public RuleCall getDoubleValueParserRuleCall_2() { return cDoubleValueParserRuleCall_2; }
	}
	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.StringValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringValue:
		//    value = STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value = STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class IntValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.IntValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntValue:
		//    value = INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value = INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class DoubleValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.DoubleValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueDOUBLEParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//DoubleValue:
		//    value = DOUBLE
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value = DOUBLE
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//DOUBLE
		public RuleCall getValueDOUBLEParserRuleCall_0() { return cValueDOUBLEParserRuleCall_0; }
	}
	public class DeclarativeActionPhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.DeclarativeActionPhrase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDeclarativeEntityActionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVerbActionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DeclarativeActionPhrase:
		//    DeclarativeEntityAction | VerbAction
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//DeclarativeEntityAction | VerbAction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DeclarativeEntityAction
		public RuleCall getDeclarativeEntityActionParserRuleCall_0() { return cDeclarativeEntityActionParserRuleCall_0; }
		
		//VerbAction
		public RuleCall getVerbActionParserRuleCall_1() { return cVerbActionParserRuleCall_1; }
	}
	public class ImperativeActionPhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.ImperativeActionPhrase");
		private final RuleCall cImperativeEntityActionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ImperativeActionPhrase: ImperativeEntityAction;
		@Override public ParserRule getRule() { return rule; }
		
		//ImperativeEntityAction
		public RuleCall getImperativeEntityActionParserRuleCall() { return cImperativeEntityActionParserRuleCall; }
	}
	public class VerbActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.VerbAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cActionDeclarativeActionRefParserRuleCall_0_0 = (RuleCall)cActionAssignment_0.eContents().get(0);
		private final Keyword cAndKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cWORDParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cOnKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final RuleCall cWORDParserRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cWORDParserRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Keyword cForKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Keyword cTheKeyword_5_0_1 = (Keyword)cGroup_5_0.eContents().get(1);
		private final Keyword cTheKeyword_5_1 = (Keyword)cAlternatives_5.eContents().get(1);
		private final Keyword cOnKeyword_5_2 = (Keyword)cAlternatives_5.eContents().get(2);
		private final Group cGroup_5_3 = (Group)cAlternatives_5.eContents().get(3);
		private final Keyword cToKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Keyword cTheKeyword_5_3_1 = (Keyword)cGroup_5_3.eContents().get(1);
		private final Assignment cEntityAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cEntityDeclarativeEntityDefParserRuleCall_6_0 = (RuleCall)cEntityAssignment_6.eContents().get(0);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Keyword cOnKeyword_7_0 = (Keyword)cAlternatives_7.eContents().get(0);
		private final Keyword cOffKeyword_7_1 = (Keyword)cAlternatives_7.eContents().get(1);
		private final Keyword cInKeyword_7_2 = (Keyword)cAlternatives_7.eContents().get(2);
		private final Assignment cEntity2Assignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cEntity2DeclarativeEntityRefParserRuleCall_8_0 = (RuleCall)cEntity2Assignment_8.eContents().get(0);
		private final Alternatives cAlternatives_9 = (Alternatives)cGroup.eContents().get(9);
		private final Keyword cOnKeyword_9_0 = (Keyword)cAlternatives_9.eContents().get(0);
		private final Keyword cOffKeyword_9_1 = (Keyword)cAlternatives_9.eContents().get(1);
		private final Keyword cInKeyword_9_2 = (Keyword)cAlternatives_9.eContents().get(2);
		private final Alternatives cAlternatives_10 = (Alternatives)cGroup.eContents().get(10);
		private final Keyword cOfKeyword_10_0 = (Keyword)cAlternatives_10.eContents().get(0);
		private final Keyword cForKeyword_10_1 = (Keyword)cAlternatives_10.eContents().get(1);
		private final Group cGroup_10_2 = (Group)cAlternatives_10.eContents().get(2);
		private final Keyword cForKeyword_10_2_0 = (Keyword)cGroup_10_2.eContents().get(0);
		private final Keyword cTheKeyword_10_2_1 = (Keyword)cGroup_10_2.eContents().get(1);
		private final Group cGroup_10_3 = (Group)cAlternatives_10.eContents().get(3);
		private final Keyword cOfKeyword_10_3_0 = (Keyword)cGroup_10_3.eContents().get(0);
		private final Keyword cTheKeyword_10_3_1 = (Keyword)cGroup_10_3.eContents().get(1);
		private final RuleCall cPREPParserRuleCall_11 = (RuleCall)cGroup.eContents().get(11);
		private final Assignment cEntity3Assignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cEntity3DeclarativeEntityRefParserRuleCall_12_0 = (RuleCall)cEntity3Assignment_12.eContents().get(0);
		
		//VerbAction:
		//    action = DeclarativeActionRef 'and'? WORD? 'on'? (WORD'-'WORD)? ('for' 'the'| 'the'|'on' | 'to' 'the')? (entity = DeclarativeEntityDef)? ('on'|'off'|'in')? entity2 = DeclarativeEntityRef ('on'|'off'|'in')? ('of'|'for'|'for' 'the'|'of' 'the')? PREP? entity3 = DeclarativeEntityRef?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//action = DeclarativeActionRef 'and'? WORD? 'on'? (WORD'-'WORD)? ('for' 'the'| 'the'|'on' | 'to' 'the')? (entity = DeclarativeEntityDef)? ('on'|'off'|'in')? entity2 = DeclarativeEntityRef ('on'|'off'|'in')? ('of'|'for'|'for' 'the'|'of' 'the')? PREP? entity3 = DeclarativeEntityRef?
		public Group getGroup() { return cGroup; }
		
		//action = DeclarativeActionRef
		public Assignment getActionAssignment_0() { return cActionAssignment_0; }
		
		//DeclarativeActionRef
		public RuleCall getActionDeclarativeActionRefParserRuleCall_0_0() { return cActionDeclarativeActionRefParserRuleCall_0_0; }
		
		//'and'?
		public Keyword getAndKeyword_1() { return cAndKeyword_1; }
		
		//WORD?
		public RuleCall getWORDParserRuleCall_2() { return cWORDParserRuleCall_2; }
		
		//'on'?
		public Keyword getOnKeyword_3() { return cOnKeyword_3; }
		
		//(WORD'-'WORD)?
		public Group getGroup_4() { return cGroup_4; }
		
		//WORD
		public RuleCall getWORDParserRuleCall_4_0() { return cWORDParserRuleCall_4_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_4_1() { return cHyphenMinusKeyword_4_1; }
		
		//WORD
		public RuleCall getWORDParserRuleCall_4_2() { return cWORDParserRuleCall_4_2; }
		
		//('for' 'the'| 'the'|'on' | 'to' 'the')?
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//'for' 'the'
		public Group getGroup_5_0() { return cGroup_5_0; }
		
		//'for'
		public Keyword getForKeyword_5_0_0() { return cForKeyword_5_0_0; }
		
		//'the'
		public Keyword getTheKeyword_5_0_1() { return cTheKeyword_5_0_1; }
		
		//'the'
		public Keyword getTheKeyword_5_1() { return cTheKeyword_5_1; }
		
		//'on'
		public Keyword getOnKeyword_5_2() { return cOnKeyword_5_2; }
		
		//'to' 'the'
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//'to'
		public Keyword getToKeyword_5_3_0() { return cToKeyword_5_3_0; }
		
		//'the'
		public Keyword getTheKeyword_5_3_1() { return cTheKeyword_5_3_1; }
		
		//(entity = DeclarativeEntityDef)?
		public Assignment getEntityAssignment_6() { return cEntityAssignment_6; }
		
		//DeclarativeEntityDef
		public RuleCall getEntityDeclarativeEntityDefParserRuleCall_6_0() { return cEntityDeclarativeEntityDefParserRuleCall_6_0; }
		
		//('on'|'off'|'in')?
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//'on'
		public Keyword getOnKeyword_7_0() { return cOnKeyword_7_0; }
		
		//'off'
		public Keyword getOffKeyword_7_1() { return cOffKeyword_7_1; }
		
		//'in'
		public Keyword getInKeyword_7_2() { return cInKeyword_7_2; }
		
		//entity2 = DeclarativeEntityRef
		public Assignment getEntity2Assignment_8() { return cEntity2Assignment_8; }
		
		//DeclarativeEntityRef
		public RuleCall getEntity2DeclarativeEntityRefParserRuleCall_8_0() { return cEntity2DeclarativeEntityRefParserRuleCall_8_0; }
		
		//('on'|'off'|'in')?
		public Alternatives getAlternatives_9() { return cAlternatives_9; }
		
		//'on'
		public Keyword getOnKeyword_9_0() { return cOnKeyword_9_0; }
		
		//'off'
		public Keyword getOffKeyword_9_1() { return cOffKeyword_9_1; }
		
		//'in'
		public Keyword getInKeyword_9_2() { return cInKeyword_9_2; }
		
		//('of'|'for'|'for' 'the'|'of' 'the')?
		public Alternatives getAlternatives_10() { return cAlternatives_10; }
		
		//'of'
		public Keyword getOfKeyword_10_0() { return cOfKeyword_10_0; }
		
		//'for'
		public Keyword getForKeyword_10_1() { return cForKeyword_10_1; }
		
		//'for' 'the'
		public Group getGroup_10_2() { return cGroup_10_2; }
		
		//'for'
		public Keyword getForKeyword_10_2_0() { return cForKeyword_10_2_0; }
		
		//'the'
		public Keyword getTheKeyword_10_2_1() { return cTheKeyword_10_2_1; }
		
		//'of' 'the'
		public Group getGroup_10_3() { return cGroup_10_3; }
		
		//'of'
		public Keyword getOfKeyword_10_3_0() { return cOfKeyword_10_3_0; }
		
		//'the'
		public Keyword getTheKeyword_10_3_1() { return cTheKeyword_10_3_1; }
		
		//PREP?
		public RuleCall getPREPParserRuleCall_11() { return cPREPParserRuleCall_11; }
		
		//entity3 = DeclarativeEntityRef?
		public Assignment getEntity3Assignment_12() { return cEntity3Assignment_12; }
		
		//DeclarativeEntityRef
		public RuleCall getEntity3DeclarativeEntityRefParserRuleCall_12_0() { return cEntity3DeclarativeEntityRefParserRuleCall_12_0; }
	}
	public class DeclarativeEntityActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.DeclarativeEntityAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEntityActionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEntityActionDeclarativeEntityRefParserRuleCall_0_0 = (RuleCall)cEntityActionAssignment_0.eContents().get(0);
		private final Assignment cActionDefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cActionDefActionDefCrossReference_1_0 = (CrossReference)cActionDefAssignment_1.eContents().get(0);
		private final RuleCall cActionDefActionDefIDTerminalRuleCall_1_0_1 = (RuleCall)cActionDefActionDefCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cToKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cTheKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cEntityRefAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEntityRefDeclarativeEntityRefParserRuleCall_3_0 = (RuleCall)cEntityRefAssignment_3.eContents().get(0);
		private final Assignment cPropertyRefAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPropertyRefPropertyRefParserRuleCall_4_0 = (RuleCall)cPropertyRefAssignment_4.eContents().get(0);
		
		////Entity Verb 'to the' Entity STRING
		//DeclarativeEntityAction:
		//    entityAction = DeclarativeEntityRef (actionDef = [ActionDef]) ('to' 'the')?(entityRef = DeclarativeEntityRef)? (propertyRef = PropertyRef)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//entityAction = DeclarativeEntityRef (actionDef = [ActionDef]) ('to' 'the')?(entityRef = DeclarativeEntityRef)? (propertyRef = PropertyRef)?
		public Group getGroup() { return cGroup; }
		
		//entityAction = DeclarativeEntityRef
		public Assignment getEntityActionAssignment_0() { return cEntityActionAssignment_0; }
		
		//DeclarativeEntityRef
		public RuleCall getEntityActionDeclarativeEntityRefParserRuleCall_0_0() { return cEntityActionDeclarativeEntityRefParserRuleCall_0_0; }
		
		//(actionDef = [ActionDef])
		public Assignment getActionDefAssignment_1() { return cActionDefAssignment_1; }
		
		//[ActionDef]
		public CrossReference getActionDefActionDefCrossReference_1_0() { return cActionDefActionDefCrossReference_1_0; }
		
		//ID
		public RuleCall getActionDefActionDefIDTerminalRuleCall_1_0_1() { return cActionDefActionDefIDTerminalRuleCall_1_0_1; }
		
		//('to' 'the')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'to'
		public Keyword getToKeyword_2_0() { return cToKeyword_2_0; }
		
		//'the'
		public Keyword getTheKeyword_2_1() { return cTheKeyword_2_1; }
		
		//(entityRef = DeclarativeEntityRef)?
		public Assignment getEntityRefAssignment_3() { return cEntityRefAssignment_3; }
		
		//DeclarativeEntityRef
		public RuleCall getEntityRefDeclarativeEntityRefParserRuleCall_3_0() { return cEntityRefDeclarativeEntityRefParserRuleCall_3_0; }
		
		//(propertyRef = PropertyRef)?
		public Assignment getPropertyRefAssignment_4() { return cPropertyRefAssignment_4; }
		
		//PropertyRef
		public RuleCall getPropertyRefPropertyRefParserRuleCall_4_0() { return cPropertyRefPropertyRefParserRuleCall_4_0; }
	}
	public class ImperativeEntityActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.ImperativeEntityAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEntityActionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEntityActionImperativeEntityRefParserRuleCall_0_0 = (RuleCall)cEntityActionAssignment_0.eContents().get(0);
		private final Assignment cAdverbAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAdverbADVERBParserRuleCall_1_0 = (RuleCall)cAdverbAssignment_1.eContents().get(0);
		private final Assignment cActionDefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cActionDefImperativeActionDefCrossReference_2_0 = (CrossReference)cActionDefAssignment_2.eContents().get(0);
		private final RuleCall cActionDefImperativeActionDefIDTerminalRuleCall_2_0_1 = (RuleCall)cActionDefImperativeActionDefCrossReference_2_0.eContents().get(1);
		private final Assignment cPropertyRefAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertyRefImperativePropertyRefParserRuleCall_3_0 = (RuleCall)cPropertyRefAssignment_3.eContents().get(0);
		
		//ImperativeEntityAction:
		//    entityAction = ImperativeEntityRef (adverb=ADVERB)? actionDef = [ImperativeActionDef] (propertyRef = ImperativePropertyRef)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//entityAction = ImperativeEntityRef (adverb=ADVERB)? actionDef = [ImperativeActionDef] (propertyRef = ImperativePropertyRef)?
		public Group getGroup() { return cGroup; }
		
		//entityAction = ImperativeEntityRef
		public Assignment getEntityActionAssignment_0() { return cEntityActionAssignment_0; }
		
		//ImperativeEntityRef
		public RuleCall getEntityActionImperativeEntityRefParserRuleCall_0_0() { return cEntityActionImperativeEntityRefParserRuleCall_0_0; }
		
		//(adverb=ADVERB)?
		public Assignment getAdverbAssignment_1() { return cAdverbAssignment_1; }
		
		//ADVERB
		public RuleCall getAdverbADVERBParserRuleCall_1_0() { return cAdverbADVERBParserRuleCall_1_0; }
		
		//actionDef = [ImperativeActionDef]
		public Assignment getActionDefAssignment_2() { return cActionDefAssignment_2; }
		
		//[ImperativeActionDef]
		public CrossReference getActionDefImperativeActionDefCrossReference_2_0() { return cActionDefImperativeActionDefCrossReference_2_0; }
		
		//ID
		public RuleCall getActionDefImperativeActionDefIDTerminalRuleCall_2_0_1() { return cActionDefImperativeActionDefIDTerminalRuleCall_2_0_1; }
		
		//(propertyRef = ImperativePropertyRef)?
		public Assignment getPropertyRefAssignment_3() { return cPropertyRefAssignment_3; }
		
		//ImperativePropertyRef
		public RuleCall getPropertyRefImperativePropertyRefParserRuleCall_3_0() { return cPropertyRefImperativePropertyRefParserRuleCall_3_0; }
	}
	public class PropertyRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.PropertyRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyrefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPropertyrefToKeyword_0_0 = (Keyword)cPropertyrefAssignment_0.eContents().get(0);
		private final Assignment cPropertyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPropertyPropertyDefCrossReference_1_0 = (CrossReference)cPropertyAssignment_1.eContents().get(0);
		private final RuleCall cPropertyPropertyDefIDTerminalRuleCall_1_0_1 = (RuleCall)cPropertyPropertyDefCrossReference_1_0.eContents().get(1);
		private final Assignment cPropertyValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropertyValueStringValueParserRuleCall_2_0 = (RuleCall)cPropertyValueAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cWithKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cProperyValue2Assignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cProperyValue2StringValueParserRuleCall_3_1_0 = (RuleCall)cProperyValue2Assignment_3_1.eContents().get(0);
		private final Assignment cPropery2Assignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final CrossReference cPropery2PropertyDefCrossReference_3_2_0 = (CrossReference)cPropery2Assignment_3_2.eContents().get(0);
		private final RuleCall cPropery2PropertyDefIDTerminalRuleCall_3_2_0_1 = (RuleCall)cPropery2PropertyDefCrossReference_3_2_0.eContents().get(1);
		
		//PropertyRef:
		//    propertyref = 'to' property = [PropertyDef] propertyValue = StringValue ('with' properyValue2 = StringValue propery2 = [PropertyDef])?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//propertyref = 'to' property = [PropertyDef] propertyValue = StringValue ('with' properyValue2 = StringValue propery2 = [PropertyDef])?
		public Group getGroup() { return cGroup; }
		
		//propertyref = 'to'
		public Assignment getPropertyrefAssignment_0() { return cPropertyrefAssignment_0; }
		
		//'to'
		public Keyword getPropertyrefToKeyword_0_0() { return cPropertyrefToKeyword_0_0; }
		
		//property = [PropertyDef]
		public Assignment getPropertyAssignment_1() { return cPropertyAssignment_1; }
		
		//[PropertyDef]
		public CrossReference getPropertyPropertyDefCrossReference_1_0() { return cPropertyPropertyDefCrossReference_1_0; }
		
		//ID
		public RuleCall getPropertyPropertyDefIDTerminalRuleCall_1_0_1() { return cPropertyPropertyDefIDTerminalRuleCall_1_0_1; }
		
		//propertyValue = StringValue
		public Assignment getPropertyValueAssignment_2() { return cPropertyValueAssignment_2; }
		
		//StringValue
		public RuleCall getPropertyValueStringValueParserRuleCall_2_0() { return cPropertyValueStringValueParserRuleCall_2_0; }
		
		//('with' properyValue2 = StringValue propery2 = [PropertyDef])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'with'
		public Keyword getWithKeyword_3_0() { return cWithKeyword_3_0; }
		
		//properyValue2 = StringValue
		public Assignment getProperyValue2Assignment_3_1() { return cProperyValue2Assignment_3_1; }
		
		//StringValue
		public RuleCall getProperyValue2StringValueParserRuleCall_3_1_0() { return cProperyValue2StringValueParserRuleCall_3_1_0; }
		
		//propery2 = [PropertyDef]
		public Assignment getPropery2Assignment_3_2() { return cPropery2Assignment_3_2; }
		
		//[PropertyDef]
		public CrossReference getPropery2PropertyDefCrossReference_3_2_0() { return cPropery2PropertyDefCrossReference_3_2_0; }
		
		//ID
		public RuleCall getPropery2PropertyDefIDTerminalRuleCall_3_2_0_1() { return cPropery2PropertyDefIDTerminalRuleCall_3_2_0_1; }
	}
	public class ImperativePropertyRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.ImperativePropertyRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyrefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPropertyrefToKeyword_0_0 = (Keyword)cPropertyrefAssignment_0.eContents().get(0);
		private final Assignment cPropertyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPropertyImperativePropertyDefCrossReference_1_0 = (CrossReference)cPropertyAssignment_1.eContents().get(0);
		private final RuleCall cPropertyImperativePropertyDefIDTerminalRuleCall_1_0_1 = (RuleCall)cPropertyImperativePropertyDefCrossReference_1_0.eContents().get(1);
		private final Assignment cPropertyValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropertyValueStringValueParserRuleCall_2_0 = (RuleCall)cPropertyValueAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cWithKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cProperyValue2Assignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cProperyValue2StringValueParserRuleCall_3_1_0 = (RuleCall)cProperyValue2Assignment_3_1.eContents().get(0);
		private final Assignment cPropery2Assignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final CrossReference cPropery2ImperativePropertyDefCrossReference_3_2_0 = (CrossReference)cPropery2Assignment_3_2.eContents().get(0);
		private final RuleCall cPropery2ImperativePropertyDefIDTerminalRuleCall_3_2_0_1 = (RuleCall)cPropery2ImperativePropertyDefCrossReference_3_2_0.eContents().get(1);
		
		//ImperativePropertyRef:
		//    propertyref = 'to' property = [ImperativePropertyDef] propertyValue = StringValue ('with' properyValue2 = StringValue propery2 = [ImperativePropertyDef])?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//propertyref = 'to' property = [ImperativePropertyDef] propertyValue = StringValue ('with' properyValue2 = StringValue propery2 = [ImperativePropertyDef])?
		public Group getGroup() { return cGroup; }
		
		//propertyref = 'to'
		public Assignment getPropertyrefAssignment_0() { return cPropertyrefAssignment_0; }
		
		//'to'
		public Keyword getPropertyrefToKeyword_0_0() { return cPropertyrefToKeyword_0_0; }
		
		//property = [ImperativePropertyDef]
		public Assignment getPropertyAssignment_1() { return cPropertyAssignment_1; }
		
		//[ImperativePropertyDef]
		public CrossReference getPropertyImperativePropertyDefCrossReference_1_0() { return cPropertyImperativePropertyDefCrossReference_1_0; }
		
		//ID
		public RuleCall getPropertyImperativePropertyDefIDTerminalRuleCall_1_0_1() { return cPropertyImperativePropertyDefIDTerminalRuleCall_1_0_1; }
		
		//propertyValue = StringValue
		public Assignment getPropertyValueAssignment_2() { return cPropertyValueAssignment_2; }
		
		//StringValue
		public RuleCall getPropertyValueStringValueParserRuleCall_2_0() { return cPropertyValueStringValueParserRuleCall_2_0; }
		
		//('with' properyValue2 = StringValue propery2 = [ImperativePropertyDef])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'with'
		public Keyword getWithKeyword_3_0() { return cWithKeyword_3_0; }
		
		//properyValue2 = StringValue
		public Assignment getProperyValue2Assignment_3_1() { return cProperyValue2Assignment_3_1; }
		
		//StringValue
		public RuleCall getProperyValue2StringValueParserRuleCall_3_1_0() { return cProperyValue2StringValueParserRuleCall_3_1_0; }
		
		//propery2 = [ImperativePropertyDef]
		public Assignment getPropery2Assignment_3_2() { return cPropery2Assignment_3_2; }
		
		//[ImperativePropertyDef]
		public CrossReference getPropery2ImperativePropertyDefCrossReference_3_2_0() { return cPropery2ImperativePropertyDefCrossReference_3_2_0; }
		
		//ID
		public RuleCall getPropery2ImperativePropertyDefIDTerminalRuleCall_3_2_0_1() { return cPropery2ImperativePropertyDefIDTerminalRuleCall_3_2_0_1; }
	}
	public class DeclarativeActionRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.DeclarativeActionRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVerbAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cVerbActionDefCrossReference_0_0 = (CrossReference)cVerbAssignment_0.eContents().get(0);
		private final RuleCall cVerbActionDefWORDParserRuleCall_0_0_1 = (RuleCall)cVerbActionDefCrossReference_0_0.eContents().get(1);
		private final Keyword cOnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgumentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgumentSimpleValueParserRuleCall_2_0 = (RuleCall)cArgumentAssignment_2.eContents().get(0);
		private final Assignment cPrepositionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPrepositionPREPParserRuleCall_3_0 = (RuleCall)cPrepositionAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Keyword cTheKeyword_4_0_0 = (Keyword)cAlternatives_4_0.eContents().get(0);
		private final Keyword cOnKeyword_4_0_1 = (Keyword)cAlternatives_4_0.eContents().get(1);
		private final Assignment cEntityAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cEntityDeclarativeEntityDefParserRuleCall_4_1_0 = (RuleCall)cEntityAssignment_4_1.eContents().get(0);
		
		//DeclarativeActionRef: verb = [ActionDef | WORD] 'on'? (argument = SimpleValue)? (preposition = PREP)? (('the'|'on')(entity = DeclarativeEntityDef))? ;
		@Override public ParserRule getRule() { return rule; }
		
		//verb = [ActionDef | WORD] 'on'? (argument = SimpleValue)? (preposition = PREP)? (('the'|'on')(entity = DeclarativeEntityDef))?
		public Group getGroup() { return cGroup; }
		
		//verb = [ActionDef | WORD]
		public Assignment getVerbAssignment_0() { return cVerbAssignment_0; }
		
		//[ActionDef | WORD]
		public CrossReference getVerbActionDefCrossReference_0_0() { return cVerbActionDefCrossReference_0_0; }
		
		//WORD
		public RuleCall getVerbActionDefWORDParserRuleCall_0_0_1() { return cVerbActionDefWORDParserRuleCall_0_0_1; }
		
		//'on'?
		public Keyword getOnKeyword_1() { return cOnKeyword_1; }
		
		//(argument = SimpleValue)?
		public Assignment getArgumentAssignment_2() { return cArgumentAssignment_2; }
		
		//SimpleValue
		public RuleCall getArgumentSimpleValueParserRuleCall_2_0() { return cArgumentSimpleValueParserRuleCall_2_0; }
		
		//(preposition = PREP)?
		public Assignment getPrepositionAssignment_3() { return cPrepositionAssignment_3; }
		
		//PREP
		public RuleCall getPrepositionPREPParserRuleCall_3_0() { return cPrepositionPREPParserRuleCall_3_0; }
		
		//(('the'|'on')(entity = DeclarativeEntityDef))?
		public Group getGroup_4() { return cGroup_4; }
		
		//('the'|'on')
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }
		
		//'the'
		public Keyword getTheKeyword_4_0_0() { return cTheKeyword_4_0_0; }
		
		//'on'
		public Keyword getOnKeyword_4_0_1() { return cOnKeyword_4_0_1; }
		
		//(entity = DeclarativeEntityDef)
		public Assignment getEntityAssignment_4_1() { return cEntityAssignment_4_1; }
		
		//DeclarativeEntityDef
		public RuleCall getEntityDeclarativeEntityDefParserRuleCall_4_1_0() { return cEntityDeclarativeEntityDefParserRuleCall_4_1_0; }
	}
	public class DOUBLEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.DOUBLE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//DOUBLE returns ecore::EDouble : INT'.'INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT'.'INT
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	
	
	private final ModelElements pModel;
	private final ModelRefElements pModelRef;
	private final DeclarativeEntityDefElements pDeclarativeEntityDef;
	private final ImperativeEntityDefElements pImperativeEntityDef;
	private final ImperativeActionDefElements pImperativeActionDef;
	private final ActionDefElements pActionDef;
	private final PREPElements pPREP;
	private final ADVERBElements pADVERB;
	private final WORDElements pWORD;
	private final StateDefElements pStateDef;
	private final StateNameElements pStateName;
	private final PropertyDefElements pPropertyDef;
	private final ImperativeStateDefElements pImperativeStateDef;
	private final ImperativeStateNameElements pImperativeStateName;
	private final ImperativePropertyDefElements pImperativePropertyDef;
	private final ID_OR_STRINGElements pID_OR_STRING;
	private final ImperativeScenarioElements pImperativeScenario;
	private final ScenarioElements pScenario;
	private final DeclarativeScenarioStateElements pDeclarativeScenarioState;
	private final ImperativeScenarioStateElements pImperativeScenarioState;
	private final DeclarativeScenarioActionElements pDeclarativeScenarioAction;
	private final ImperativeScenarioActionElements pImperativeScenarioAction;
	private final DeclarativeStatePhraseElements pDeclarativeStatePhrase;
	private final ImperativeStatePhraseElements pImperativeStatePhrase;
	private final ENTITY_IDENTITYElements pENTITY_IDENTITY;
	private final OPTIONElements pOPTION;
	private final DeclarativeEntityRefElements pDeclarativeEntityRef;
	private final ImperativeEntityRefElements pImperativeEntityRef;
	private final DeclarativeEntityStatePhraseElements pDeclarativeEntityStatePhrase;
	private final ImperativeEntityStatePhraseElements pImperativeEntityStatePhrase;
	private final DeclarativeEntityPropertyStatePhraseElements pDeclarativeEntityPropertyStatePhrase;
	private final ImperativeEntityPropertyStatePhraseElements pImperativeEntityPropertyStatePhrase;
	private final SimpleValueElements pSimpleValue;
	private final StringValueElements pStringValue;
	private final IntValueElements pIntValue;
	private final DoubleValueElements pDoubleValue;
	private final DeclarativeActionPhraseElements pDeclarativeActionPhrase;
	private final ImperativeActionPhraseElements pImperativeActionPhrase;
	private final VerbActionElements pVerbAction;
	private final DeclarativeEntityActionElements pDeclarativeEntityAction;
	private final ImperativeEntityActionElements pImperativeEntityAction;
	private final PropertyRefElements pPropertyRef;
	private final ImperativePropertyRefElements pImperativePropertyRef;
	private final DeclarativeActionRefElements pDeclarativeActionRef;
	private final DOUBLEElements pDOUBLE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BddDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pModelRef = new ModelRefElements();
		this.pDeclarativeEntityDef = new DeclarativeEntityDefElements();
		this.pImperativeEntityDef = new ImperativeEntityDefElements();
		this.pImperativeActionDef = new ImperativeActionDefElements();
		this.pActionDef = new ActionDefElements();
		this.pPREP = new PREPElements();
		this.pADVERB = new ADVERBElements();
		this.pWORD = new WORDElements();
		this.pStateDef = new StateDefElements();
		this.pStateName = new StateNameElements();
		this.pPropertyDef = new PropertyDefElements();
		this.pImperativeStateDef = new ImperativeStateDefElements();
		this.pImperativeStateName = new ImperativeStateNameElements();
		this.pImperativePropertyDef = new ImperativePropertyDefElements();
		this.pID_OR_STRING = new ID_OR_STRINGElements();
		this.pImperativeScenario = new ImperativeScenarioElements();
		this.pScenario = new ScenarioElements();
		this.pDeclarativeScenarioState = new DeclarativeScenarioStateElements();
		this.pImperativeScenarioState = new ImperativeScenarioStateElements();
		this.pDeclarativeScenarioAction = new DeclarativeScenarioActionElements();
		this.pImperativeScenarioAction = new ImperativeScenarioActionElements();
		this.pDeclarativeStatePhrase = new DeclarativeStatePhraseElements();
		this.pImperativeStatePhrase = new ImperativeStatePhraseElements();
		this.pENTITY_IDENTITY = new ENTITY_IDENTITYElements();
		this.pOPTION = new OPTIONElements();
		this.pDeclarativeEntityRef = new DeclarativeEntityRefElements();
		this.pImperativeEntityRef = new ImperativeEntityRefElements();
		this.pDeclarativeEntityStatePhrase = new DeclarativeEntityStatePhraseElements();
		this.pImperativeEntityStatePhrase = new ImperativeEntityStatePhraseElements();
		this.pDeclarativeEntityPropertyStatePhrase = new DeclarativeEntityPropertyStatePhraseElements();
		this.pImperativeEntityPropertyStatePhrase = new ImperativeEntityPropertyStatePhraseElements();
		this.pSimpleValue = new SimpleValueElements();
		this.pStringValue = new StringValueElements();
		this.pIntValue = new IntValueElements();
		this.pDoubleValue = new DoubleValueElements();
		this.pDeclarativeActionPhrase = new DeclarativeActionPhraseElements();
		this.pImperativeActionPhrase = new ImperativeActionPhraseElements();
		this.pVerbAction = new VerbActionElements();
		this.pDeclarativeEntityAction = new DeclarativeEntityActionElements();
		this.pImperativeEntityAction = new ImperativeEntityActionElements();
		this.pPropertyRef = new PropertyRefElements();
		this.pImperativePropertyRef = new ImperativePropertyRefElements();
		this.pDeclarativeActionRef = new DeclarativeActionRefElements();
		this.pDOUBLE = new DOUBLEElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("dk.sdu.bdd.xtext.BddDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    ('model' name = ID)
	//    (
	//        (modelRefs += ModelRef) |
	//        (declarativeEntityDef += DeclarativeEntityDef) |
	//        (imperativeEntityDef += ImperativeEntityDef) |
	//        (scenarios += Scenario)
	//    )*
	//;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//ModelRef:
	//    'using' modelRef = [Model]
	//;
	public ModelRefElements getModelRefAccess() {
		return pModelRef;
	}
	
	public ParserRule getModelRefRule() {
		return getModelRefAccess().getRule();
	}
	
	//DeclarativeEntityDef:
	//    'declarative' 'entity' name = (ID | STRING) ('-'WORD)? ('is' superEntities += [DeclarativeEntityDef] (',' superEntities += [DeclarativeEntityDef])*)? '{'
	//        ('actions:' (actions += ActionDef) (',' actions += ActionDef)*)?
	//        ('states:' (states += StateDef) WORD? (WORD'-'WORD)? ((','|'and'|'the') states += StateDef)*)?
	//        ('properties:' (properties += PropertyDef) WORD? (WORD'-'WORD)? ((','|'and'|'the') properties += PropertyDef)*)?
	//    '}'
	//;
	public DeclarativeEntityDefElements getDeclarativeEntityDefAccess() {
		return pDeclarativeEntityDef;
	}
	
	public ParserRule getDeclarativeEntityDefRule() {
		return getDeclarativeEntityDefAccess().getRule();
	}
	
	//ImperativeEntityDef:
	//    'imperative' 'entity' name = (ID | STRING) ('-'WORD)? ('is' superEntities += [ImperativeEntityDef] (',' superEntities += [ImperativeEntityDef])*)? '{'
	//        ('actions:' (actions += ImperativeActionDef) (',' actions += ImperativeActionDef)*)?
	//        ('states:' (states += ImperativeStateDef) WORD? (WORD'-'WORD)? ((','|'and'|'the') states += ImperativeStateDef)*)?
	//        ('properties:' (properties += ImperativePropertyDef) WORD? (WORD'-'WORD)? ((','|'and'|'the') properties += ImperativePropertyDef)*)?
	//    '}'
	//;
	public ImperativeEntityDefElements getImperativeEntityDefAccess() {
		return pImperativeEntityDef;
	}
	
	public ParserRule getImperativeEntityDefRule() {
		return getImperativeEntityDefAccess().getRule();
	}
	
	//ImperativeActionDef:
	//    name = WORD WORD?
	//;
	public ImperativeActionDefElements getImperativeActionDefAccess() {
		return pImperativeActionDef;
	}
	
	public ParserRule getImperativeActionDefRule() {
		return getImperativeActionDefAccess().getRule();
	}
	
	//ActionDef:
	//    name = WORD WORD?
	//;
	public ActionDefElements getActionDefAccess() {
		return pActionDef;
	}
	
	public ParserRule getActionDefRule() {
		return getActionDefAccess().getRule();
	}
	
	//PREP: ('on' | 'in' | 'from' | 'to' | 'into' | 'for' | 'with');
	public PREPElements getPREPAccess() {
		return pPREP;
	}
	
	public ParserRule getPREPRule() {
		return getPREPAccess().getRule();
	}
	
	//ADVERB: ('linearly');
	public ADVERBElements getADVERBAccess() {
		return pADVERB;
	}
	
	public ParserRule getADVERBRule() {
		return getADVERBAccess().getRule();
	}
	
	//WORD: ID;
	public WORDElements getWORDAccess() {
		return pWORD;
	}
	
	public ParserRule getWORDRule() {
		return getWORDAccess().getRule();
	}
	
	//StateDef: postive = StateName PREP? ('/' negative = StateName)?;
	public StateDefElements getStateDefAccess() {
		return pStateDef;
	}
	
	public ParserRule getStateDefRule() {
		return getStateDefAccess().getRule();
	}
	
	//StateName: name = WORD ( ('and' name2 = WORD) | ('off' name3 = WORD))?;
	public StateNameElements getStateNameAccess() {
		return pStateName;
	}
	
	public ParserRule getStateNameRule() {
		return getStateNameAccess().getRule();
	}
	
	////StateName: name = (WORD) ('and'|'off')? (WORD)?;
	//PropertyDef: name = WORD (plural ?= '*')?;
	public PropertyDefElements getPropertyDefAccess() {
		return pPropertyDef;
	}
	
	public ParserRule getPropertyDefRule() {
		return getPropertyDefAccess().getRule();
	}
	
	//ImperativeStateDef: postive = ImperativeStateName PREP? ('/' negative = ImperativeStateName)?;
	public ImperativeStateDefElements getImperativeStateDefAccess() {
		return pImperativeStateDef;
	}
	
	public ParserRule getImperativeStateDefRule() {
		return getImperativeStateDefAccess().getRule();
	}
	
	//ImperativeStateName: impStatName = StateName;
	public ImperativeStateNameElements getImperativeStateNameAccess() {
		return pImperativeStateName;
	}
	
	public ParserRule getImperativeStateNameRule() {
		return getImperativeStateNameAccess().getRule();
	}
	
	//ImperativePropertyDef: name = WORD (plural ?= '*')?;
	public ImperativePropertyDefElements getImperativePropertyDefAccess() {
		return pImperativePropertyDef;
	}
	
	public ParserRule getImperativePropertyDefRule() {
		return getImperativePropertyDefAccess().getRule();
	}
	
	//ID_OR_STRING: (ID | STRING);
	public ID_OR_STRINGElements getID_OR_STRINGAccess() {
		return pID_OR_STRING;
	}
	
	public ParserRule getID_OR_STRINGRule() {
		return getID_OR_STRINGAccess().getRule();
	}
	
	//ImperativeScenario:
	//   'which' 'means'
	//   'Given' preState = ImperativeScenarioState
	//   'When'  action = ImperativeScenarioAction
	//   'Then'  postState = ImperativeScenarioState
	//;
	public ImperativeScenarioElements getImperativeScenarioAccess() {
		return pImperativeScenario;
	}
	
	public ParserRule getImperativeScenarioRule() {
		return getImperativeScenarioAccess().getRule();
	}
	
	//Scenario:
	//       'Scenario:' name = ID_OR_STRING ('out'|'off'|'on'|'in'|'-'|'the'|'to' 'the'|'to')? WORD? ('off'|'on'|'in'|'-'|'the')? WORD? ('on'|'in'|'-'|'the')? WORD? ('in'|'-'|'the')? WORD?
	//       (('Given''the'|'Given''I'|'Given') ('do' 'not')? ((OPTION)) | ('Given' ('the'|'all' 'the'|'I')? ('do' 'not')? preStateE = DeclarativeScenarioState))
	//       imperative1 = ImperativeScenario?
	//       //'Given' preState = ImperativeScenarioState
	//       //'When' action = ImperativeScenarioAction
	//       //'Then' postState = ImperativeScenarioState
	//       ((('When' 'I'|'When' 'the'|'When'|'And''I') ('do' 'not')? ((OPTION))) | ((('When' 'I') |('When' 'I' 'do' 'not')| ('When' 'the') | ('Given' 'I') | ('When')) actionE = DeclarativeScenarioAction ))
	//       imperative2 = ImperativeScenario?
	//       //'Given' preState1 = ImperativeScenarioState
	//       //'When' action1 = ImperativeScenarioAction
	//       //'Then' postState1 = ImperativeScenarioState
	//       (('Then''the'|'Then''I'|'Then') ('do' 'not')? ((OPTION)) | ('Then' ('the'|'all' 'the'|'I')? ('do' 'not')? preStateE1 = DeclarativeScenarioState))
	//       imperative3 = ImperativeScenario?
	//       //'Given' preState2 = ImperativeScenarioState
	//       //'When' action2 = ImperativeScenarioAction
	//       //'Then' postState2 = ImperativeScenarioState
	//;
	public ScenarioElements getScenarioAccess() {
		return pScenario;
	}
	
	public ParserRule getScenarioRule() {
		return getScenarioAccess().getRule();
	}
	
	//DeclarativeScenarioState:
	//    //I commented the following and uncommented the following sentence
	//    //states = DeclarativeStatePhrase
	//    states +=DeclarativeStatePhrase('And' states += DeclarativeStatePhrase)*
	//;
	public DeclarativeScenarioStateElements getDeclarativeScenarioStateAccess() {
		return pDeclarativeScenarioState;
	}
	
	public ParserRule getDeclarativeScenarioStateRule() {
		return getDeclarativeScenarioStateAccess().getRule();
	}
	
	//ImperativeScenarioState:
	//    states += ImperativeStatePhrase ('And' states += ImperativeStatePhrase)*
	//;
	public ImperativeScenarioStateElements getImperativeScenarioStateAccess() {
		return pImperativeScenarioState;
	}
	
	public ParserRule getImperativeScenarioStateRule() {
		return getImperativeScenarioStateAccess().getRule();
	}
	
	//DeclarativeScenarioAction:
	//    //actions = DeclarativeActionPhrase
	//    actions += DeclarativeActionPhrase ('And' actions += DeclarativeActionPhrase)*
	//;
	public DeclarativeScenarioActionElements getDeclarativeScenarioActionAccess() {
		return pDeclarativeScenarioAction;
	}
	
	public ParserRule getDeclarativeScenarioActionRule() {
		return getDeclarativeScenarioActionAccess().getRule();
	}
	
	//ImperativeScenarioAction:
	//    actions += ImperativeActionPhrase ('And' actions += ImperativeActionPhrase)*
	//;
	public ImperativeScenarioActionElements getImperativeScenarioActionAccess() {
		return pImperativeScenarioAction;
	}
	
	public ParserRule getImperativeScenarioActionRule() {
		return getImperativeScenarioActionAccess().getRule();
	}
	
	//DeclarativeStatePhrase:
	//    DeclarativeEntityPropertyStatePhrase | esp = DeclarativeEntityStatePhrase
	//;
	public DeclarativeStatePhraseElements getDeclarativeStatePhraseAccess() {
		return pDeclarativeStatePhrase;
	}
	
	public ParserRule getDeclarativeStatePhraseRule() {
		return getDeclarativeStatePhraseAccess().getRule();
	}
	
	//ImperativeStatePhrase:
	//    epsp = ImperativeEntityPropertyStatePhrase | esp = ImperativeEntityStatePhrase
	//;
	public ImperativeStatePhraseElements getImperativeStatePhraseAccess() {
		return pImperativeStatePhrase;
	}
	
	public ParserRule getImperativeStatePhraseRule() {
		return getImperativeStatePhraseAccess().getRule();
	}
	
	//ENTITY_IDENTITY: ('#'INT) | STRING;
	public ENTITY_IDENTITYElements getENTITY_IDENTITYAccess() {
		return pENTITY_IDENTITY;
	}
	
	public ParserRule getENTITY_IDENTITYRule() {
		return getENTITY_IDENTITYAccess().getRule();
	}
	
	//OPTION:'#'? (INT | STRING) ;
	public OPTIONElements getOPTIONAccess() {
		return pOPTION;
	}
	
	public ParserRule getOPTIONRule() {
		return getOPTIONAccess().getRule();
	}
	
	//DeclarativeEntityRef:
	//    (WORD OPTION 'for' 'the')? ('for'|'of'|'to')? (('the'|'all' 'the') entity = [DeclarativeEntityDef | WORD] name = ENTITY_IDENTITY) | (name = ENTITY_IDENTITY)
	//;
	public DeclarativeEntityRefElements getDeclarativeEntityRefAccess() {
		return pDeclarativeEntityRef;
	}
	
	public ParserRule getDeclarativeEntityRefRule() {
		return getDeclarativeEntityRefAccess().getRule();
	}
	
	//ImperativeEntityRef:
	//     'the' entity = [ImperativeEntityDef] name = STRING
	//;
	public ImperativeEntityRefElements getImperativeEntityRefAccess() {
		return pImperativeEntityRef;
	}
	
	public ParserRule getImperativeEntityRefRule() {
		return getImperativeEntityRefAccess().getRule();
	}
	
	//DeclarativeEntityStatePhrase:
	//    (property = [PropertyDef | WORD]? ('of'|'of' 'the')? OPTION? ('for'|'for' 'the')? ('of'|'of' 'the'|'for' 'the'|'for'))?
	//    entity = DeclarativeEntityRef ('is'|'are') 'not'? state = [StateName] WORD?
	//;
	public DeclarativeEntityStatePhraseElements getDeclarativeEntityStatePhraseAccess() {
		return pDeclarativeEntityStatePhrase;
	}
	
	public ParserRule getDeclarativeEntityStatePhraseRule() {
		return getDeclarativeEntityStatePhraseAccess().getRule();
	}
	
	//ImperativeEntityStatePhrase:
	//    entity = ImperativeEntityRef 'is' state = [ImperativeStateName]
	//;
	public ImperativeEntityStatePhraseElements getImperativeEntityStatePhraseAccess() {
		return pImperativeEntityStatePhrase;
	}
	
	public ParserRule getImperativeEntityStatePhraseRule() {
		return getImperativeEntityStatePhraseAccess().getRule();
	}
	
	//DeclarativeEntityPropertyStatePhrase:
	//    property = [PropertyDef | WORD]? ('of'|'of' 'the')? OPTION? ('of'|'for' |'from'|'for' 'the'|'of' 'the')  entity = DeclarativeEntityRef
	//    ((('is'|'is' 'not') value = SimpleValue WORD?) WORD? | (('are'|'are' 'not') (values += SimpleValue) WORD? | (',' values += SimpleValue)*) WORD?)
	//;
	public DeclarativeEntityPropertyStatePhraseElements getDeclarativeEntityPropertyStatePhraseAccess() {
		return pDeclarativeEntityPropertyStatePhrase;
	}
	
	public ParserRule getDeclarativeEntityPropertyStatePhraseRule() {
		return getDeclarativeEntityPropertyStatePhraseAccess().getRule();
	}
	
	//ImperativeEntityPropertyStatePhrase:
	//     'the' property = [ImperativePropertyDef] ('of'|'for') entity = ImperativeEntityRef 'is' propertyValue = StringValue
	//;
	public ImperativeEntityPropertyStatePhraseElements getImperativeEntityPropertyStatePhraseAccess() {
		return pImperativeEntityPropertyStatePhrase;
	}
	
	public ParserRule getImperativeEntityPropertyStatePhraseRule() {
		return getImperativeEntityPropertyStatePhraseAccess().getRule();
	}
	
	////terminal UNCLOSED_STRING : '"' (!'"')* EOF;
	//SimpleValue: IntValue | StringValue | DoubleValue;
	public SimpleValueElements getSimpleValueAccess() {
		return pSimpleValue;
	}
	
	public ParserRule getSimpleValueRule() {
		return getSimpleValueAccess().getRule();
	}
	
	//StringValue:
	//    value = STRING
	//;
	public StringValueElements getStringValueAccess() {
		return pStringValue;
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}
	
	//IntValue:
	//    value = INT
	//;
	public IntValueElements getIntValueAccess() {
		return pIntValue;
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}
	
	//DoubleValue:
	//    value = DOUBLE
	//;
	public DoubleValueElements getDoubleValueAccess() {
		return pDoubleValue;
	}
	
	public ParserRule getDoubleValueRule() {
		return getDoubleValueAccess().getRule();
	}
	
	//DeclarativeActionPhrase:
	//    DeclarativeEntityAction | VerbAction
	//;
	public DeclarativeActionPhraseElements getDeclarativeActionPhraseAccess() {
		return pDeclarativeActionPhrase;
	}
	
	public ParserRule getDeclarativeActionPhraseRule() {
		return getDeclarativeActionPhraseAccess().getRule();
	}
	
	//ImperativeActionPhrase: ImperativeEntityAction;
	public ImperativeActionPhraseElements getImperativeActionPhraseAccess() {
		return pImperativeActionPhrase;
	}
	
	public ParserRule getImperativeActionPhraseRule() {
		return getImperativeActionPhraseAccess().getRule();
	}
	
	//VerbAction:
	//    action = DeclarativeActionRef 'and'? WORD? 'on'? (WORD'-'WORD)? ('for' 'the'| 'the'|'on' | 'to' 'the')? (entity = DeclarativeEntityDef)? ('on'|'off'|'in')? entity2 = DeclarativeEntityRef ('on'|'off'|'in')? ('of'|'for'|'for' 'the'|'of' 'the')? PREP? entity3 = DeclarativeEntityRef?
	//;
	public VerbActionElements getVerbActionAccess() {
		return pVerbAction;
	}
	
	public ParserRule getVerbActionRule() {
		return getVerbActionAccess().getRule();
	}
	
	////Entity Verb 'to the' Entity STRING
	//DeclarativeEntityAction:
	//    entityAction = DeclarativeEntityRef (actionDef = [ActionDef]) ('to' 'the')?(entityRef = DeclarativeEntityRef)? (propertyRef = PropertyRef)?
	//;
	public DeclarativeEntityActionElements getDeclarativeEntityActionAccess() {
		return pDeclarativeEntityAction;
	}
	
	public ParserRule getDeclarativeEntityActionRule() {
		return getDeclarativeEntityActionAccess().getRule();
	}
	
	//ImperativeEntityAction:
	//    entityAction = ImperativeEntityRef (adverb=ADVERB)? actionDef = [ImperativeActionDef] (propertyRef = ImperativePropertyRef)?
	//;
	public ImperativeEntityActionElements getImperativeEntityActionAccess() {
		return pImperativeEntityAction;
	}
	
	public ParserRule getImperativeEntityActionRule() {
		return getImperativeEntityActionAccess().getRule();
	}
	
	//PropertyRef:
	//    propertyref = 'to' property = [PropertyDef] propertyValue = StringValue ('with' properyValue2 = StringValue propery2 = [PropertyDef])?
	//;
	public PropertyRefElements getPropertyRefAccess() {
		return pPropertyRef;
	}
	
	public ParserRule getPropertyRefRule() {
		return getPropertyRefAccess().getRule();
	}
	
	//ImperativePropertyRef:
	//    propertyref = 'to' property = [ImperativePropertyDef] propertyValue = StringValue ('with' properyValue2 = StringValue propery2 = [ImperativePropertyDef])?
	//;
	public ImperativePropertyRefElements getImperativePropertyRefAccess() {
		return pImperativePropertyRef;
	}
	
	public ParserRule getImperativePropertyRefRule() {
		return getImperativePropertyRefAccess().getRule();
	}
	
	//DeclarativeActionRef: verb = [ActionDef | WORD] 'on'? (argument = SimpleValue)? (preposition = PREP)? (('the'|'on')(entity = DeclarativeEntityDef))? ;
	public DeclarativeActionRefElements getDeclarativeActionRefAccess() {
		return pDeclarativeActionRef;
	}
	
	public ParserRule getDeclarativeActionRefRule() {
		return getDeclarativeActionRefAccess().getRule();
	}
	
	//DOUBLE returns ecore::EDouble : INT'.'INT;
	public DOUBLEElements getDOUBLEAccess() {
		return pDOUBLE;
	}
	
	public ParserRule getDOUBLERule() {
		return getDOUBLEAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
