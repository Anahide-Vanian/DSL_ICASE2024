/**
 * generated by Xtext 2.32.0
 */
package dk.sdu.bdd.xtext.bddDsl.impl;

import dk.sdu.bdd.xtext.bddDsl.BddDslPackage;
import dk.sdu.bdd.xtext.bddDsl.DeclarativeEntityStatePhrase;
import dk.sdu.bdd.xtext.bddDsl.DeclarativeStatePhrase;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Declarative State Phrase</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link dk.sdu.bdd.xtext.bddDsl.impl.DeclarativeStatePhraseImpl#getEsp <em>Esp</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DeclarativeStatePhraseImpl extends MinimalEObjectImpl.Container implements DeclarativeStatePhrase
{
  /**
   * The cached value of the '{@link #getEsp() <em>Esp</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEsp()
   * @generated
   * @ordered
   */
  protected DeclarativeEntityStatePhrase esp;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DeclarativeStatePhraseImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BddDslPackage.Literals.DECLARATIVE_STATE_PHRASE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DeclarativeEntityStatePhrase getEsp()
  {
    return esp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEsp(DeclarativeEntityStatePhrase newEsp, NotificationChain msgs)
  {
    DeclarativeEntityStatePhrase oldEsp = esp;
    esp = newEsp;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BddDslPackage.DECLARATIVE_STATE_PHRASE__ESP, oldEsp, newEsp);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEsp(DeclarativeEntityStatePhrase newEsp)
  {
    if (newEsp != esp)
    {
      NotificationChain msgs = null;
      if (esp != null)
        msgs = ((InternalEObject)esp).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BddDslPackage.DECLARATIVE_STATE_PHRASE__ESP, null, msgs);
      if (newEsp != null)
        msgs = ((InternalEObject)newEsp).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BddDslPackage.DECLARATIVE_STATE_PHRASE__ESP, null, msgs);
      msgs = basicSetEsp(newEsp, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BddDslPackage.DECLARATIVE_STATE_PHRASE__ESP, newEsp, newEsp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BddDslPackage.DECLARATIVE_STATE_PHRASE__ESP:
        return basicSetEsp(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BddDslPackage.DECLARATIVE_STATE_PHRASE__ESP:
        return getEsp();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BddDslPackage.DECLARATIVE_STATE_PHRASE__ESP:
        setEsp((DeclarativeEntityStatePhrase)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BddDslPackage.DECLARATIVE_STATE_PHRASE__ESP:
        setEsp((DeclarativeEntityStatePhrase)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BddDslPackage.DECLARATIVE_STATE_PHRASE__ESP:
        return esp != null;
    }
    return super.eIsSet(featureID);
  }

} //DeclarativeStatePhraseImpl
