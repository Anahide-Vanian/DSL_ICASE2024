/*
 * generated by Xtext 2.32.0
 */
package dk.sdu.bdd.xtext.serializer;

import com.google.inject.Inject;
import dk.sdu.bdd.xtext.services.BddDslGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class BddDslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected BddDslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_ActionDef_WORDParserRuleCall_1_q;
	protected AbstractElementAlias match_DeclarativeActionRef_OnKeyword_1_q;
	protected AbstractElementAlias match_DeclarativeActionRef_OnKeyword_4_0_1_or_TheKeyword_4_0_0;
	protected AbstractElementAlias match_DeclarativeEntityAction___ToKeyword_2_0_TheKeyword_2_1__q;
	protected AbstractElementAlias match_DeclarativeEntityDef_AndKeyword_7_4_0_1_or_CommaKeyword_7_4_0_0_or_TheKeyword_7_4_0_2;
	protected AbstractElementAlias match_DeclarativeEntityDef_AndKeyword_8_4_0_1_or_CommaKeyword_8_4_0_0_or_TheKeyword_8_4_0_2;
	protected AbstractElementAlias match_DeclarativeEntityDef_WORDParserRuleCall_7_2_q;
	protected AbstractElementAlias match_DeclarativeEntityDef_WORDParserRuleCall_8_2_q;
	protected AbstractElementAlias match_DeclarativeEntityDef___HyphenMinusKeyword_3_0_WORDParserRuleCall_3_1__q;
	protected AbstractElementAlias match_DeclarativeEntityDef___WORDParserRuleCall_7_3_0_HyphenMinusKeyword_7_3_1_WORDParserRuleCall_7_3_2__q;
	protected AbstractElementAlias match_DeclarativeEntityDef___WORDParserRuleCall_8_3_0_HyphenMinusKeyword_8_3_1_WORDParserRuleCall_8_3_2__q;
	protected AbstractElementAlias match_DeclarativeEntityPropertyStatePhrase_AreKeyword_5_1_0_0_0_0_or___AreKeyword_5_1_0_0_0_1_0_NotKeyword_5_1_0_0_0_1_1__;
	protected AbstractElementAlias match_DeclarativeEntityPropertyStatePhrase_ForKeyword_3_1_or_FromKeyword_3_2_or_OfKeyword_3_0_or___ForKeyword_3_3_0_TheKeyword_3_3_1___or___OfKeyword_3_4_0_TheKeyword_3_4_1__;
	protected AbstractElementAlias match_DeclarativeEntityPropertyStatePhrase_IsKeyword_5_0_0_0_0_or___IsKeyword_5_0_0_0_1_0_NotKeyword_5_0_0_0_1_1__;
	protected AbstractElementAlias match_DeclarativeEntityPropertyStatePhrase_OPTIONParserRuleCall_2_q;
	protected AbstractElementAlias match_DeclarativeEntityPropertyStatePhrase_WORDParserRuleCall_5_0_0_2_q;
	protected AbstractElementAlias match_DeclarativeEntityPropertyStatePhrase_WORDParserRuleCall_5_0_1_q;
	protected AbstractElementAlias match_DeclarativeEntityPropertyStatePhrase_WORDParserRuleCall_5_1_0_0_2_q;
	protected AbstractElementAlias match_DeclarativeEntityPropertyStatePhrase_WORDParserRuleCall_5_1_1_q;
	protected AbstractElementAlias match_DeclarativeEntityPropertyStatePhrase___OfKeyword_1_0_or___OfKeyword_1_1_0_TheKeyword_1_1_1____q;
	protected AbstractElementAlias match_DeclarativeEntityRef_TheKeyword_0_2_0_0_or___AllKeyword_0_2_0_1_0_TheKeyword_0_2_0_1_1__;
	protected AbstractElementAlias match_DeclarativeEntityRef___ForKeyword_0_1_0_or_OfKeyword_0_1_1_or_ToKeyword_0_1_2__q;
	protected AbstractElementAlias match_DeclarativeEntityRef___WORDParserRuleCall_0_0_0_OPTIONParserRuleCall_0_0_1_ForKeyword_0_0_2_TheKeyword_0_0_3__q;
	protected AbstractElementAlias match_DeclarativeEntityStatePhrase_AreKeyword_2_1_or_IsKeyword_2_0;
	protected AbstractElementAlias match_DeclarativeEntityStatePhrase_ForKeyword_0_4_3_or_OfKeyword_0_4_0_or___ForKeyword_0_4_2_0_TheKeyword_0_4_2_1___or___OfKeyword_0_4_1_0_TheKeyword_0_4_1_1__;
	protected AbstractElementAlias match_DeclarativeEntityStatePhrase_NotKeyword_3_q;
	protected AbstractElementAlias match_DeclarativeEntityStatePhrase_OPTIONParserRuleCall_0_2_q;
	protected AbstractElementAlias match_DeclarativeEntityStatePhrase_WORDParserRuleCall_5_q;
	protected AbstractElementAlias match_DeclarativeEntityStatePhrase___ForKeyword_0_3_0_or___ForKeyword_0_3_1_0_TheKeyword_0_3_1_1____q;
	protected AbstractElementAlias match_DeclarativeEntityStatePhrase___OfKeyword_0_1_0_or___OfKeyword_0_1_1_0_TheKeyword_0_1_1_1____q;
	protected AbstractElementAlias match_DeclarativeEntityStatePhrase_____OfKeyword_0_1_0_or___OfKeyword_0_1_1_0_TheKeyword_0_1_1_1____q_OPTIONParserRuleCall_0_2_q___ForKeyword_0_3_0_or___ForKeyword_0_3_1_0_TheKeyword_0_3_1_1____q___ForKeyword_0_4_3_or_OfKeyword_0_4_0_or___ForKeyword_0_4_2_0_TheKeyword_0_4_2_1___or___OfKeyword_0_4_1_0_TheKeyword_0_4_1_1______q;
	protected AbstractElementAlias match_ImperativeActionDef_WORDParserRuleCall_1_q;
	protected AbstractElementAlias match_ImperativeEntityDef_AndKeyword_7_4_0_1_or_CommaKeyword_7_4_0_0_or_TheKeyword_7_4_0_2;
	protected AbstractElementAlias match_ImperativeEntityDef_AndKeyword_8_4_0_1_or_CommaKeyword_8_4_0_0_or_TheKeyword_8_4_0_2;
	protected AbstractElementAlias match_ImperativeEntityDef_WORDParserRuleCall_7_2_q;
	protected AbstractElementAlias match_ImperativeEntityDef_WORDParserRuleCall_8_2_q;
	protected AbstractElementAlias match_ImperativeEntityDef___HyphenMinusKeyword_3_0_WORDParserRuleCall_3_1__q;
	protected AbstractElementAlias match_ImperativeEntityDef___WORDParserRuleCall_7_3_0_HyphenMinusKeyword_7_3_1_WORDParserRuleCall_7_3_2__q;
	protected AbstractElementAlias match_ImperativeEntityDef___WORDParserRuleCall_8_3_0_HyphenMinusKeyword_8_3_1_WORDParserRuleCall_8_3_2__q;
	protected AbstractElementAlias match_ImperativeEntityPropertyStatePhrase_ForKeyword_2_1_or_OfKeyword_2_0;
	protected AbstractElementAlias match_ImperativeStateDef_PREPParserRuleCall_1_q;
	protected AbstractElementAlias match_Scenario_GivenKeyword_10_0_0_2_or___GivenKeyword_10_0_0_0_0_TheKeyword_10_0_0_0_1___or___GivenKeyword_10_0_0_1_0_IKeyword_10_0_0_1_1__;
	protected AbstractElementAlias match_Scenario_ThenKeyword_14_0_0_2_or___ThenKeyword_14_0_0_0_0_TheKeyword_14_0_0_0_1___or___ThenKeyword_14_0_0_1_0_IKeyword_14_0_0_1_1__;
	protected AbstractElementAlias match_Scenario_WORDParserRuleCall_3_q;
	protected AbstractElementAlias match_Scenario_WORDParserRuleCall_5_q;
	protected AbstractElementAlias match_Scenario_WORDParserRuleCall_7_q;
	protected AbstractElementAlias match_Scenario_WORDParserRuleCall_9_q;
	protected AbstractElementAlias match_Scenario_WhenKeyword_12_0_0_2_or___AndKeyword_12_0_0_3_0_IKeyword_12_0_0_3_1___or___WhenKeyword_12_0_0_0_0_IKeyword_12_0_0_0_1___or___WhenKeyword_12_0_0_1_0_TheKeyword_12_0_0_1_1__;
	protected AbstractElementAlias match_Scenario_WhenKeyword_12_1_0_4_or___GivenKeyword_12_1_0_3_0_IKeyword_12_1_0_3_1___or___WhenKeyword_12_1_0_0_0_IKeyword_12_1_0_0_1___or___WhenKeyword_12_1_0_1_0_IKeyword_12_1_0_1_1_DoKeyword_12_1_0_1_2_NotKeyword_12_1_0_1_3___or___WhenKeyword_12_1_0_2_0_TheKeyword_12_1_0_2_1__;
	protected AbstractElementAlias match_Scenario___DoKeyword_10_0_1_0_NotKeyword_10_0_1_1__q;
	protected AbstractElementAlias match_Scenario___DoKeyword_10_1_2_0_NotKeyword_10_1_2_1__q;
	protected AbstractElementAlias match_Scenario___DoKeyword_12_0_1_0_NotKeyword_12_0_1_1__q;
	protected AbstractElementAlias match_Scenario___DoKeyword_14_0_1_0_NotKeyword_14_0_1_1__q;
	protected AbstractElementAlias match_Scenario___DoKeyword_14_1_2_0_NotKeyword_14_1_2_1__q;
	protected AbstractElementAlias match_Scenario___HyphenMinusKeyword_2_4_or_InKeyword_2_3_or_OffKeyword_2_1_or_OnKeyword_2_2_or_OutKeyword_2_0_or_TheKeyword_2_5_or_ToKeyword_2_7_or___ToKeyword_2_6_0_TheKeyword_2_6_1____q;
	protected AbstractElementAlias match_Scenario___HyphenMinusKeyword_4_3_or_InKeyword_4_2_or_OffKeyword_4_0_or_OnKeyword_4_1_or_TheKeyword_4_4__q;
	protected AbstractElementAlias match_Scenario___HyphenMinusKeyword_6_2_or_InKeyword_6_1_or_OnKeyword_6_0_or_TheKeyword_6_3__q;
	protected AbstractElementAlias match_Scenario___HyphenMinusKeyword_8_1_or_InKeyword_8_0_or_TheKeyword_8_2__q;
	protected AbstractElementAlias match_Scenario___IKeyword_10_1_1_2_or_TheKeyword_10_1_1_0_or___AllKeyword_10_1_1_1_0_TheKeyword_10_1_1_1_1____q;
	protected AbstractElementAlias match_Scenario___IKeyword_14_1_1_2_or_TheKeyword_14_1_1_0_or___AllKeyword_14_1_1_1_0_TheKeyword_14_1_1_1_1____q;
	protected AbstractElementAlias match_StateDef_PREPParserRuleCall_1_q;
	protected AbstractElementAlias match_VerbAction_AndKeyword_1_q;
	protected AbstractElementAlias match_VerbAction_OnKeyword_3_q;
	protected AbstractElementAlias match_VerbAction_PREPParserRuleCall_11_q;
	protected AbstractElementAlias match_VerbAction_WORDParserRuleCall_2_q;
	protected AbstractElementAlias match_VerbAction___ForKeyword_10_1_or_OfKeyword_10_0_or___ForKeyword_10_2_0_TheKeyword_10_2_1___or___OfKeyword_10_3_0_TheKeyword_10_3_1____q;
	protected AbstractElementAlias match_VerbAction___InKeyword_7_2_or_OffKeyword_7_1_or_OnKeyword_7_0__q;
	protected AbstractElementAlias match_VerbAction___InKeyword_9_2_or_OffKeyword_9_1_or_OnKeyword_9_0__q;
	protected AbstractElementAlias match_VerbAction___OnKeyword_5_2_or_TheKeyword_5_1_or___ForKeyword_5_0_0_TheKeyword_5_0_1___or___ToKeyword_5_3_0_TheKeyword_5_3_1____q;
	protected AbstractElementAlias match_VerbAction___WORDParserRuleCall_4_0_HyphenMinusKeyword_4_1_WORDParserRuleCall_4_2__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (BddDslGrammarAccess) access;
		init0();
		init1();
	}
	
	private void init0() {
		match_ActionDef_WORDParserRuleCall_1_q = new TokenAlias(false, true, grammarAccess.getActionDefAccess().getWORDParserRuleCall_1());
		match_DeclarativeActionRef_OnKeyword_1_q = new TokenAlias(false, true, grammarAccess.getDeclarativeActionRefAccess().getOnKeyword_1());
		match_DeclarativeActionRef_OnKeyword_4_0_1_or_TheKeyword_4_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getDeclarativeActionRefAccess().getOnKeyword_4_0_1()), new TokenAlias(false, false, grammarAccess.getDeclarativeActionRefAccess().getTheKeyword_4_0_0()));
		match_DeclarativeEntityAction___ToKeyword_2_0_TheKeyword_2_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getDeclarativeEntityActionAccess().getToKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getDeclarativeEntityActionAccess().getTheKeyword_2_1()));
		match_DeclarativeEntityDef_AndKeyword_7_4_0_1_or_CommaKeyword_7_4_0_0_or_TheKeyword_7_4_0_2 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getDeclarativeEntityDefAccess().getAndKeyword_7_4_0_1()), new TokenAlias(false, false, grammarAccess.getDeclarativeEntityDefAccess().getCommaKeyword_7_4_0_0()), new TokenAlias(false, false, grammarAccess.getDeclarativeEntityDefAccess().getTheKeyword_7_4_0_2()));
		match_DeclarativeEntityDef_AndKeyword_8_4_0_1_or_CommaKeyword_8_4_0_0_or_TheKeyword_8_4_0_2 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getDeclarativeEntityDefAccess().getAndKeyword_8_4_0_1()), new TokenAlias(false, false, grammarAccess.getDeclarativeEntityDefAccess().getCommaKeyword_8_4_0_0()), new TokenAlias(false, false, grammarAccess.getDeclarativeEntityDefAccess().getTheKeyword_8_4_0_2()));
		match_DeclarativeEntityDef_WORDParserRuleCall_7_2_q = new TokenAlias(false, true, grammarAccess.getDeclarativeEntityDefAccess().getWORDParserRuleCall_7_2());
		match_DeclarativeEntityDef_WORDParserRuleCall_8_2_q = new TokenAlias(false, true, grammarAccess.getDeclarativeEntityDefAccess().getWORDParserRuleCall_8_2());
		match_DeclarativeEntityDef___HyphenMinusKeyword_3_0_WORDParserRuleCall_3_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getDeclarativeEntityDefAccess().getHyphenMinusKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getDeclarativeEntityDefAccess().getWORDParserRuleCall_3_1()));
		match_DeclarativeEntityDef___WORDParserRuleCall_7_3_0_HyphenMinusKeyword_7_3_1_WORDParserRuleCall_7_3_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getDeclarativeEntityDefAccess().getWORDParserRuleCall_7_3_0()), new TokenAlias(false, false, grammarAccess.getDeclarativeEntityDefAccess().getHyphenMinusKeyword_7_3_1()), new TokenAlias(false, false, grammarAccess.getDeclarativeEntityDefAccess().getWORDParserRuleCall_7_3_2()));
		match_DeclarativeEntityDef___WORDParserRuleCall_8_3_0_HyphenMinusKeyword_8_3_1_WORDParserRuleCall_8_3_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getDeclarativeEntityDefAccess().getWORDParserRuleCall_8_3_0()), new TokenAlias(false, false, grammarAccess.getDeclarativeEntityDefAccess().getHyphenMinusKeyword_8_3_1()), new TokenAlias(false, false, grammarAccess.getDeclarativeEntityDefAccess().getWORDParserRuleCall_8_3_2()));
		match_DeclarativeEntityPropertyStatePhrase_AreKeyword_5_1_0_0_0_0_or___AreKeyword_5_1_0_0_0_1_0_NotKeyword_5_1_0_0_0_1_1__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getDeclarativeEntityPropertyStatePhraseAccess().getAreKeyword_5_1_0_0_0_1_0()), new TokenAlias(false, false, grammarAccess.getDeclarativeEntityPropertyStatePhraseAccess().getNotKeyword_5_1_0_0_0_1_1())), new TokenAlias(false, false, grammarAccess.getDeclarativeEntityPropertyStatePhraseAccess().getAreKeyword_5_1_0_0_0_0()));
		match_DeclarativeEntityPropertyStatePhrase_ForKeyword_3_1_or_FromKeyword_3_2_or_OfKeyword_3_0_or___ForKeyword_3_3_0_TheKeyword_3_3_1___or___OfKeyword_3_4_0_TheKeyword_3_4_1__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getDeclarativeEntityPropertyStatePhraseAccess().getForKeyword_3_3_0()), new TokenAlias(false, false, grammarAccess.getDeclarativeEntityPropertyStatePhraseAccess().getTheKeyword_3_3_1())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getDeclarativeEntityPropertyStatePhraseAccess().getOfKeyword_3_4_0()), new TokenAlias(false, false, grammarAccess.getDeclarativeEntityPropertyStatePhraseAccess().getTheKeyword_3_4_1())), new TokenAlias(false, false, grammarAccess.getDeclarativeEntityPropertyStatePhraseAccess().getForKeyword_3_1()), new TokenAlias(false, false, grammarAccess.getDeclarativeEntityPropertyStatePhraseAccess().getFromKeyword_3_2()), new TokenAlias(false, false, grammarAccess.getDeclarativeEntityPropertyStatePhraseAccess().getOfKeyword_3_0()));
		match_DeclarativeEntityPropertyStatePhrase_IsKeyword_5_0_0_0_0_or___IsKeyword_5_0_0_0_1_0_NotKeyword_5_0_0_0_1_1__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getDeclarativeEntityPropertyStatePhraseAccess().getIsKeyword_5_0_0_0_1_0()), new TokenAlias(false, false, grammarAccess.getDeclarativeEntityPropertyStatePhraseAccess().getNotKeyword_5_0_0_0_1_1())), new TokenAlias(false, false, grammarAccess.getDeclarativeEntityPropertyStatePhraseAccess().getIsKeyword_5_0_0_0_0()));
		match_DeclarativeEntityPropertyStatePhrase_OPTIONParserRuleCall_2_q = new TokenAlias(false, true, grammarAccess.getDeclarativeEntityPropertyStatePhraseAccess().getOPTIONParserRuleCall_2());
		match_DeclarativeEntityPropertyStatePhrase_WORDParserRuleCall_5_0_0_2_q = new TokenAlias(false, true, grammarAccess.getDeclarativeEntityPropertyStatePhraseAccess().getWORDParserRuleCall_5_0_0_2());
		match_DeclarativeEntityPropertyStatePhrase_WORDParserRuleCall_5_0_1_q = new TokenAlias(false, true, grammarAccess.getDeclarativeEntityPropertyStatePhraseAccess().getWORDParserRuleCall_5_0_1());
		match_DeclarativeEntityPropertyStatePhrase_WORDParserRuleCall_5_1_0_0_2_q = new TokenAlias(false, true, grammarAccess.getDeclarativeEntityPropertyStatePhraseAccess().getWORDParserRuleCall_5_1_0_0_2());
		match_DeclarativeEntityPropertyStatePhrase_WORDParserRuleCall_5_1_1_q = new TokenAlias(false, true, grammarAccess.getDeclarativeEntityPropertyStatePhraseAccess().getWORDParserRuleCall_5_1_1());
		match_DeclarativeEntityPropertyStatePhrase___OfKeyword_1_0_or___OfKeyword_1_1_0_TheKeyword_1_1_1____q = new AlternativeAlias(false, true, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getDeclarativeEntityPropertyStatePhraseAccess().getOfKeyword_1_1_0()), new TokenAlias(false, false, grammarAccess.getDeclarativeEntityPropertyStatePhraseAccess().getTheKeyword_1_1_1())), new TokenAlias(false, false, grammarAccess.getDeclarativeEntityPropertyStatePhraseAccess().getOfKeyword_1_0()));
		match_DeclarativeEntityRef_TheKeyword_0_2_0_0_or___AllKeyword_0_2_0_1_0_TheKeyword_0_2_0_1_1__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getDeclarativeEntityRefAccess().getAllKeyword_0_2_0_1_0()), new TokenAlias(false, false, grammarAccess.getDeclarativeEntityRefAccess().getTheKeyword_0_2_0_1_1())), new TokenAlias(false, false, grammarAccess.getDeclarativeEntityRefAccess().getTheKeyword_0_2_0_0()));
		match_DeclarativeEntityRef___ForKeyword_0_1_0_or_OfKeyword_0_1_1_or_ToKeyword_0_1_2__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getDeclarativeEntityRefAccess().getForKeyword_0_1_0()), new TokenAlias(false, false, grammarAccess.getDeclarativeEntityRefAccess().getOfKeyword_0_1_1()), new TokenAlias(false, false, grammarAccess.getDeclarativeEntityRefAccess().getToKeyword_0_1_2()));
		match_DeclarativeEntityRef___WORDParserRuleCall_0_0_0_OPTIONParserRuleCall_0_0_1_ForKeyword_0_0_2_TheKeyword_0_0_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getDeclarativeEntityRefAccess().getWORDParserRuleCall_0_0_0()), new TokenAlias(false, false, grammarAccess.getDeclarativeEntityRefAccess().getOPTIONParserRuleCall_0_0_1()), new TokenAlias(false, false, grammarAccess.getDeclarativeEntityRefAccess().getForKeyword_0_0_2()), new TokenAlias(false, false, grammarAccess.getDeclarativeEntityRefAccess().getTheKeyword_0_0_3()));
		match_DeclarativeEntityStatePhrase_AreKeyword_2_1_or_IsKeyword_2_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getDeclarativeEntityStatePhraseAccess().getAreKeyword_2_1()), new TokenAlias(false, false, grammarAccess.getDeclarativeEntityStatePhraseAccess().getIsKeyword_2_0()));
		match_DeclarativeEntityStatePhrase_ForKeyword_0_4_3_or_OfKeyword_0_4_0_or___ForKeyword_0_4_2_0_TheKeyword_0_4_2_1___or___OfKeyword_0_4_1_0_TheKeyword_0_4_1_1__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getDeclarativeEntityStatePhraseAccess().getForKeyword_0_4_2_0()), new TokenAlias(false, false, grammarAccess.getDeclarativeEntityStatePhraseAccess().getTheKeyword_0_4_2_1())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getDeclarativeEntityStatePhraseAccess().getOfKeyword_0_4_1_0()), new TokenAlias(false, false, grammarAccess.getDeclarativeEntityStatePhraseAccess().getTheKeyword_0_4_1_1())), new TokenAlias(false, false, grammarAccess.getDeclarativeEntityStatePhraseAccess().getForKeyword_0_4_3()), new TokenAlias(false, false, grammarAccess.getDeclarativeEntityStatePhraseAccess().getOfKeyword_0_4_0()));
		match_DeclarativeEntityStatePhrase_NotKeyword_3_q = new TokenAlias(false, true, grammarAccess.getDeclarativeEntityStatePhraseAccess().getNotKeyword_3());
		match_DeclarativeEntityStatePhrase_OPTIONParserRuleCall_0_2_q = new TokenAlias(false, true, grammarAccess.getDeclarativeEntityStatePhraseAccess().getOPTIONParserRuleCall_0_2());
		match_DeclarativeEntityStatePhrase_WORDParserRuleCall_5_q = new TokenAlias(false, true, grammarAccess.getDeclarativeEntityStatePhraseAccess().getWORDParserRuleCall_5());
		match_DeclarativeEntityStatePhrase___ForKeyword_0_3_0_or___ForKeyword_0_3_1_0_TheKeyword_0_3_1_1____q = new AlternativeAlias(false, true, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getDeclarativeEntityStatePhraseAccess().getForKeyword_0_3_1_0()), new TokenAlias(false, false, grammarAccess.getDeclarativeEntityStatePhraseAccess().getTheKeyword_0_3_1_1())), new TokenAlias(false, false, grammarAccess.getDeclarativeEntityStatePhraseAccess().getForKeyword_0_3_0()));
		match_DeclarativeEntityStatePhrase___OfKeyword_0_1_0_or___OfKeyword_0_1_1_0_TheKeyword_0_1_1_1____q = new AlternativeAlias(false, true, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getDeclarativeEntityStatePhraseAccess().getOfKeyword_0_1_1_0()), new TokenAlias(false, false, grammarAccess.getDeclarativeEntityStatePhraseAccess().getTheKeyword_0_1_1_1())), new TokenAlias(false, false, grammarAccess.getDeclarativeEntityStatePhraseAccess().getOfKeyword_0_1_0()));
		match_DeclarativeEntityStatePhrase_____OfKeyword_0_1_0_or___OfKeyword_0_1_1_0_TheKeyword_0_1_1_1____q_OPTIONParserRuleCall_0_2_q___ForKeyword_0_3_0_or___ForKeyword_0_3_1_0_TheKeyword_0_3_1_1____q___ForKeyword_0_4_3_or_OfKeyword_0_4_0_or___ForKeyword_0_4_2_0_TheKeyword_0_4_2_1___or___OfKeyword_0_4_1_0_TheKeyword_0_4_1_1______q = new GroupAlias(false, true, new AlternativeAlias(false, true, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getDeclarativeEntityStatePhraseAccess().getOfKeyword_0_1_1_0()), new TokenAlias(false, false, grammarAccess.getDeclarativeEntityStatePhraseAccess().getTheKeyword_0_1_1_1())), new TokenAlias(false, false, grammarAccess.getDeclarativeEntityStatePhraseAccess().getOfKeyword_0_1_0())), new TokenAlias(false, true, grammarAccess.getDeclarativeEntityStatePhraseAccess().getOPTIONParserRuleCall_0_2()), new AlternativeAlias(false, true, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getDeclarativeEntityStatePhraseAccess().getForKeyword_0_3_1_0()), new TokenAlias(false, false, grammarAccess.getDeclarativeEntityStatePhraseAccess().getTheKeyword_0_3_1_1())), new TokenAlias(false, false, grammarAccess.getDeclarativeEntityStatePhraseAccess().getForKeyword_0_3_0())), new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getDeclarativeEntityStatePhraseAccess().getForKeyword_0_4_2_0()), new TokenAlias(false, false, grammarAccess.getDeclarativeEntityStatePhraseAccess().getTheKeyword_0_4_2_1())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getDeclarativeEntityStatePhraseAccess().getOfKeyword_0_4_1_0()), new TokenAlias(false, false, grammarAccess.getDeclarativeEntityStatePhraseAccess().getTheKeyword_0_4_1_1())), new TokenAlias(false, false, grammarAccess.getDeclarativeEntityStatePhraseAccess().getForKeyword_0_4_3()), new TokenAlias(false, false, grammarAccess.getDeclarativeEntityStatePhraseAccess().getOfKeyword_0_4_0())));
		match_ImperativeActionDef_WORDParserRuleCall_1_q = new TokenAlias(false, true, grammarAccess.getImperativeActionDefAccess().getWORDParserRuleCall_1());
		match_ImperativeEntityDef_AndKeyword_7_4_0_1_or_CommaKeyword_7_4_0_0_or_TheKeyword_7_4_0_2 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getImperativeEntityDefAccess().getAndKeyword_7_4_0_1()), new TokenAlias(false, false, grammarAccess.getImperativeEntityDefAccess().getCommaKeyword_7_4_0_0()), new TokenAlias(false, false, grammarAccess.getImperativeEntityDefAccess().getTheKeyword_7_4_0_2()));
		match_ImperativeEntityDef_AndKeyword_8_4_0_1_or_CommaKeyword_8_4_0_0_or_TheKeyword_8_4_0_2 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getImperativeEntityDefAccess().getAndKeyword_8_4_0_1()), new TokenAlias(false, false, grammarAccess.getImperativeEntityDefAccess().getCommaKeyword_8_4_0_0()), new TokenAlias(false, false, grammarAccess.getImperativeEntityDefAccess().getTheKeyword_8_4_0_2()));
		match_ImperativeEntityDef_WORDParserRuleCall_7_2_q = new TokenAlias(false, true, grammarAccess.getImperativeEntityDefAccess().getWORDParserRuleCall_7_2());
		match_ImperativeEntityDef_WORDParserRuleCall_8_2_q = new TokenAlias(false, true, grammarAccess.getImperativeEntityDefAccess().getWORDParserRuleCall_8_2());
		match_ImperativeEntityDef___HyphenMinusKeyword_3_0_WORDParserRuleCall_3_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getImperativeEntityDefAccess().getHyphenMinusKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getImperativeEntityDefAccess().getWORDParserRuleCall_3_1()));
		match_ImperativeEntityDef___WORDParserRuleCall_7_3_0_HyphenMinusKeyword_7_3_1_WORDParserRuleCall_7_3_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getImperativeEntityDefAccess().getWORDParserRuleCall_7_3_0()), new TokenAlias(false, false, grammarAccess.getImperativeEntityDefAccess().getHyphenMinusKeyword_7_3_1()), new TokenAlias(false, false, grammarAccess.getImperativeEntityDefAccess().getWORDParserRuleCall_7_3_2()));
		match_ImperativeEntityDef___WORDParserRuleCall_8_3_0_HyphenMinusKeyword_8_3_1_WORDParserRuleCall_8_3_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getImperativeEntityDefAccess().getWORDParserRuleCall_8_3_0()), new TokenAlias(false, false, grammarAccess.getImperativeEntityDefAccess().getHyphenMinusKeyword_8_3_1()), new TokenAlias(false, false, grammarAccess.getImperativeEntityDefAccess().getWORDParserRuleCall_8_3_2()));
		match_ImperativeEntityPropertyStatePhrase_ForKeyword_2_1_or_OfKeyword_2_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getImperativeEntityPropertyStatePhraseAccess().getForKeyword_2_1()), new TokenAlias(false, false, grammarAccess.getImperativeEntityPropertyStatePhraseAccess().getOfKeyword_2_0()));
		match_ImperativeStateDef_PREPParserRuleCall_1_q = new TokenAlias(false, true, grammarAccess.getImperativeStateDefAccess().getPREPParserRuleCall_1());
		match_Scenario_GivenKeyword_10_0_0_2_or___GivenKeyword_10_0_0_0_0_TheKeyword_10_0_0_0_1___or___GivenKeyword_10_0_0_1_0_IKeyword_10_0_0_1_1__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getScenarioAccess().getGivenKeyword_10_0_0_0_0()), new TokenAlias(false, false, grammarAccess.getScenarioAccess().getTheKeyword_10_0_0_0_1())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getScenarioAccess().getGivenKeyword_10_0_0_1_0()), new TokenAlias(false, false, grammarAccess.getScenarioAccess().getIKeyword_10_0_0_1_1())), new TokenAlias(false, false, grammarAccess.getScenarioAccess().getGivenKeyword_10_0_0_2()));
		match_Scenario_ThenKeyword_14_0_0_2_or___ThenKeyword_14_0_0_0_0_TheKeyword_14_0_0_0_1___or___ThenKeyword_14_0_0_1_0_IKeyword_14_0_0_1_1__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getScenarioAccess().getThenKeyword_14_0_0_0_0()), new TokenAlias(false, false, grammarAccess.getScenarioAccess().getTheKeyword_14_0_0_0_1())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getScenarioAccess().getThenKeyword_14_0_0_1_0()), new TokenAlias(false, false, grammarAccess.getScenarioAccess().getIKeyword_14_0_0_1_1())), new TokenAlias(false, false, grammarAccess.getScenarioAccess().getThenKeyword_14_0_0_2()));
		match_Scenario_WORDParserRuleCall_3_q = new TokenAlias(false, true, grammarAccess.getScenarioAccess().getWORDParserRuleCall_3());
		match_Scenario_WORDParserRuleCall_5_q = new TokenAlias(false, true, grammarAccess.getScenarioAccess().getWORDParserRuleCall_5());
		match_Scenario_WORDParserRuleCall_7_q = new TokenAlias(false, true, grammarAccess.getScenarioAccess().getWORDParserRuleCall_7());
		match_Scenario_WORDParserRuleCall_9_q = new TokenAlias(false, true, grammarAccess.getScenarioAccess().getWORDParserRuleCall_9());
		match_Scenario_WhenKeyword_12_0_0_2_or___AndKeyword_12_0_0_3_0_IKeyword_12_0_0_3_1___or___WhenKeyword_12_0_0_0_0_IKeyword_12_0_0_0_1___or___WhenKeyword_12_0_0_1_0_TheKeyword_12_0_0_1_1__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getScenarioAccess().getAndKeyword_12_0_0_3_0()), new TokenAlias(false, false, grammarAccess.getScenarioAccess().getIKeyword_12_0_0_3_1())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getScenarioAccess().getWhenKeyword_12_0_0_0_0()), new TokenAlias(false, false, grammarAccess.getScenarioAccess().getIKeyword_12_0_0_0_1())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getScenarioAccess().getWhenKeyword_12_0_0_1_0()), new TokenAlias(false, false, grammarAccess.getScenarioAccess().getTheKeyword_12_0_0_1_1())), new TokenAlias(false, false, grammarAccess.getScenarioAccess().getWhenKeyword_12_0_0_2()));
		match_Scenario_WhenKeyword_12_1_0_4_or___GivenKeyword_12_1_0_3_0_IKeyword_12_1_0_3_1___or___WhenKeyword_12_1_0_0_0_IKeyword_12_1_0_0_1___or___WhenKeyword_12_1_0_1_0_IKeyword_12_1_0_1_1_DoKeyword_12_1_0_1_2_NotKeyword_12_1_0_1_3___or___WhenKeyword_12_1_0_2_0_TheKeyword_12_1_0_2_1__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getScenarioAccess().getGivenKeyword_12_1_0_3_0()), new TokenAlias(false, false, grammarAccess.getScenarioAccess().getIKeyword_12_1_0_3_1())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getScenarioAccess().getWhenKeyword_12_1_0_0_0()), new TokenAlias(false, false, grammarAccess.getScenarioAccess().getIKeyword_12_1_0_0_1())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getScenarioAccess().getWhenKeyword_12_1_0_1_0()), new TokenAlias(false, false, grammarAccess.getScenarioAccess().getIKeyword_12_1_0_1_1()), new TokenAlias(false, false, grammarAccess.getScenarioAccess().getDoKeyword_12_1_0_1_2()), new TokenAlias(false, false, grammarAccess.getScenarioAccess().getNotKeyword_12_1_0_1_3())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getScenarioAccess().getWhenKeyword_12_1_0_2_0()), new TokenAlias(false, false, grammarAccess.getScenarioAccess().getTheKeyword_12_1_0_2_1())), new TokenAlias(false, false, grammarAccess.getScenarioAccess().getWhenKeyword_12_1_0_4()));
		match_Scenario___DoKeyword_10_0_1_0_NotKeyword_10_0_1_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getScenarioAccess().getDoKeyword_10_0_1_0()), new TokenAlias(false, false, grammarAccess.getScenarioAccess().getNotKeyword_10_0_1_1()));
		match_Scenario___DoKeyword_10_1_2_0_NotKeyword_10_1_2_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getScenarioAccess().getDoKeyword_10_1_2_0()), new TokenAlias(false, false, grammarAccess.getScenarioAccess().getNotKeyword_10_1_2_1()));
		match_Scenario___DoKeyword_12_0_1_0_NotKeyword_12_0_1_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getScenarioAccess().getDoKeyword_12_0_1_0()), new TokenAlias(false, false, grammarAccess.getScenarioAccess().getNotKeyword_12_0_1_1()));
		match_Scenario___DoKeyword_14_0_1_0_NotKeyword_14_0_1_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getScenarioAccess().getDoKeyword_14_0_1_0()), new TokenAlias(false, false, grammarAccess.getScenarioAccess().getNotKeyword_14_0_1_1()));
		match_Scenario___DoKeyword_14_1_2_0_NotKeyword_14_1_2_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getScenarioAccess().getDoKeyword_14_1_2_0()), new TokenAlias(false, false, grammarAccess.getScenarioAccess().getNotKeyword_14_1_2_1()));
		match_Scenario___HyphenMinusKeyword_2_4_or_InKeyword_2_3_or_OffKeyword_2_1_or_OnKeyword_2_2_or_OutKeyword_2_0_or_TheKeyword_2_5_or_ToKeyword_2_7_or___ToKeyword_2_6_0_TheKeyword_2_6_1____q = new AlternativeAlias(false, true, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getScenarioAccess().getToKeyword_2_6_0()), new TokenAlias(false, false, grammarAccess.getScenarioAccess().getTheKeyword_2_6_1())), new TokenAlias(false, false, grammarAccess.getScenarioAccess().getHyphenMinusKeyword_2_4()), new TokenAlias(false, false, grammarAccess.getScenarioAccess().getInKeyword_2_3()), new TokenAlias(false, false, grammarAccess.getScenarioAccess().getOffKeyword_2_1()), new TokenAlias(false, false, grammarAccess.getScenarioAccess().getOnKeyword_2_2()), new TokenAlias(false, false, grammarAccess.getScenarioAccess().getOutKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getScenarioAccess().getTheKeyword_2_5()), new TokenAlias(false, false, grammarAccess.getScenarioAccess().getToKeyword_2_7()));
		match_Scenario___HyphenMinusKeyword_4_3_or_InKeyword_4_2_or_OffKeyword_4_0_or_OnKeyword_4_1_or_TheKeyword_4_4__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getScenarioAccess().getHyphenMinusKeyword_4_3()), new TokenAlias(false, false, grammarAccess.getScenarioAccess().getInKeyword_4_2()), new TokenAlias(false, false, grammarAccess.getScenarioAccess().getOffKeyword_4_0()), new TokenAlias(false, false, grammarAccess.getScenarioAccess().getOnKeyword_4_1()), new TokenAlias(false, false, grammarAccess.getScenarioAccess().getTheKeyword_4_4()));
		match_Scenario___HyphenMinusKeyword_6_2_or_InKeyword_6_1_or_OnKeyword_6_0_or_TheKeyword_6_3__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getScenarioAccess().getHyphenMinusKeyword_6_2()), new TokenAlias(false, false, grammarAccess.getScenarioAccess().getInKeyword_6_1()), new TokenAlias(false, false, grammarAccess.getScenarioAccess().getOnKeyword_6_0()), new TokenAlias(false, false, grammarAccess.getScenarioAccess().getTheKeyword_6_3()));
		match_Scenario___HyphenMinusKeyword_8_1_or_InKeyword_8_0_or_TheKeyword_8_2__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getScenarioAccess().getHyphenMinusKeyword_8_1()), new TokenAlias(false, false, grammarAccess.getScenarioAccess().getInKeyword_8_0()), new TokenAlias(false, false, grammarAccess.getScenarioAccess().getTheKeyword_8_2()));
		match_Scenario___IKeyword_10_1_1_2_or_TheKeyword_10_1_1_0_or___AllKeyword_10_1_1_1_0_TheKeyword_10_1_1_1_1____q = new AlternativeAlias(false, true, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getScenarioAccess().getAllKeyword_10_1_1_1_0()), new TokenAlias(false, false, grammarAccess.getScenarioAccess().getTheKeyword_10_1_1_1_1())), new TokenAlias(false, false, grammarAccess.getScenarioAccess().getIKeyword_10_1_1_2()), new TokenAlias(false, false, grammarAccess.getScenarioAccess().getTheKeyword_10_1_1_0()));
		match_Scenario___IKeyword_14_1_1_2_or_TheKeyword_14_1_1_0_or___AllKeyword_14_1_1_1_0_TheKeyword_14_1_1_1_1____q = new AlternativeAlias(false, true, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getScenarioAccess().getAllKeyword_14_1_1_1_0()), new TokenAlias(false, false, grammarAccess.getScenarioAccess().getTheKeyword_14_1_1_1_1())), new TokenAlias(false, false, grammarAccess.getScenarioAccess().getIKeyword_14_1_1_2()), new TokenAlias(false, false, grammarAccess.getScenarioAccess().getTheKeyword_14_1_1_0()));
	}
	
	private void init1() {
		match_StateDef_PREPParserRuleCall_1_q = new TokenAlias(false, true, grammarAccess.getStateDefAccess().getPREPParserRuleCall_1());
		match_VerbAction_AndKeyword_1_q = new TokenAlias(false, true, grammarAccess.getVerbActionAccess().getAndKeyword_1());
		match_VerbAction_OnKeyword_3_q = new TokenAlias(false, true, grammarAccess.getVerbActionAccess().getOnKeyword_3());
		match_VerbAction_PREPParserRuleCall_11_q = new TokenAlias(false, true, grammarAccess.getVerbActionAccess().getPREPParserRuleCall_11());
		match_VerbAction_WORDParserRuleCall_2_q = new TokenAlias(false, true, grammarAccess.getVerbActionAccess().getWORDParserRuleCall_2());
		match_VerbAction___ForKeyword_10_1_or_OfKeyword_10_0_or___ForKeyword_10_2_0_TheKeyword_10_2_1___or___OfKeyword_10_3_0_TheKeyword_10_3_1____q = new AlternativeAlias(false, true, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getVerbActionAccess().getForKeyword_10_2_0()), new TokenAlias(false, false, grammarAccess.getVerbActionAccess().getTheKeyword_10_2_1())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getVerbActionAccess().getOfKeyword_10_3_0()), new TokenAlias(false, false, grammarAccess.getVerbActionAccess().getTheKeyword_10_3_1())), new TokenAlias(false, false, grammarAccess.getVerbActionAccess().getForKeyword_10_1()), new TokenAlias(false, false, grammarAccess.getVerbActionAccess().getOfKeyword_10_0()));
		match_VerbAction___InKeyword_7_2_or_OffKeyword_7_1_or_OnKeyword_7_0__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getVerbActionAccess().getInKeyword_7_2()), new TokenAlias(false, false, grammarAccess.getVerbActionAccess().getOffKeyword_7_1()), new TokenAlias(false, false, grammarAccess.getVerbActionAccess().getOnKeyword_7_0()));
		match_VerbAction___InKeyword_9_2_or_OffKeyword_9_1_or_OnKeyword_9_0__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getVerbActionAccess().getInKeyword_9_2()), new TokenAlias(false, false, grammarAccess.getVerbActionAccess().getOffKeyword_9_1()), new TokenAlias(false, false, grammarAccess.getVerbActionAccess().getOnKeyword_9_0()));
		match_VerbAction___OnKeyword_5_2_or_TheKeyword_5_1_or___ForKeyword_5_0_0_TheKeyword_5_0_1___or___ToKeyword_5_3_0_TheKeyword_5_3_1____q = new AlternativeAlias(false, true, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getVerbActionAccess().getForKeyword_5_0_0()), new TokenAlias(false, false, grammarAccess.getVerbActionAccess().getTheKeyword_5_0_1())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getVerbActionAccess().getToKeyword_5_3_0()), new TokenAlias(false, false, grammarAccess.getVerbActionAccess().getTheKeyword_5_3_1())), new TokenAlias(false, false, grammarAccess.getVerbActionAccess().getOnKeyword_5_2()), new TokenAlias(false, false, grammarAccess.getVerbActionAccess().getTheKeyword_5_1()));
		match_VerbAction___WORDParserRuleCall_4_0_HyphenMinusKeyword_4_1_WORDParserRuleCall_4_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getVerbActionAccess().getWORDParserRuleCall_4_0()), new TokenAlias(false, false, grammarAccess.getVerbActionAccess().getHyphenMinusKeyword_4_1()), new TokenAlias(false, false, grammarAccess.getVerbActionAccess().getWORDParserRuleCall_4_2()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getOPTIONRule())
			return getOPTIONToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getPREPRule())
			return getPREPToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getWORDRule())
			return getWORDToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * OPTION:'#'? (INT | STRING) ;
	 */
	protected String getOPTIONToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * PREP: ('on' | 'in' | 'from' | 'to' | 'into' | 'for' | 'with');
	 */
	protected String getPREPToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "on";
	}
	
	/**
	 * WORD: ID;
	 */
	protected String getWORDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_ActionDef_WORDParserRuleCall_1_q.equals(syntax))
				emit_ActionDef_WORDParserRuleCall_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DeclarativeActionRef_OnKeyword_1_q.equals(syntax))
				emit_DeclarativeActionRef_OnKeyword_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DeclarativeActionRef_OnKeyword_4_0_1_or_TheKeyword_4_0_0.equals(syntax))
				emit_DeclarativeActionRef_OnKeyword_4_0_1_or_TheKeyword_4_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DeclarativeEntityAction___ToKeyword_2_0_TheKeyword_2_1__q.equals(syntax))
				emit_DeclarativeEntityAction___ToKeyword_2_0_TheKeyword_2_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DeclarativeEntityDef_AndKeyword_7_4_0_1_or_CommaKeyword_7_4_0_0_or_TheKeyword_7_4_0_2.equals(syntax))
				emit_DeclarativeEntityDef_AndKeyword_7_4_0_1_or_CommaKeyword_7_4_0_0_or_TheKeyword_7_4_0_2(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DeclarativeEntityDef_AndKeyword_8_4_0_1_or_CommaKeyword_8_4_0_0_or_TheKeyword_8_4_0_2.equals(syntax))
				emit_DeclarativeEntityDef_AndKeyword_8_4_0_1_or_CommaKeyword_8_4_0_0_or_TheKeyword_8_4_0_2(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DeclarativeEntityDef_WORDParserRuleCall_7_2_q.equals(syntax))
				emit_DeclarativeEntityDef_WORDParserRuleCall_7_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DeclarativeEntityDef_WORDParserRuleCall_8_2_q.equals(syntax))
				emit_DeclarativeEntityDef_WORDParserRuleCall_8_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DeclarativeEntityDef___HyphenMinusKeyword_3_0_WORDParserRuleCall_3_1__q.equals(syntax))
				emit_DeclarativeEntityDef___HyphenMinusKeyword_3_0_WORDParserRuleCall_3_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DeclarativeEntityDef___WORDParserRuleCall_7_3_0_HyphenMinusKeyword_7_3_1_WORDParserRuleCall_7_3_2__q.equals(syntax))
				emit_DeclarativeEntityDef___WORDParserRuleCall_7_3_0_HyphenMinusKeyword_7_3_1_WORDParserRuleCall_7_3_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DeclarativeEntityDef___WORDParserRuleCall_8_3_0_HyphenMinusKeyword_8_3_1_WORDParserRuleCall_8_3_2__q.equals(syntax))
				emit_DeclarativeEntityDef___WORDParserRuleCall_8_3_0_HyphenMinusKeyword_8_3_1_WORDParserRuleCall_8_3_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DeclarativeEntityPropertyStatePhrase_AreKeyword_5_1_0_0_0_0_or___AreKeyword_5_1_0_0_0_1_0_NotKeyword_5_1_0_0_0_1_1__.equals(syntax))
				emit_DeclarativeEntityPropertyStatePhrase_AreKeyword_5_1_0_0_0_0_or___AreKeyword_5_1_0_0_0_1_0_NotKeyword_5_1_0_0_0_1_1__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DeclarativeEntityPropertyStatePhrase_ForKeyword_3_1_or_FromKeyword_3_2_or_OfKeyword_3_0_or___ForKeyword_3_3_0_TheKeyword_3_3_1___or___OfKeyword_3_4_0_TheKeyword_3_4_1__.equals(syntax))
				emit_DeclarativeEntityPropertyStatePhrase_ForKeyword_3_1_or_FromKeyword_3_2_or_OfKeyword_3_0_or___ForKeyword_3_3_0_TheKeyword_3_3_1___or___OfKeyword_3_4_0_TheKeyword_3_4_1__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DeclarativeEntityPropertyStatePhrase_IsKeyword_5_0_0_0_0_or___IsKeyword_5_0_0_0_1_0_NotKeyword_5_0_0_0_1_1__.equals(syntax))
				emit_DeclarativeEntityPropertyStatePhrase_IsKeyword_5_0_0_0_0_or___IsKeyword_5_0_0_0_1_0_NotKeyword_5_0_0_0_1_1__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DeclarativeEntityPropertyStatePhrase_OPTIONParserRuleCall_2_q.equals(syntax))
				emit_DeclarativeEntityPropertyStatePhrase_OPTIONParserRuleCall_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DeclarativeEntityPropertyStatePhrase_WORDParserRuleCall_5_0_0_2_q.equals(syntax))
				emit_DeclarativeEntityPropertyStatePhrase_WORDParserRuleCall_5_0_0_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DeclarativeEntityPropertyStatePhrase_WORDParserRuleCall_5_0_1_q.equals(syntax))
				emit_DeclarativeEntityPropertyStatePhrase_WORDParserRuleCall_5_0_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DeclarativeEntityPropertyStatePhrase_WORDParserRuleCall_5_1_0_0_2_q.equals(syntax))
				emit_DeclarativeEntityPropertyStatePhrase_WORDParserRuleCall_5_1_0_0_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DeclarativeEntityPropertyStatePhrase_WORDParserRuleCall_5_1_1_q.equals(syntax))
				emit_DeclarativeEntityPropertyStatePhrase_WORDParserRuleCall_5_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DeclarativeEntityPropertyStatePhrase___OfKeyword_1_0_or___OfKeyword_1_1_0_TheKeyword_1_1_1____q.equals(syntax))
				emit_DeclarativeEntityPropertyStatePhrase___OfKeyword_1_0_or___OfKeyword_1_1_0_TheKeyword_1_1_1____q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DeclarativeEntityRef_TheKeyword_0_2_0_0_or___AllKeyword_0_2_0_1_0_TheKeyword_0_2_0_1_1__.equals(syntax))
				emit_DeclarativeEntityRef_TheKeyword_0_2_0_0_or___AllKeyword_0_2_0_1_0_TheKeyword_0_2_0_1_1__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DeclarativeEntityRef___ForKeyword_0_1_0_or_OfKeyword_0_1_1_or_ToKeyword_0_1_2__q.equals(syntax))
				emit_DeclarativeEntityRef___ForKeyword_0_1_0_or_OfKeyword_0_1_1_or_ToKeyword_0_1_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DeclarativeEntityRef___WORDParserRuleCall_0_0_0_OPTIONParserRuleCall_0_0_1_ForKeyword_0_0_2_TheKeyword_0_0_3__q.equals(syntax))
				emit_DeclarativeEntityRef___WORDParserRuleCall_0_0_0_OPTIONParserRuleCall_0_0_1_ForKeyword_0_0_2_TheKeyword_0_0_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DeclarativeEntityStatePhrase_AreKeyword_2_1_or_IsKeyword_2_0.equals(syntax))
				emit_DeclarativeEntityStatePhrase_AreKeyword_2_1_or_IsKeyword_2_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DeclarativeEntityStatePhrase_ForKeyword_0_4_3_or_OfKeyword_0_4_0_or___ForKeyword_0_4_2_0_TheKeyword_0_4_2_1___or___OfKeyword_0_4_1_0_TheKeyword_0_4_1_1__.equals(syntax))
				emit_DeclarativeEntityStatePhrase_ForKeyword_0_4_3_or_OfKeyword_0_4_0_or___ForKeyword_0_4_2_0_TheKeyword_0_4_2_1___or___OfKeyword_0_4_1_0_TheKeyword_0_4_1_1__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DeclarativeEntityStatePhrase_NotKeyword_3_q.equals(syntax))
				emit_DeclarativeEntityStatePhrase_NotKeyword_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DeclarativeEntityStatePhrase_OPTIONParserRuleCall_0_2_q.equals(syntax))
				emit_DeclarativeEntityStatePhrase_OPTIONParserRuleCall_0_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DeclarativeEntityStatePhrase_WORDParserRuleCall_5_q.equals(syntax))
				emit_DeclarativeEntityStatePhrase_WORDParserRuleCall_5_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DeclarativeEntityStatePhrase___ForKeyword_0_3_0_or___ForKeyword_0_3_1_0_TheKeyword_0_3_1_1____q.equals(syntax))
				emit_DeclarativeEntityStatePhrase___ForKeyword_0_3_0_or___ForKeyword_0_3_1_0_TheKeyword_0_3_1_1____q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DeclarativeEntityStatePhrase___OfKeyword_0_1_0_or___OfKeyword_0_1_1_0_TheKeyword_0_1_1_1____q.equals(syntax))
				emit_DeclarativeEntityStatePhrase___OfKeyword_0_1_0_or___OfKeyword_0_1_1_0_TheKeyword_0_1_1_1____q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DeclarativeEntityStatePhrase_____OfKeyword_0_1_0_or___OfKeyword_0_1_1_0_TheKeyword_0_1_1_1____q_OPTIONParserRuleCall_0_2_q___ForKeyword_0_3_0_or___ForKeyword_0_3_1_0_TheKeyword_0_3_1_1____q___ForKeyword_0_4_3_or_OfKeyword_0_4_0_or___ForKeyword_0_4_2_0_TheKeyword_0_4_2_1___or___OfKeyword_0_4_1_0_TheKeyword_0_4_1_1______q.equals(syntax))
				emit_DeclarativeEntityStatePhrase_____OfKeyword_0_1_0_or___OfKeyword_0_1_1_0_TheKeyword_0_1_1_1____q_OPTIONParserRuleCall_0_2_q___ForKeyword_0_3_0_or___ForKeyword_0_3_1_0_TheKeyword_0_3_1_1____q___ForKeyword_0_4_3_or_OfKeyword_0_4_0_or___ForKeyword_0_4_2_0_TheKeyword_0_4_2_1___or___OfKeyword_0_4_1_0_TheKeyword_0_4_1_1______q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ImperativeActionDef_WORDParserRuleCall_1_q.equals(syntax))
				emit_ImperativeActionDef_WORDParserRuleCall_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ImperativeEntityDef_AndKeyword_7_4_0_1_or_CommaKeyword_7_4_0_0_or_TheKeyword_7_4_0_2.equals(syntax))
				emit_ImperativeEntityDef_AndKeyword_7_4_0_1_or_CommaKeyword_7_4_0_0_or_TheKeyword_7_4_0_2(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ImperativeEntityDef_AndKeyword_8_4_0_1_or_CommaKeyword_8_4_0_0_or_TheKeyword_8_4_0_2.equals(syntax))
				emit_ImperativeEntityDef_AndKeyword_8_4_0_1_or_CommaKeyword_8_4_0_0_or_TheKeyword_8_4_0_2(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ImperativeEntityDef_WORDParserRuleCall_7_2_q.equals(syntax))
				emit_ImperativeEntityDef_WORDParserRuleCall_7_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ImperativeEntityDef_WORDParserRuleCall_8_2_q.equals(syntax))
				emit_ImperativeEntityDef_WORDParserRuleCall_8_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ImperativeEntityDef___HyphenMinusKeyword_3_0_WORDParserRuleCall_3_1__q.equals(syntax))
				emit_ImperativeEntityDef___HyphenMinusKeyword_3_0_WORDParserRuleCall_3_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ImperativeEntityDef___WORDParserRuleCall_7_3_0_HyphenMinusKeyword_7_3_1_WORDParserRuleCall_7_3_2__q.equals(syntax))
				emit_ImperativeEntityDef___WORDParserRuleCall_7_3_0_HyphenMinusKeyword_7_3_1_WORDParserRuleCall_7_3_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ImperativeEntityDef___WORDParserRuleCall_8_3_0_HyphenMinusKeyword_8_3_1_WORDParserRuleCall_8_3_2__q.equals(syntax))
				emit_ImperativeEntityDef___WORDParserRuleCall_8_3_0_HyphenMinusKeyword_8_3_1_WORDParserRuleCall_8_3_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ImperativeEntityPropertyStatePhrase_ForKeyword_2_1_or_OfKeyword_2_0.equals(syntax))
				emit_ImperativeEntityPropertyStatePhrase_ForKeyword_2_1_or_OfKeyword_2_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ImperativeStateDef_PREPParserRuleCall_1_q.equals(syntax))
				emit_ImperativeStateDef_PREPParserRuleCall_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Scenario_GivenKeyword_10_0_0_2_or___GivenKeyword_10_0_0_0_0_TheKeyword_10_0_0_0_1___or___GivenKeyword_10_0_0_1_0_IKeyword_10_0_0_1_1__.equals(syntax))
				emit_Scenario_GivenKeyword_10_0_0_2_or___GivenKeyword_10_0_0_0_0_TheKeyword_10_0_0_0_1___or___GivenKeyword_10_0_0_1_0_IKeyword_10_0_0_1_1__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Scenario_ThenKeyword_14_0_0_2_or___ThenKeyword_14_0_0_0_0_TheKeyword_14_0_0_0_1___or___ThenKeyword_14_0_0_1_0_IKeyword_14_0_0_1_1__.equals(syntax))
				emit_Scenario_ThenKeyword_14_0_0_2_or___ThenKeyword_14_0_0_0_0_TheKeyword_14_0_0_0_1___or___ThenKeyword_14_0_0_1_0_IKeyword_14_0_0_1_1__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Scenario_WORDParserRuleCall_3_q.equals(syntax))
				emit_Scenario_WORDParserRuleCall_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Scenario_WORDParserRuleCall_5_q.equals(syntax))
				emit_Scenario_WORDParserRuleCall_5_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Scenario_WORDParserRuleCall_7_q.equals(syntax))
				emit_Scenario_WORDParserRuleCall_7_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Scenario_WORDParserRuleCall_9_q.equals(syntax))
				emit_Scenario_WORDParserRuleCall_9_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Scenario_WhenKeyword_12_0_0_2_or___AndKeyword_12_0_0_3_0_IKeyword_12_0_0_3_1___or___WhenKeyword_12_0_0_0_0_IKeyword_12_0_0_0_1___or___WhenKeyword_12_0_0_1_0_TheKeyword_12_0_0_1_1__.equals(syntax))
				emit_Scenario_WhenKeyword_12_0_0_2_or___AndKeyword_12_0_0_3_0_IKeyword_12_0_0_3_1___or___WhenKeyword_12_0_0_0_0_IKeyword_12_0_0_0_1___or___WhenKeyword_12_0_0_1_0_TheKeyword_12_0_0_1_1__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Scenario_WhenKeyword_12_1_0_4_or___GivenKeyword_12_1_0_3_0_IKeyword_12_1_0_3_1___or___WhenKeyword_12_1_0_0_0_IKeyword_12_1_0_0_1___or___WhenKeyword_12_1_0_1_0_IKeyword_12_1_0_1_1_DoKeyword_12_1_0_1_2_NotKeyword_12_1_0_1_3___or___WhenKeyword_12_1_0_2_0_TheKeyword_12_1_0_2_1__.equals(syntax))
				emit_Scenario_WhenKeyword_12_1_0_4_or___GivenKeyword_12_1_0_3_0_IKeyword_12_1_0_3_1___or___WhenKeyword_12_1_0_0_0_IKeyword_12_1_0_0_1___or___WhenKeyword_12_1_0_1_0_IKeyword_12_1_0_1_1_DoKeyword_12_1_0_1_2_NotKeyword_12_1_0_1_3___or___WhenKeyword_12_1_0_2_0_TheKeyword_12_1_0_2_1__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Scenario___DoKeyword_10_0_1_0_NotKeyword_10_0_1_1__q.equals(syntax))
				emit_Scenario___DoKeyword_10_0_1_0_NotKeyword_10_0_1_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Scenario___DoKeyword_10_1_2_0_NotKeyword_10_1_2_1__q.equals(syntax))
				emit_Scenario___DoKeyword_10_1_2_0_NotKeyword_10_1_2_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Scenario___DoKeyword_12_0_1_0_NotKeyword_12_0_1_1__q.equals(syntax))
				emit_Scenario___DoKeyword_12_0_1_0_NotKeyword_12_0_1_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Scenario___DoKeyword_14_0_1_0_NotKeyword_14_0_1_1__q.equals(syntax))
				emit_Scenario___DoKeyword_14_0_1_0_NotKeyword_14_0_1_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Scenario___DoKeyword_14_1_2_0_NotKeyword_14_1_2_1__q.equals(syntax))
				emit_Scenario___DoKeyword_14_1_2_0_NotKeyword_14_1_2_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Scenario___HyphenMinusKeyword_2_4_or_InKeyword_2_3_or_OffKeyword_2_1_or_OnKeyword_2_2_or_OutKeyword_2_0_or_TheKeyword_2_5_or_ToKeyword_2_7_or___ToKeyword_2_6_0_TheKeyword_2_6_1____q.equals(syntax))
				emit_Scenario___HyphenMinusKeyword_2_4_or_InKeyword_2_3_or_OffKeyword_2_1_or_OnKeyword_2_2_or_OutKeyword_2_0_or_TheKeyword_2_5_or_ToKeyword_2_7_or___ToKeyword_2_6_0_TheKeyword_2_6_1____q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Scenario___HyphenMinusKeyword_4_3_or_InKeyword_4_2_or_OffKeyword_4_0_or_OnKeyword_4_1_or_TheKeyword_4_4__q.equals(syntax))
				emit_Scenario___HyphenMinusKeyword_4_3_or_InKeyword_4_2_or_OffKeyword_4_0_or_OnKeyword_4_1_or_TheKeyword_4_4__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Scenario___HyphenMinusKeyword_6_2_or_InKeyword_6_1_or_OnKeyword_6_0_or_TheKeyword_6_3__q.equals(syntax))
				emit_Scenario___HyphenMinusKeyword_6_2_or_InKeyword_6_1_or_OnKeyword_6_0_or_TheKeyword_6_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Scenario___HyphenMinusKeyword_8_1_or_InKeyword_8_0_or_TheKeyword_8_2__q.equals(syntax))
				emit_Scenario___HyphenMinusKeyword_8_1_or_InKeyword_8_0_or_TheKeyword_8_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Scenario___IKeyword_10_1_1_2_or_TheKeyword_10_1_1_0_or___AllKeyword_10_1_1_1_0_TheKeyword_10_1_1_1_1____q.equals(syntax))
				emit_Scenario___IKeyword_10_1_1_2_or_TheKeyword_10_1_1_0_or___AllKeyword_10_1_1_1_0_TheKeyword_10_1_1_1_1____q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Scenario___IKeyword_14_1_1_2_or_TheKeyword_14_1_1_0_or___AllKeyword_14_1_1_1_0_TheKeyword_14_1_1_1_1____q.equals(syntax))
				emit_Scenario___IKeyword_14_1_1_2_or_TheKeyword_14_1_1_0_or___AllKeyword_14_1_1_1_0_TheKeyword_14_1_1_1_1____q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_StateDef_PREPParserRuleCall_1_q.equals(syntax))
				emit_StateDef_PREPParserRuleCall_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_VerbAction_AndKeyword_1_q.equals(syntax))
				emit_VerbAction_AndKeyword_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_VerbAction_OnKeyword_3_q.equals(syntax))
				emit_VerbAction_OnKeyword_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_VerbAction_PREPParserRuleCall_11_q.equals(syntax))
				emit_VerbAction_PREPParserRuleCall_11_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_VerbAction_WORDParserRuleCall_2_q.equals(syntax))
				emit_VerbAction_WORDParserRuleCall_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_VerbAction___ForKeyword_10_1_or_OfKeyword_10_0_or___ForKeyword_10_2_0_TheKeyword_10_2_1___or___OfKeyword_10_3_0_TheKeyword_10_3_1____q.equals(syntax))
				emit_VerbAction___ForKeyword_10_1_or_OfKeyword_10_0_or___ForKeyword_10_2_0_TheKeyword_10_2_1___or___OfKeyword_10_3_0_TheKeyword_10_3_1____q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_VerbAction___InKeyword_7_2_or_OffKeyword_7_1_or_OnKeyword_7_0__q.equals(syntax))
				emit_VerbAction___InKeyword_7_2_or_OffKeyword_7_1_or_OnKeyword_7_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_VerbAction___InKeyword_9_2_or_OffKeyword_9_1_or_OnKeyword_9_0__q.equals(syntax))
				emit_VerbAction___InKeyword_9_2_or_OffKeyword_9_1_or_OnKeyword_9_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_VerbAction___OnKeyword_5_2_or_TheKeyword_5_1_or___ForKeyword_5_0_0_TheKeyword_5_0_1___or___ToKeyword_5_3_0_TheKeyword_5_3_1____q.equals(syntax))
				emit_VerbAction___OnKeyword_5_2_or_TheKeyword_5_1_or___ForKeyword_5_0_0_TheKeyword_5_0_1___or___ToKeyword_5_3_0_TheKeyword_5_3_1____q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_VerbAction___WORDParserRuleCall_4_0_HyphenMinusKeyword_4_1_WORDParserRuleCall_4_2__q.equals(syntax))
				emit_VerbAction___WORDParserRuleCall_4_0_HyphenMinusKeyword_4_1_WORDParserRuleCall_4_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WORD?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=WORD (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_ActionDef_WORDParserRuleCall_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'on'?
	 *
	 * This ambiguous syntax occurs at:
	 *     verb=[ActionDef|WORD] (ambiguity) ('the' | 'on') entity=DeclarativeEntityDef
	 *     verb=[ActionDef|WORD] (ambiguity) (rule end)
	 *     verb=[ActionDef|WORD] (ambiguity) argument=SimpleValue
	 *     verb=[ActionDef|WORD] (ambiguity) preposition=PREP
	 
	 * </pre>
	 */
	protected void emit_DeclarativeActionRef_OnKeyword_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'the' | 'on'
	 *
	 * This ambiguous syntax occurs at:
	 *     argument=SimpleValue (ambiguity) entity=DeclarativeEntityDef
	 *     preposition=PREP (ambiguity) entity=DeclarativeEntityDef
	 *     verb=[ActionDef|WORD] 'on'? (ambiguity) entity=DeclarativeEntityDef
	 
	 * </pre>
	 */
	protected void emit_DeclarativeActionRef_OnKeyword_4_0_1_or_TheKeyword_4_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('to' 'the')?
	 *
	 * This ambiguous syntax occurs at:
	 *     actionDef=[ActionDef|ID] (ambiguity) (rule end)
	 *     actionDef=[ActionDef|ID] (ambiguity) entityRef=DeclarativeEntityRef
	 *     actionDef=[ActionDef|ID] (ambiguity) propertyRef=PropertyRef
	 
	 * </pre>
	 */
	protected void emit_DeclarativeEntityAction___ToKeyword_2_0_TheKeyword_2_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ',' | 'and' | 'the'
	 *
	 * This ambiguous syntax occurs at:
	 *     states+=StateDef (ambiguity) states+=StateDef
	 *     states+=StateDef WORD? (WORD '-' WORD)? (ambiguity) states+=StateDef
	 
	 * </pre>
	 */
	protected void emit_DeclarativeEntityDef_AndKeyword_7_4_0_1_or_CommaKeyword_7_4_0_0_or_TheKeyword_7_4_0_2(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ',' | 'and' | 'the'
	 *
	 * This ambiguous syntax occurs at:
	 *     properties+=PropertyDef (ambiguity) properties+=PropertyDef
	 *     properties+=PropertyDef WORD? (WORD '-' WORD)? (ambiguity) properties+=PropertyDef
	 
	 * </pre>
	 */
	protected void emit_DeclarativeEntityDef_AndKeyword_8_4_0_1_or_CommaKeyword_8_4_0_0_or_TheKeyword_8_4_0_2(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WORD?
	 *
	 * This ambiguous syntax occurs at:
	 *     states+=StateDef (ambiguity) (WORD '-' WORD)? 'properties:' properties+=PropertyDef
	 *     states+=StateDef (ambiguity) (WORD '-' WORD)? '}' (rule end)
	 *     states+=StateDef (ambiguity) (WORD '-' WORD)? (',' | 'and' | 'the') states+=StateDef
	 
	 * </pre>
	 */
	protected void emit_DeclarativeEntityDef_WORDParserRuleCall_7_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WORD?
	 *
	 * This ambiguous syntax occurs at:
	 *     properties+=PropertyDef (ambiguity) (WORD '-' WORD)? '}' (rule end)
	 *     properties+=PropertyDef (ambiguity) (WORD '-' WORD)? (',' | 'and' | 'the') properties+=PropertyDef
	 
	 * </pre>
	 */
	protected void emit_DeclarativeEntityDef_WORDParserRuleCall_8_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('-' WORD)?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) 'is' superEntities+=[DeclarativeEntityDef|ID]
	 *     name=ID (ambiguity) '{' 'actions:' actions+=ActionDef
	 *     name=ID (ambiguity) '{' 'properties:' properties+=PropertyDef
	 *     name=ID (ambiguity) '{' 'states:' states+=StateDef
	 *     name=ID (ambiguity) '{' '}' (rule end)
	 *     name=STRING (ambiguity) 'is' superEntities+=[DeclarativeEntityDef|ID]
	 *     name=STRING (ambiguity) '{' 'actions:' actions+=ActionDef
	 *     name=STRING (ambiguity) '{' 'properties:' properties+=PropertyDef
	 *     name=STRING (ambiguity) '{' 'states:' states+=StateDef
	 *     name=STRING (ambiguity) '{' '}' (rule end)
	 
	 * </pre>
	 */
	protected void emit_DeclarativeEntityDef___HyphenMinusKeyword_3_0_WORDParserRuleCall_3_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (WORD '-' WORD)?
	 *
	 * This ambiguous syntax occurs at:
	 *     states+=StateDef WORD? (ambiguity) 'properties:' properties+=PropertyDef
	 *     states+=StateDef WORD? (ambiguity) '}' (rule end)
	 *     states+=StateDef WORD? (ambiguity) (',' | 'and' | 'the') states+=StateDef
	 
	 * </pre>
	 */
	protected void emit_DeclarativeEntityDef___WORDParserRuleCall_7_3_0_HyphenMinusKeyword_7_3_1_WORDParserRuleCall_7_3_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (WORD '-' WORD)?
	 *
	 * This ambiguous syntax occurs at:
	 *     properties+=PropertyDef WORD? (ambiguity) '}' (rule end)
	 *     properties+=PropertyDef WORD? (ambiguity) (',' | 'and' | 'the') properties+=PropertyDef
	 
	 * </pre>
	 */
	protected void emit_DeclarativeEntityDef___WORDParserRuleCall_8_3_0_HyphenMinusKeyword_8_3_1_WORDParserRuleCall_8_3_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'are' | ('are' 'not')
	 *
	 * This ambiguous syntax occurs at:
	 *     entity=DeclarativeEntityRef (ambiguity) values+=SimpleValue
	 
	 * </pre>
	 */
	protected void emit_DeclarativeEntityPropertyStatePhrase_AreKeyword_5_1_0_0_0_0_or___AreKeyword_5_1_0_0_0_1_0_NotKeyword_5_1_0_0_0_1_1__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'of' | 'for' | 'from' | ('for' 'the') | ('of' 'the')
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) ('of' | ('of' 'the'))? OPTION? (ambiguity) entity=DeclarativeEntityRef
	 *     property=[PropertyDef|WORD] ('of' | ('of' 'the'))? OPTION? (ambiguity) entity=DeclarativeEntityRef
	 
	 * </pre>
	 */
	protected void emit_DeclarativeEntityPropertyStatePhrase_ForKeyword_3_1_or_FromKeyword_3_2_or_OfKeyword_3_0_or___ForKeyword_3_3_0_TheKeyword_3_3_1___or___OfKeyword_3_4_0_TheKeyword_3_4_1__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'is' | ('is' 'not')
	 *
	 * This ambiguous syntax occurs at:
	 *     entity=DeclarativeEntityRef (ambiguity) value=SimpleValue
	 
	 * </pre>
	 */
	protected void emit_DeclarativeEntityPropertyStatePhrase_IsKeyword_5_0_0_0_0_or___IsKeyword_5_0_0_0_1_0_NotKeyword_5_0_0_0_1_1__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     OPTION?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) ('of' | ('of' 'the'))? (ambiguity) ('of' | 'for' | 'from' | ('for' 'the') | ('of' 'the')) entity=DeclarativeEntityRef
	 *     property=[PropertyDef|WORD] ('of' | ('of' 'the'))? (ambiguity) ('of' | 'for' | 'from' | ('for' 'the') | ('of' 'the')) entity=DeclarativeEntityRef
	 
	 * </pre>
	 */
	protected void emit_DeclarativeEntityPropertyStatePhrase_OPTIONParserRuleCall_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WORD?
	 *
	 * This ambiguous syntax occurs at:
	 *     value=SimpleValue (ambiguity) WORD? (rule end)
	 
	 * </pre>
	 */
	protected void emit_DeclarativeEntityPropertyStatePhrase_WORDParserRuleCall_5_0_0_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WORD?
	 *
	 * This ambiguous syntax occurs at:
	 *     value=SimpleValue WORD? (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_DeclarativeEntityPropertyStatePhrase_WORDParserRuleCall_5_0_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WORD?
	 *
	 * This ambiguous syntax occurs at:
	 *     values+=SimpleValue (ambiguity) WORD? (rule end)
	 
	 * </pre>
	 */
	protected void emit_DeclarativeEntityPropertyStatePhrase_WORDParserRuleCall_5_1_0_0_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WORD?
	 *
	 * This ambiguous syntax occurs at:
	 *     entity=DeclarativeEntityRef (ambiguity) (rule end)
	 *     values+=SimpleValue (ambiguity) (rule end)
	 *     values+=SimpleValue WORD? (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_DeclarativeEntityPropertyStatePhrase_WORDParserRuleCall_5_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('of' | ('of' 'the'))?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) OPTION? ('of' | 'for' | 'from' | ('for' 'the') | ('of' 'the')) entity=DeclarativeEntityRef
	 *     property=[PropertyDef|WORD] (ambiguity) OPTION? ('of' | 'for' | 'from' | ('for' 'the') | ('of' 'the')) entity=DeclarativeEntityRef
	 
	 * </pre>
	 */
	protected void emit_DeclarativeEntityPropertyStatePhrase___OfKeyword_1_0_or___OfKeyword_1_1_0_TheKeyword_1_1_1____q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'the' | ('all' 'the')
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (WORD OPTION 'for' 'the')? ('for' | 'of' | 'to')? (ambiguity) entity=[DeclarativeEntityDef|WORD]
	 
	 * </pre>
	 */
	protected void emit_DeclarativeEntityRef_TheKeyword_0_2_0_0_or___AllKeyword_0_2_0_1_0_TheKeyword_0_2_0_1_1__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('for' | 'of' | 'to')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (WORD OPTION 'for' 'the')? (ambiguity) ('the' | ('all' 'the')) entity=[DeclarativeEntityDef|WORD]
	 
	 * </pre>
	 */
	protected void emit_DeclarativeEntityRef___ForKeyword_0_1_0_or_OfKeyword_0_1_1_or_ToKeyword_0_1_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (WORD OPTION 'for' 'the')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) ('for' | 'of' | 'to')? ('the' | ('all' 'the')) entity=[DeclarativeEntityDef|WORD]
	 
	 * </pre>
	 */
	protected void emit_DeclarativeEntityRef___WORDParserRuleCall_0_0_0_OPTIONParserRuleCall_0_0_1_ForKeyword_0_0_2_TheKeyword_0_0_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'is' | 'are'
	 *
	 * This ambiguous syntax occurs at:
	 *     entity=DeclarativeEntityRef (ambiguity) 'not'? state=[StateName|ID]
	 
	 * </pre>
	 */
	protected void emit_DeclarativeEntityStatePhrase_AreKeyword_2_1_or_IsKeyword_2_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'of' | ('of' 'the') | ('for' 'the') | 'for'
	 *
	 * This ambiguous syntax occurs at:
	 *     property=[PropertyDef|WORD] ('of' | ('of' 'the'))? OPTION? ('for' | ('for' 'the'))? (ambiguity) entity=DeclarativeEntityRef
	 
	 * </pre>
	 */
	protected void emit_DeclarativeEntityStatePhrase_ForKeyword_0_4_3_or_OfKeyword_0_4_0_or___ForKeyword_0_4_2_0_TheKeyword_0_4_2_1___or___OfKeyword_0_4_1_0_TheKeyword_0_4_1_1__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'not'?
	 *
	 * This ambiguous syntax occurs at:
	 *     entity=DeclarativeEntityRef ('is' | 'are') (ambiguity) state=[StateName|ID]
	 
	 * </pre>
	 */
	protected void emit_DeclarativeEntityStatePhrase_NotKeyword_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     OPTION?
	 *
	 * This ambiguous syntax occurs at:
	 *     property=[PropertyDef|WORD] ('of' | ('of' 'the'))? (ambiguity) ('for' | ('for' 'the'))? ('of' | ('of' 'the') | ('for' 'the') | 'for') entity=DeclarativeEntityRef
	 
	 * </pre>
	 */
	protected void emit_DeclarativeEntityStatePhrase_OPTIONParserRuleCall_0_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WORD?
	 *
	 * This ambiguous syntax occurs at:
	 *     state=[StateName|ID] (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_DeclarativeEntityStatePhrase_WORDParserRuleCall_5_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('for' | ('for' 'the'))?
	 *
	 * This ambiguous syntax occurs at:
	 *     property=[PropertyDef|WORD] ('of' | ('of' 'the'))? OPTION? (ambiguity) ('of' | ('of' 'the') | ('for' 'the') | 'for') entity=DeclarativeEntityRef
	 
	 * </pre>
	 */
	protected void emit_DeclarativeEntityStatePhrase___ForKeyword_0_3_0_or___ForKeyword_0_3_1_0_TheKeyword_0_3_1_1____q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('of' | ('of' 'the'))?
	 *
	 * This ambiguous syntax occurs at:
	 *     property=[PropertyDef|WORD] (ambiguity) OPTION? ('for' | ('for' 'the'))? ('of' | ('of' 'the') | ('for' 'the') | 'for') entity=DeclarativeEntityRef
	 
	 * </pre>
	 */
	protected void emit_DeclarativeEntityStatePhrase___OfKeyword_0_1_0_or___OfKeyword_0_1_1_0_TheKeyword_0_1_1_1____q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (('of' | ('of' 'the'))? OPTION? ('for' | ('for' 'the'))? ('of' | ('of' 'the') | ('for' 'the') | 'for'))?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) entity=DeclarativeEntityRef
	 
	 * </pre>
	 */
	protected void emit_DeclarativeEntityStatePhrase_____OfKeyword_0_1_0_or___OfKeyword_0_1_1_0_TheKeyword_0_1_1_1____q_OPTIONParserRuleCall_0_2_q___ForKeyword_0_3_0_or___ForKeyword_0_3_1_0_TheKeyword_0_3_1_1____q___ForKeyword_0_4_3_or_OfKeyword_0_4_0_or___ForKeyword_0_4_2_0_TheKeyword_0_4_2_1___or___OfKeyword_0_4_1_0_TheKeyword_0_4_1_1______q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WORD?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=WORD (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_ImperativeActionDef_WORDParserRuleCall_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ',' | 'and' | 'the'
	 *
	 * This ambiguous syntax occurs at:
	 *     states+=ImperativeStateDef (ambiguity) states+=ImperativeStateDef
	 *     states+=ImperativeStateDef WORD? (WORD '-' WORD)? (ambiguity) states+=ImperativeStateDef
	 
	 * </pre>
	 */
	protected void emit_ImperativeEntityDef_AndKeyword_7_4_0_1_or_CommaKeyword_7_4_0_0_or_TheKeyword_7_4_0_2(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ',' | 'and' | 'the'
	 *
	 * This ambiguous syntax occurs at:
	 *     properties+=ImperativePropertyDef (ambiguity) properties+=ImperativePropertyDef
	 *     properties+=ImperativePropertyDef WORD? (WORD '-' WORD)? (ambiguity) properties+=ImperativePropertyDef
	 
	 * </pre>
	 */
	protected void emit_ImperativeEntityDef_AndKeyword_8_4_0_1_or_CommaKeyword_8_4_0_0_or_TheKeyword_8_4_0_2(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WORD?
	 *
	 * This ambiguous syntax occurs at:
	 *     states+=ImperativeStateDef (ambiguity) (WORD '-' WORD)? 'properties:' properties+=ImperativePropertyDef
	 *     states+=ImperativeStateDef (ambiguity) (WORD '-' WORD)? '}' (rule end)
	 *     states+=ImperativeStateDef (ambiguity) (WORD '-' WORD)? (',' | 'and' | 'the') states+=ImperativeStateDef
	 
	 * </pre>
	 */
	protected void emit_ImperativeEntityDef_WORDParserRuleCall_7_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WORD?
	 *
	 * This ambiguous syntax occurs at:
	 *     properties+=ImperativePropertyDef (ambiguity) (WORD '-' WORD)? '}' (rule end)
	 *     properties+=ImperativePropertyDef (ambiguity) (WORD '-' WORD)? (',' | 'and' | 'the') properties+=ImperativePropertyDef
	 
	 * </pre>
	 */
	protected void emit_ImperativeEntityDef_WORDParserRuleCall_8_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('-' WORD)?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) 'is' superEntities+=[ImperativeEntityDef|ID]
	 *     name=ID (ambiguity) '{' 'actions:' actions+=ImperativeActionDef
	 *     name=ID (ambiguity) '{' 'properties:' properties+=ImperativePropertyDef
	 *     name=ID (ambiguity) '{' 'states:' states+=ImperativeStateDef
	 *     name=ID (ambiguity) '{' '}' (rule end)
	 *     name=STRING (ambiguity) 'is' superEntities+=[ImperativeEntityDef|ID]
	 *     name=STRING (ambiguity) '{' 'actions:' actions+=ImperativeActionDef
	 *     name=STRING (ambiguity) '{' 'properties:' properties+=ImperativePropertyDef
	 *     name=STRING (ambiguity) '{' 'states:' states+=ImperativeStateDef
	 *     name=STRING (ambiguity) '{' '}' (rule end)
	 
	 * </pre>
	 */
	protected void emit_ImperativeEntityDef___HyphenMinusKeyword_3_0_WORDParserRuleCall_3_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (WORD '-' WORD)?
	 *
	 * This ambiguous syntax occurs at:
	 *     states+=ImperativeStateDef WORD? (ambiguity) 'properties:' properties+=ImperativePropertyDef
	 *     states+=ImperativeStateDef WORD? (ambiguity) '}' (rule end)
	 *     states+=ImperativeStateDef WORD? (ambiguity) (',' | 'and' | 'the') states+=ImperativeStateDef
	 
	 * </pre>
	 */
	protected void emit_ImperativeEntityDef___WORDParserRuleCall_7_3_0_HyphenMinusKeyword_7_3_1_WORDParserRuleCall_7_3_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (WORD '-' WORD)?
	 *
	 * This ambiguous syntax occurs at:
	 *     properties+=ImperativePropertyDef WORD? (ambiguity) '}' (rule end)
	 *     properties+=ImperativePropertyDef WORD? (ambiguity) (',' | 'and' | 'the') properties+=ImperativePropertyDef
	 
	 * </pre>
	 */
	protected void emit_ImperativeEntityDef___WORDParserRuleCall_8_3_0_HyphenMinusKeyword_8_3_1_WORDParserRuleCall_8_3_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'of' | 'for'
	 *
	 * This ambiguous syntax occurs at:
	 *     property=[ImperativePropertyDef|ID] (ambiguity) entity=ImperativeEntityRef
	 
	 * </pre>
	 */
	protected void emit_ImperativeEntityPropertyStatePhrase_ForKeyword_2_1_or_OfKeyword_2_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     PREP?
	 *
	 * This ambiguous syntax occurs at:
	 *     postive=ImperativeStateName (ambiguity) '/' negative=ImperativeStateName
	 *     postive=ImperativeStateName (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_ImperativeStateDef_PREPParserRuleCall_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('Given' 'the') | ('Given' 'I') | 'Given'
	 *
	 * This ambiguous syntax occurs at:
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (ambiguity) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'I' 'do' 'not') | ('When' 'the') | ('Given' 'I') | 'When') 
	 *         actionE=DeclarativeScenarioAction
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (ambiguity) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         'Then' 
	 *         ('the' | ('all' 'the') | 'I')? 
	 *         ('do' 'not')? 
	 *         preStateE1=DeclarativeScenarioState
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (ambiguity) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('Then' 'the') | ('Then' 'I') | 'Then') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (rule end)
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (ambiguity) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('Then' 'the') | ('Then' 'I') | 'Then') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         imperative3=ImperativeScenario
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (ambiguity) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         imperative2=ImperativeScenario
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (ambiguity) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         imperative1=ImperativeScenario
	 *     )
	 
	 * </pre>
	 */
	protected void emit_Scenario_GivenKeyword_10_0_0_2_or___GivenKeyword_10_0_0_0_0_TheKeyword_10_0_0_0_1___or___GivenKeyword_10_0_0_1_0_IKeyword_10_0_0_1_1__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('Then' 'the') | ('Then' 'I') | 'Then'
	 *
	 * This ambiguous syntax occurs at:
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (ambiguity) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (rule end)
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (ambiguity) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         imperative3=ImperativeScenario
	 *     )
	 *     actionE=DeclarativeScenarioAction (ambiguity) ('do' 'not')? OPTION (rule end)
	 *     actionE=DeclarativeScenarioAction (ambiguity) ('do' 'not')? OPTION imperative3=ImperativeScenario
	 *     imperative1=ImperativeScenario (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) ('do' 'not')? OPTION (ambiguity) ('do' 'not')? OPTION (rule end)
	 *     imperative1=ImperativeScenario (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) ('do' 'not')? OPTION (ambiguity) ('do' 'not')? OPTION imperative3=ImperativeScenario
	 *     imperative2=ImperativeScenario (ambiguity) ('do' 'not')? OPTION (rule end)
	 *     imperative2=ImperativeScenario (ambiguity) ('do' 'not')? OPTION imperative3=ImperativeScenario
	 *     preStateE=DeclarativeScenarioState (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) ('do' 'not')? OPTION (ambiguity) ('do' 'not')? OPTION (rule end)
	 *     preStateE=DeclarativeScenarioState (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) ('do' 'not')? OPTION (ambiguity) ('do' 'not')? OPTION imperative3=ImperativeScenario
	 
	 * </pre>
	 */
	protected void emit_Scenario_ThenKeyword_14_0_0_2_or___ThenKeyword_14_0_0_0_0_TheKeyword_14_0_0_0_1___or___ThenKeyword_14_0_0_1_0_IKeyword_14_0_0_1_1__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WORD?
	 *
	 * This ambiguous syntax occurs at:
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         (ambiguity) 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         'Given' 
	 *         ('the' | ('all' 'the') | 'I')? 
	 *         ('do' 'not')? 
	 *         preStateE=DeclarativeScenarioState
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         (ambiguity) 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'I' 'do' 'not') | ('When' 'the') | ('Given' 'I') | 'When') 
	 *         actionE=DeclarativeScenarioAction
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         (ambiguity) 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         'Then' 
	 *         ('the' | ('all' 'the') | 'I')? 
	 *         ('do' 'not')? 
	 *         preStateE1=DeclarativeScenarioState
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         (ambiguity) 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('Then' 'the') | ('Then' 'I') | 'Then') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (rule end)
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         (ambiguity) 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('Then' 'the') | ('Then' 'I') | 'Then') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         imperative3=ImperativeScenario
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         (ambiguity) 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         imperative2=ImperativeScenario
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         (ambiguity) 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         imperative1=ImperativeScenario
	 *     )
	 
	 * </pre>
	 */
	protected void emit_Scenario_WORDParserRuleCall_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WORD?
	 *
	 * This ambiguous syntax occurs at:
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         (ambiguity) 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         'Given' 
	 *         ('the' | ('all' 'the') | 'I')? 
	 *         ('do' 'not')? 
	 *         preStateE=DeclarativeScenarioState
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         (ambiguity) 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'I' 'do' 'not') | ('When' 'the') | ('Given' 'I') | 'When') 
	 *         actionE=DeclarativeScenarioAction
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         (ambiguity) 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         'Then' 
	 *         ('the' | ('all' 'the') | 'I')? 
	 *         ('do' 'not')? 
	 *         preStateE1=DeclarativeScenarioState
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         (ambiguity) 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('Then' 'the') | ('Then' 'I') | 'Then') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (rule end)
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         (ambiguity) 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('Then' 'the') | ('Then' 'I') | 'Then') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         imperative3=ImperativeScenario
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         (ambiguity) 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         imperative2=ImperativeScenario
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         (ambiguity) 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         imperative1=ImperativeScenario
	 *     )
	 
	 * </pre>
	 */
	protected void emit_Scenario_WORDParserRuleCall_5_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WORD?
	 *
	 * This ambiguous syntax occurs at:
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         (ambiguity) 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         'Given' 
	 *         ('the' | ('all' 'the') | 'I')? 
	 *         ('do' 'not')? 
	 *         preStateE=DeclarativeScenarioState
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         (ambiguity) 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'I' 'do' 'not') | ('When' 'the') | ('Given' 'I') | 'When') 
	 *         actionE=DeclarativeScenarioAction
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         (ambiguity) 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         'Then' 
	 *         ('the' | ('all' 'the') | 'I')? 
	 *         ('do' 'not')? 
	 *         preStateE1=DeclarativeScenarioState
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         (ambiguity) 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('Then' 'the') | ('Then' 'I') | 'Then') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (rule end)
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         (ambiguity) 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('Then' 'the') | ('Then' 'I') | 'Then') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         imperative3=ImperativeScenario
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         (ambiguity) 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         imperative2=ImperativeScenario
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         (ambiguity) 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         imperative1=ImperativeScenario
	 *     )
	 
	 * </pre>
	 */
	protected void emit_Scenario_WORDParserRuleCall_7_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WORD?
	 *
	 * This ambiguous syntax occurs at:
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         (ambiguity) 
	 *         'Given' 
	 *         ('the' | ('all' 'the') | 'I')? 
	 *         ('do' 'not')? 
	 *         preStateE=DeclarativeScenarioState
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         (ambiguity) 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'I' 'do' 'not') | ('When' 'the') | ('Given' 'I') | 'When') 
	 *         actionE=DeclarativeScenarioAction
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         (ambiguity) 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         'Then' 
	 *         ('the' | ('all' 'the') | 'I')? 
	 *         ('do' 'not')? 
	 *         preStateE1=DeclarativeScenarioState
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         (ambiguity) 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('Then' 'the') | ('Then' 'I') | 'Then') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (rule end)
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         (ambiguity) 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('Then' 'the') | ('Then' 'I') | 'Then') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         imperative3=ImperativeScenario
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         (ambiguity) 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         imperative2=ImperativeScenario
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         (ambiguity) 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         imperative1=ImperativeScenario
	 *     )
	 
	 * </pre>
	 */
	protected void emit_Scenario_WORDParserRuleCall_9_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')
	 *
	 * This ambiguous syntax occurs at:
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (ambiguity) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         'Then' 
	 *         ('the' | ('all' 'the') | 'I')? 
	 *         ('do' 'not')? 
	 *         preStateE1=DeclarativeScenarioState
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (ambiguity) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('Then' 'the') | ('Then' 'I') | 'Then') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (rule end)
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (ambiguity) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('Then' 'the') | ('Then' 'I') | 'Then') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         imperative3=ImperativeScenario
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (ambiguity) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         imperative2=ImperativeScenario
	 *     )
	 *     imperative1=ImperativeScenario (ambiguity) ('do' 'not')? OPTION 'Then' ('the' | ('all' 'the') | 'I')? ('do' 'not')? preStateE1=DeclarativeScenarioState
	 *     imperative1=ImperativeScenario (ambiguity) ('do' 'not')? OPTION (('Then' 'the') | ('Then' 'I') | 'Then') ('do' 'not')? OPTION (rule end)
	 *     imperative1=ImperativeScenario (ambiguity) ('do' 'not')? OPTION (('Then' 'the') | ('Then' 'I') | 'Then') ('do' 'not')? OPTION imperative3=ImperativeScenario
	 *     imperative1=ImperativeScenario (ambiguity) ('do' 'not')? OPTION imperative2=ImperativeScenario
	 *     preStateE=DeclarativeScenarioState (ambiguity) ('do' 'not')? OPTION 'Then' ('the' | ('all' 'the') | 'I')? ('do' 'not')? preStateE1=DeclarativeScenarioState
	 *     preStateE=DeclarativeScenarioState (ambiguity) ('do' 'not')? OPTION (('Then' 'the') | ('Then' 'I') | 'Then') ('do' 'not')? OPTION (rule end)
	 *     preStateE=DeclarativeScenarioState (ambiguity) ('do' 'not')? OPTION (('Then' 'the') | ('Then' 'I') | 'Then') ('do' 'not')? OPTION imperative3=ImperativeScenario
	 *     preStateE=DeclarativeScenarioState (ambiguity) ('do' 'not')? OPTION imperative2=ImperativeScenario
	 
	 * </pre>
	 */
	protected void emit_Scenario_WhenKeyword_12_0_0_2_or___AndKeyword_12_0_0_3_0_IKeyword_12_0_0_3_1___or___WhenKeyword_12_0_0_0_0_IKeyword_12_0_0_0_1___or___WhenKeyword_12_0_0_1_0_TheKeyword_12_0_0_1_1__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('When' 'I') | ('When' 'I' 'do' 'not') | ('When' 'the') | ('Given' 'I') | 'When'
	 *
	 * This ambiguous syntax occurs at:
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (ambiguity) 
	 *         actionE=DeclarativeScenarioAction
	 *     )
	 *     imperative1=ImperativeScenario (ambiguity) actionE=DeclarativeScenarioAction
	 *     preStateE=DeclarativeScenarioState (ambiguity) actionE=DeclarativeScenarioAction
	 
	 * </pre>
	 */
	protected void emit_Scenario_WhenKeyword_12_1_0_4_or___GivenKeyword_12_1_0_3_0_IKeyword_12_1_0_3_1___or___WhenKeyword_12_1_0_0_0_IKeyword_12_1_0_0_1___or___WhenKeyword_12_1_0_1_0_IKeyword_12_1_0_1_1_DoKeyword_12_1_0_1_2_NotKeyword_12_1_0_1_3___or___WhenKeyword_12_1_0_2_0_TheKeyword_12_1_0_2_1__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('do' 'not')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         (ambiguity) 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'I' 'do' 'not') | ('When' 'the') | ('Given' 'I') | 'When') 
	 *         actionE=DeclarativeScenarioAction
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         (ambiguity) 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         'Then' 
	 *         ('the' | ('all' 'the') | 'I')? 
	 *         ('do' 'not')? 
	 *         preStateE1=DeclarativeScenarioState
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         (ambiguity) 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('Then' 'the') | ('Then' 'I') | 'Then') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (rule end)
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         (ambiguity) 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('Then' 'the') | ('Then' 'I') | 'Then') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         imperative3=ImperativeScenario
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         (ambiguity) 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         imperative2=ImperativeScenario
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         (ambiguity) 
	 *         OPTION 
	 *         imperative1=ImperativeScenario
	 *     )
	 
	 * </pre>
	 */
	protected void emit_Scenario___DoKeyword_10_0_1_0_NotKeyword_10_0_1_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('do' 'not')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         'Given' 
	 *         ('the' | ('all' 'the') | 'I')? 
	 *         (ambiguity) 
	 *         preStateE=DeclarativeScenarioState
	 *     )
	 
	 * </pre>
	 */
	protected void emit_Scenario___DoKeyword_10_1_2_0_NotKeyword_10_1_2_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('do' 'not')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) 
	 *         (ambiguity) 
	 *         OPTION 
	 *         'Then' 
	 *         ('the' | ('all' 'the') | 'I')? 
	 *         ('do' 'not')? 
	 *         preStateE1=DeclarativeScenarioState
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) 
	 *         (ambiguity) 
	 *         OPTION 
	 *         (('Then' 'the') | ('Then' 'I') | 'Then') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (rule end)
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) 
	 *         (ambiguity) 
	 *         OPTION 
	 *         (('Then' 'the') | ('Then' 'I') | 'Then') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         imperative3=ImperativeScenario
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) 
	 *         (ambiguity) 
	 *         OPTION 
	 *         imperative2=ImperativeScenario
	 *     )
	 *     imperative1=ImperativeScenario (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) (ambiguity) OPTION 'Then' ('the' | ('all' 'the') | 'I')? ('do' 'not')? preStateE1=DeclarativeScenarioState
	 *     imperative1=ImperativeScenario (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) (ambiguity) OPTION (('Then' 'the') | ('Then' 'I') | 'Then') ('do' 'not')? OPTION (rule end)
	 *     imperative1=ImperativeScenario (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) (ambiguity) OPTION (('Then' 'the') | ('Then' 'I') | 'Then') ('do' 'not')? OPTION imperative3=ImperativeScenario
	 *     imperative1=ImperativeScenario (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) (ambiguity) OPTION imperative2=ImperativeScenario
	 *     preStateE=DeclarativeScenarioState (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) (ambiguity) OPTION 'Then' ('the' | ('all' 'the') | 'I')? ('do' 'not')? preStateE1=DeclarativeScenarioState
	 *     preStateE=DeclarativeScenarioState (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) (ambiguity) OPTION (('Then' 'the') | ('Then' 'I') | 'Then') ('do' 'not')? OPTION (rule end)
	 *     preStateE=DeclarativeScenarioState (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) (ambiguity) OPTION (('Then' 'the') | ('Then' 'I') | 'Then') ('do' 'not')? OPTION imperative3=ImperativeScenario
	 *     preStateE=DeclarativeScenarioState (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) (ambiguity) OPTION imperative2=ImperativeScenario
	 
	 * </pre>
	 */
	protected void emit_Scenario___DoKeyword_12_0_1_0_NotKeyword_12_0_1_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('do' 'not')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('Then' 'the') | ('Then' 'I') | 'Then') 
	 *         (ambiguity) 
	 *         OPTION 
	 *         (rule end)
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('Then' 'the') | ('Then' 'I') | 'Then') 
	 *         (ambiguity) 
	 *         OPTION 
	 *         imperative3=ImperativeScenario
	 *     )
	 *     actionE=DeclarativeScenarioAction (('Then' 'the') | ('Then' 'I') | 'Then') (ambiguity) OPTION (rule end)
	 *     actionE=DeclarativeScenarioAction (('Then' 'the') | ('Then' 'I') | 'Then') (ambiguity) OPTION imperative3=ImperativeScenario
	 *     imperative1=ImperativeScenario (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) ('do' 'not')? OPTION (('Then' 'the') | ('Then' 'I') | 'Then') (ambiguity) OPTION (rule end)
	 *     imperative1=ImperativeScenario (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) ('do' 'not')? OPTION (('Then' 'the') | ('Then' 'I') | 'Then') (ambiguity) OPTION imperative3=ImperativeScenario
	 *     imperative2=ImperativeScenario (('Then' 'the') | ('Then' 'I') | 'Then') (ambiguity) OPTION (rule end)
	 *     imperative2=ImperativeScenario (('Then' 'the') | ('Then' 'I') | 'Then') (ambiguity) OPTION imperative3=ImperativeScenario
	 *     preStateE=DeclarativeScenarioState (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) ('do' 'not')? OPTION (('Then' 'the') | ('Then' 'I') | 'Then') (ambiguity) OPTION (rule end)
	 *     preStateE=DeclarativeScenarioState (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) ('do' 'not')? OPTION (('Then' 'the') | ('Then' 'I') | 'Then') (ambiguity) OPTION imperative3=ImperativeScenario
	 
	 * </pre>
	 */
	protected void emit_Scenario___DoKeyword_14_0_1_0_NotKeyword_14_0_1_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('do' 'not')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         'Then' 
	 *         ('the' | ('all' 'the') | 'I')? 
	 *         (ambiguity) 
	 *         preStateE1=DeclarativeScenarioState
	 *     )
	 *     actionE=DeclarativeScenarioAction 'Then' ('the' | ('all' 'the') | 'I')? (ambiguity) preStateE1=DeclarativeScenarioState
	 *     imperative1=ImperativeScenario (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) ('do' 'not')? OPTION 'Then' ('the' | ('all' 'the') | 'I')? (ambiguity) preStateE1=DeclarativeScenarioState
	 *     imperative2=ImperativeScenario 'Then' ('the' | ('all' 'the') | 'I')? (ambiguity) preStateE1=DeclarativeScenarioState
	 *     preStateE=DeclarativeScenarioState (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) ('do' 'not')? OPTION 'Then' ('the' | ('all' 'the') | 'I')? (ambiguity) preStateE1=DeclarativeScenarioState
	 
	 * </pre>
	 */
	protected void emit_Scenario___DoKeyword_14_1_2_0_NotKeyword_14_1_2_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (
	  *         'out' | 
	  *         'off' | 
	  *         'on' | 
	  *         'in' | 
	  *         '-' | 
	  *         'the' | 
	  *         ('to' 'the') | 
	  *         'to'
	  *     )?
	 *
	 * This ambiguous syntax occurs at:
	 *     (
	 *         name=ID_OR_STRING 
	 *         (ambiguity) 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         'Given' 
	 *         ('the' | ('all' 'the') | 'I')? 
	 *         ('do' 'not')? 
	 *         preStateE=DeclarativeScenarioState
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         (ambiguity) 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'I' 'do' 'not') | ('When' 'the') | ('Given' 'I') | 'When') 
	 *         actionE=DeclarativeScenarioAction
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         (ambiguity) 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         'Then' 
	 *         ('the' | ('all' 'the') | 'I')? 
	 *         ('do' 'not')? 
	 *         preStateE1=DeclarativeScenarioState
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         (ambiguity) 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('Then' 'the') | ('Then' 'I') | 'Then') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (rule end)
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         (ambiguity) 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('Then' 'the') | ('Then' 'I') | 'Then') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         imperative3=ImperativeScenario
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         (ambiguity) 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         imperative2=ImperativeScenario
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         (ambiguity) 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         imperative1=ImperativeScenario
	 *     )
	 
	 * </pre>
	 */
	protected void emit_Scenario___HyphenMinusKeyword_2_4_or_InKeyword_2_3_or_OffKeyword_2_1_or_OnKeyword_2_2_or_OutKeyword_2_0_or_TheKeyword_2_5_or_ToKeyword_2_7_or___ToKeyword_2_6_0_TheKeyword_2_6_1____q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('off' | 'on' | 'in' | '-' | 'the')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         (ambiguity) 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         'Given' 
	 *         ('the' | ('all' 'the') | 'I')? 
	 *         ('do' 'not')? 
	 *         preStateE=DeclarativeScenarioState
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         (ambiguity) 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'I' 'do' 'not') | ('When' 'the') | ('Given' 'I') | 'When') 
	 *         actionE=DeclarativeScenarioAction
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         (ambiguity) 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         'Then' 
	 *         ('the' | ('all' 'the') | 'I')? 
	 *         ('do' 'not')? 
	 *         preStateE1=DeclarativeScenarioState
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         (ambiguity) 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('Then' 'the') | ('Then' 'I') | 'Then') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (rule end)
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         (ambiguity) 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('Then' 'the') | ('Then' 'I') | 'Then') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         imperative3=ImperativeScenario
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         (ambiguity) 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         imperative2=ImperativeScenario
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         (ambiguity) 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         imperative1=ImperativeScenario
	 *     )
	 
	 * </pre>
	 */
	protected void emit_Scenario___HyphenMinusKeyword_4_3_or_InKeyword_4_2_or_OffKeyword_4_0_or_OnKeyword_4_1_or_TheKeyword_4_4__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('on' | 'in' | '-' | 'the')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         (ambiguity) 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         'Given' 
	 *         ('the' | ('all' 'the') | 'I')? 
	 *         ('do' 'not')? 
	 *         preStateE=DeclarativeScenarioState
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         (ambiguity) 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'I' 'do' 'not') | ('When' 'the') | ('Given' 'I') | 'When') 
	 *         actionE=DeclarativeScenarioAction
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         (ambiguity) 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         'Then' 
	 *         ('the' | ('all' 'the') | 'I')? 
	 *         ('do' 'not')? 
	 *         preStateE1=DeclarativeScenarioState
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         (ambiguity) 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('Then' 'the') | ('Then' 'I') | 'Then') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (rule end)
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         (ambiguity) 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('Then' 'the') | ('Then' 'I') | 'Then') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         imperative3=ImperativeScenario
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         (ambiguity) 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         imperative2=ImperativeScenario
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         (ambiguity) 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         imperative1=ImperativeScenario
	 *     )
	 
	 * </pre>
	 */
	protected void emit_Scenario___HyphenMinusKeyword_6_2_or_InKeyword_6_1_or_OnKeyword_6_0_or_TheKeyword_6_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('in' | '-' | 'the')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         (ambiguity) 
	 *         WORD? 
	 *         'Given' 
	 *         ('the' | ('all' 'the') | 'I')? 
	 *         ('do' 'not')? 
	 *         preStateE=DeclarativeScenarioState
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         (ambiguity) 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'I' 'do' 'not') | ('When' 'the') | ('Given' 'I') | 'When') 
	 *         actionE=DeclarativeScenarioAction
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         (ambiguity) 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         'Then' 
	 *         ('the' | ('all' 'the') | 'I')? 
	 *         ('do' 'not')? 
	 *         preStateE1=DeclarativeScenarioState
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         (ambiguity) 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('Then' 'the') | ('Then' 'I') | 'Then') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (rule end)
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         (ambiguity) 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('Then' 'the') | ('Then' 'I') | 'Then') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         imperative3=ImperativeScenario
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         (ambiguity) 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         imperative2=ImperativeScenario
	 *     )
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         (ambiguity) 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         imperative1=ImperativeScenario
	 *     )
	 
	 * </pre>
	 */
	protected void emit_Scenario___HyphenMinusKeyword_8_1_or_InKeyword_8_0_or_TheKeyword_8_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('the' | ('all' 'the') | 'I')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         'Given' 
	 *         (ambiguity) 
	 *         ('do' 'not')? 
	 *         preStateE=DeclarativeScenarioState
	 *     )
	 
	 * </pre>
	 */
	protected void emit_Scenario___IKeyword_10_1_1_2_or_TheKeyword_10_1_1_0_or___AllKeyword_10_1_1_1_0_TheKeyword_10_1_1_1_1____q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('the' | ('all' 'the') | 'I')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (
	 *         name=ID_OR_STRING 
	 *         ('out' | 'off' | 'on' | 'in' | '-' | 'the' | ('to' 'the') | 'to')? 
	 *         WORD? 
	 *         ('off' | 'on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('on' | 'in' | '-' | 'the')? 
	 *         WORD? 
	 *         ('in' | '-' | 'the')? 
	 *         WORD? 
	 *         (('Given' 'the') | ('Given' 'I') | 'Given') 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) 
	 *         ('do' 'not')? 
	 *         OPTION 
	 *         'Then' 
	 *         (ambiguity) 
	 *         ('do' 'not')? 
	 *         preStateE1=DeclarativeScenarioState
	 *     )
	 *     actionE=DeclarativeScenarioAction 'Then' (ambiguity) ('do' 'not')? preStateE1=DeclarativeScenarioState
	 *     imperative1=ImperativeScenario (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) ('do' 'not')? OPTION 'Then' (ambiguity) ('do' 'not')? preStateE1=DeclarativeScenarioState
	 *     imperative2=ImperativeScenario 'Then' (ambiguity) ('do' 'not')? preStateE1=DeclarativeScenarioState
	 *     preStateE=DeclarativeScenarioState (('When' 'I') | ('When' 'the') | 'When' | ('And' 'I')) ('do' 'not')? OPTION 'Then' (ambiguity) ('do' 'not')? preStateE1=DeclarativeScenarioState
	 
	 * </pre>
	 */
	protected void emit_Scenario___IKeyword_14_1_1_2_or_TheKeyword_14_1_1_0_or___AllKeyword_14_1_1_1_0_TheKeyword_14_1_1_1_1____q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     PREP?
	 *
	 * This ambiguous syntax occurs at:
	 *     postive=StateName (ambiguity) '/' negative=StateName
	 *     postive=StateName (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_StateDef_PREPParserRuleCall_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'and'?
	 *
	 * This ambiguous syntax occurs at:
	 *     action=DeclarativeActionRef (ambiguity) WORD? 'on'? (WORD '-' WORD)? (('for' 'the') | 'the' | 'on' | ('to' 'the'))? ('on' | 'off' | 'in')? entity2=DeclarativeEntityRef
	 *     action=DeclarativeActionRef (ambiguity) WORD? 'on'? (WORD '-' WORD)? (('for' 'the') | 'the' | 'on' | ('to' 'the'))? entity=DeclarativeEntityDef
	 
	 * </pre>
	 */
	protected void emit_VerbAction_AndKeyword_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'on'?
	 *
	 * This ambiguous syntax occurs at:
	 *     action=DeclarativeActionRef 'and'? WORD? (ambiguity) (WORD '-' WORD)? (('for' 'the') | 'the' | 'on' | ('to' 'the'))? ('on' | 'off' | 'in')? entity2=DeclarativeEntityRef
	 *     action=DeclarativeActionRef 'and'? WORD? (ambiguity) (WORD '-' WORD)? (('for' 'the') | 'the' | 'on' | ('to' 'the'))? entity=DeclarativeEntityDef
	 
	 * </pre>
	 */
	protected void emit_VerbAction_OnKeyword_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     PREP?
	 *
	 * This ambiguous syntax occurs at:
	 *     entity2=DeclarativeEntityRef ('on' | 'off' | 'in')? ('of' | 'for' | ('for' 'the') | ('of' 'the'))? (ambiguity) (rule end)
	 *     entity2=DeclarativeEntityRef ('on' | 'off' | 'in')? ('of' | 'for' | ('for' 'the') | ('of' 'the'))? (ambiguity) entity3=DeclarativeEntityRef
	 
	 * </pre>
	 */
	protected void emit_VerbAction_PREPParserRuleCall_11_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WORD?
	 *
	 * This ambiguous syntax occurs at:
	 *     action=DeclarativeActionRef 'and'? (ambiguity) 'on'? (WORD '-' WORD)? (('for' 'the') | 'the' | 'on' | ('to' 'the'))? ('on' | 'off' | 'in')? entity2=DeclarativeEntityRef
	 *     action=DeclarativeActionRef 'and'? (ambiguity) 'on'? (WORD '-' WORD)? (('for' 'the') | 'the' | 'on' | ('to' 'the'))? entity=DeclarativeEntityDef
	 
	 * </pre>
	 */
	protected void emit_VerbAction_WORDParserRuleCall_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('of' | 'for' | ('for' 'the') | ('of' 'the'))?
	 *
	 * This ambiguous syntax occurs at:
	 *     entity2=DeclarativeEntityRef ('on' | 'off' | 'in')? (ambiguity) PREP? (rule end)
	 *     entity2=DeclarativeEntityRef ('on' | 'off' | 'in')? (ambiguity) PREP? entity3=DeclarativeEntityRef
	 
	 * </pre>
	 */
	protected void emit_VerbAction___ForKeyword_10_1_or_OfKeyword_10_0_or___ForKeyword_10_2_0_TheKeyword_10_2_1___or___OfKeyword_10_3_0_TheKeyword_10_3_1____q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('on' | 'off' | 'in')?
	 *
	 * This ambiguous syntax occurs at:
	 *     action=DeclarativeActionRef 'and'? WORD? 'on'? (WORD '-' WORD)? (('for' 'the') | 'the' | 'on' | ('to' 'the'))? (ambiguity) entity2=DeclarativeEntityRef
	 *     entity=DeclarativeEntityDef (ambiguity) entity2=DeclarativeEntityRef
	 
	 * </pre>
	 */
	protected void emit_VerbAction___InKeyword_7_2_or_OffKeyword_7_1_or_OnKeyword_7_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('on' | 'off' | 'in')?
	 *
	 * This ambiguous syntax occurs at:
	 *     entity2=DeclarativeEntityRef (ambiguity) ('of' | 'for' | ('for' 'the') | ('of' 'the'))? PREP? (rule end)
	 *     entity2=DeclarativeEntityRef (ambiguity) ('of' | 'for' | ('for' 'the') | ('of' 'the'))? PREP? entity3=DeclarativeEntityRef
	 
	 * </pre>
	 */
	protected void emit_VerbAction___InKeyword_9_2_or_OffKeyword_9_1_or_OnKeyword_9_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (('for' 'the') | 'the' | 'on' | ('to' 'the'))?
	 *
	 * This ambiguous syntax occurs at:
	 *     action=DeclarativeActionRef 'and'? WORD? 'on'? (WORD '-' WORD)? (ambiguity) ('on' | 'off' | 'in')? entity2=DeclarativeEntityRef
	 *     action=DeclarativeActionRef 'and'? WORD? 'on'? (WORD '-' WORD)? (ambiguity) entity=DeclarativeEntityDef
	 
	 * </pre>
	 */
	protected void emit_VerbAction___OnKeyword_5_2_or_TheKeyword_5_1_or___ForKeyword_5_0_0_TheKeyword_5_0_1___or___ToKeyword_5_3_0_TheKeyword_5_3_1____q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (WORD '-' WORD)?
	 *
	 * This ambiguous syntax occurs at:
	 *     action=DeclarativeActionRef 'and'? WORD? 'on'? (ambiguity) (('for' 'the') | 'the' | 'on' | ('to' 'the'))? ('on' | 'off' | 'in')? entity2=DeclarativeEntityRef
	 *     action=DeclarativeActionRef 'and'? WORD? 'on'? (ambiguity) (('for' 'the') | 'the' | 'on' | ('to' 'the'))? entity=DeclarativeEntityDef
	 
	 * </pre>
	 */
	protected void emit_VerbAction___WORDParserRuleCall_4_0_HyphenMinusKeyword_4_1_WORDParserRuleCall_4_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
