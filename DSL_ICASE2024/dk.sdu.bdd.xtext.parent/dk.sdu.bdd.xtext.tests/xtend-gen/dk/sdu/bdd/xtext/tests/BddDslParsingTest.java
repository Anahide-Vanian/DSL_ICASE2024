/**
 * generated by Xtext 2.25.0
 */
package dk.sdu.bdd.xtext.tests;

import com.google.inject.Inject;
import dk.sdu.bdd.xtext.bddDsl.Model;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.testing.validation.ValidationTestHelper;
import org.eclipse.xtext.validation.Issue;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

@ExtendWith(InjectionExtension.class)
@InjectWith(BddDslInjectorProvider.class)
@SuppressWarnings("all")
public class BddDslParsingTest {
  @Inject
  private ParseHelper<Model> parseHelper;

  @Inject
  private ValidationTestHelper validationTestHelper;

  @Test
  public void loadModel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Hello Xtext!");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testDeclarativeEntityDef() {
    try {
      final Model result = this.parseHelper.parse(
        "model test\n\t\tdeclarative entity assembler {\n\t\t\tactions: inserts\n\t\t\tstates: ready\n\t\t}");
      this.validationTestHelper.assertNoIssues(result);
      final List<Issue> errors = this.validationTestHelper.validate(result);
      result.eResource().getErrors();
      Assertions.assertTrue(errors.isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testImperativeEntityDef() {
    try {
      final Model result = this.parseHelper.parse(
        "model test\n\t\timperative entity assembler {\n\t\t\tactions: inserts\n\t\t\tstates: ready\n\t\t}");
      this.validationTestHelper.assertNoIssues(result);
      final List<Issue> errors = this.validationTestHelper.validate(result);
      Assertions.assertTrue(errors.isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testSuccesfulScenario() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model test");
      _builder.newLine();
      _builder.newLine();
      _builder.append("imperative entity robot {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("actions: moves");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("properties: position, speed");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("imperative entity gripper {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("actions: closes, opens");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("states: closed, opened\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("imperative entity input {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("states: ON/OFF ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("properties: signal");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("imperative entity sensor is input {");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("imperative entity button is input {");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("imperative entity output {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("actions: activates, deactivates");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("states: ON/OFF");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("imperative entity light is output {");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("imperative entity buzzer is output {");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("declarative entity box {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("states: full");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("declarative entity can {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("states: ready");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("declarative entity packager {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("actions: packages");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("states: finished, started");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("Scenario: \"Can is moved to box\"");
      _builder.newLine();
      _builder.append("Given the can \"cans\" is ready");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("which means");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("Given the signal of the button \"can-button\" is \"ON\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("When the robot \"Packager\" moves to position \"above cans\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("Then the light \"Cans are ready\" is ON ");
      _builder.newLine();
      _builder.append("When the packager \"Can packager\" packages");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("which means");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("Given the position of the robot \"Packager\" is \"above cans\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("When the robot \"Packager\" moves to position \"can 1\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("And the gripper \"Packager\" closes");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("And the robot \"Packager\" moves to position \"above cans\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("And the robot \"Packager\" moves to position \"box\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("And the gripper \"packager\" opens");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("And the robot \"Packager\" moves to position \"above cans\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("And the robot \"Packager\" moves to position \"can 2\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("And the robot \"Packager\" moves to position \"above cans\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("And the robot \"Packager\" moves to position \"box\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("Then the gripper \"Packager\" is opened");
      _builder.newLine();
      _builder.append("Then the packager \"Can packager\" is finished");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("which means");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("Given the signal of the button \"can-button\" is \"ON\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("When the robot \"Packager\" moves to position \"above cans\"");
      _builder.newLine();
      _builder.append(" \t\t");
      _builder.append("Then the light \"Cans are ready\" is OFF");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      this.validationTestHelper.assertNoIssues(result);
      final List<Issue> errors = this.validationTestHelper.validate(result);
      Assertions.assertTrue(errors.isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testScenario() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model test");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("declarative entity box {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("states: full");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("declarative entity can {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("states: ready");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("declarative entity packager {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("actions: packages");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("states: finished, started");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("Scenario: \"Can is moved to box\"");
      _builder.newLine();
      _builder.append("Given the can \"cans\" is ready");
      _builder.newLine();
      _builder.append("When the packager \"Can packager\" packages");
      _builder.newLine();
      _builder.append("Then the packager \"Can packager\" is finished");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      this.validationTestHelper.assertNoIssues(result);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void failedEntityDef() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model test");
      _builder.newLine();
      _builder.newLine();
      _builder.append("entity car {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("actions: drive, stop");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("states: stopped");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("properties: wheel, speed, window, door");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      final List<Issue> error = this.validationTestHelper.validate(result);
      Assertions.assertFalse(error.isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testAdaptiveImperative() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model test");
      _builder.newLine();
      _builder.newLine();
      _builder.append("imperative entity robot {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("actions: moves");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("properties: position, speed");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("imperative entity gripper {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("actions: closes, opens");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("states: closed, opened\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("imperative entity input {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("states: ON/OFF ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("properties: signal");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("imperative entity sensor is input {");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("imperative entity button is input {");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("imperative entity output {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("actions: activates, deactivates");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("states: ON/OFF");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("imperative entity light is output {");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("imperative entity buzzer is output {");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("declarative entity box {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("states: full");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("declarative entity can {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("states: ready");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("declarative entity packager {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("actions: packages");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("states: finished, started");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("Scenario: \"Can is moved to box\"");
      _builder.newLine();
      _builder.append("Given the can \"cans\" is ready");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("which means");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("Given the signal of the button \"can-button\" is \"ON\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("When the robot \"Packager\" moves to position \"above cans\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("Then the light \"Cans are ready\" is ON ");
      _builder.newLine();
      _builder.append("When the packager \"Can packager\" packages");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("which means");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("Given the position of the robot \"Packager\" is \"above cans\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("When the robot \"Packager\" moves to position \"can 1\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("And the gripper \"Packager\" closes");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("And the robot \"Packager\" moves to position \"above cans\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("And the robot \"Packager\" moves to position \"box\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("And the gripper \"packager\" opens");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("And the robot \"Packager\" moves to position \"above cans\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("And the robot \"Packager\" moves to position \"can 2\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("And the robot \"Packager\" moves to position \"above cans\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("And the robot \"Packager\" moves to position \"box\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("Then the gripper \"Packager\" is opened");
      _builder.newLine();
      _builder.append("Then the packager \"Can packager\" is finished");
      _builder.newLine();
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      this.validationTestHelper.assertNoIssues(result);
      final List<Issue> errors = this.validationTestHelper.validate(result);
      Assertions.assertTrue(errors.isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testImperativeEntityUsageOnly() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model test");
      _builder.newLine();
      _builder.newLine();
      _builder.append("imperative entity robot {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("actions: moves");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("properties: position, speed");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("imperative entity gripper {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("actions: closes, opens");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("states: closed, opened\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("imperative entity input {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("states: ON/OFF ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("properties: signal");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("imperative entity sensor is input {");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("imperative entity button is input {");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("imperative entity output {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("actions: activates, deactivates");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("states: ON/OFF");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("imperative entity light is output {");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("imperative entity buzzer is output {");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("imperative entity box {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("states: full");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("imperative entity can {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("states: ready");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("imperative entity packager {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("actions: packages");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("states: finished, started");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("Scenario: \"Can is moved to box\"");
      _builder.newLine();
      _builder.append("Given the can \"cans\" is ready");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("which means");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("Given the signal of the button \"can-button\" is \"ON\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("When the robot \"Packager\" moves to position \"above cans\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("Then the light \"Cans are ready\" is ON ");
      _builder.newLine();
      _builder.append("When the packager \"Can packager\" packages");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("which means");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("Given the position of the robot \"Packager\" is \"above cans\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("When the robot \"Packager\" moves to position \"can 1\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("And the gripper \"Packager\" closes");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("And the robot \"Packager\" moves to position \"above cans\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("And the robot \"Packager\" moves to position \"box\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("And the gripper \"packager\" opens");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("And the robot \"Packager\" moves to position \"above cans\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("And the robot \"Packager\" moves to position \"can 2\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("And the robot \"Packager\" moves to position \"above cans\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("And the robot \"Packager\" moves to position \"box\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("Then the gripper \"Packager\" is opened");
      _builder.newLine();
      _builder.append("Then the packager \"Can packager\" is finished");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("which means");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("Given the signal of the button \"can-button\" is \"ON\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("When the robot \"Packager\" moves to position \"above cans\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("Then the light \"Cans are ready\" is OFF");
      _builder.newLine();
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      final List<Issue> errors = this.validationTestHelper.validate(result);
      Assertions.assertFalse(errors.isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
